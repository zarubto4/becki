export declare module BlockoCore {
    interface BlockClass {
        new (id: string): any;
    }
    class BlockRegistration {
        blockClass: BlockClass;
        type: string;
        visualType: string;
        displayName: string;
        constructor(blockClass: BlockClass, type: string, visualType: string, displayName: string);
    }
    class Controller {
        private static _instance;
        static getInstance(): Controller;
        blocksRegister: Array<BlockRegistration>;
        blocks: Array<Block>;
        connections: Array<Connection>;
        constructor();
        registerBlocks(blocksClass: Array<BlockClass>): void;
        registerBlock(blockClass: BlockClass): void;
        getBlockClassByVisutalType(visualType: string): BlockClass;
        addBlock(block: Block): void;
        _addConnection(connection: Connection): void;
        _removeConnection(connection: Connection): void;
        _removeBlock(block: Block): void;
        removeAllBlocks(): void;
        getBlockById(id: string): Block;
        private blockIndex;
        getFreeBlockId(): string;
        private factoryBlockRendererCallback;
        registerFactoryBlockRendererCallback(callback: (block: Block) => IBlockRenderer): void;
        private factoryConnectionRendererCallback;
        registerFactoryConnectionRendererCallback(callback: (connection: Connection) => IConnectionRenderer): void;
        private digitalValueChangeCallback;
        registerDigitalValueChangeCallback(callback: (hwId: string, value: boolean) => void): void;
        private analogValueChangeCallback;
        registerAnalogValueChangeCallback(callback: (hwId: string, value: number) => void): void;
        private blockDigitalValueChangeCallback(block, value);
        private blockAnalogValueChangeCallback(block, value);
        setDigitalValue(hwId: string, value: boolean): void;
        setAnalogValue(hwId: string, value: number): void;
        getDigitalInputHwIds(): Array<string>;
        getAnalogInputHwIds(): Array<string>;
        getDataJson(): string;
        setDataJson(jsonString: string): string;
    }
    enum ConnectorType {
        DigitalOutput = 0,
        DigitalInput = 1,
        DigitalInputOr = 2,
        DigitalInputAnd = 3,
        DigitalInputXor = 4,
        AnalogInput = 5,
        AnalogOutput = 6,
    }
    class Connector {
        block: Block;
        name: string;
        type: ConnectorType;
        value: number;
        connections: Array<Connection>;
        constructor(block: Block, name: string, type: ConnectorType);
        connect(target: Connector): Connection;
        _removeConnection(connection: Connection): void;
        canConnect(target: Connector): boolean;
        isOutput(): boolean;
        isInput(): boolean;
        isAnalog(): boolean;
        haveFreeSpace(): boolean;
        _outputSetValue(value: number): void;
        _inputSetValue(value: number): void;
    }
    class Connection {
        connectorA: Connector;
        connectorB: Connector;
        renderer: IConnectionRenderer;
        constructor(connectorA: Connector, connectorB: Connector);
        getOtherConnector(self: Connector): Connector;
        getInputConnector(): Connector;
        getOutputConnector(): Connector;
        disconnect(): void;
    }
    interface IDigitalInputBlock {
        setDigitalValue(value: boolean): void;
    }
    interface IAnalogInputBlock {
        setAnalogValue(value: number): void;
    }
    interface IDigitalOutputBlock {
        registerDigitalValueChangeCallback(callback: (block: Block, value: boolean) => void): void;
    }
    interface IAnalogOutputBlock {
        registerAnalogValueChangeCallback(callback: (block: Block, value: number) => void): void;
    }
    interface IBlockRenderer {
        refresh(): void;
        destroy(): void;
        getConnectorPosition(name: string): {
            x: number;
            y: number;
        };
    }
    interface IConnectionRenderer {
        refresh(): void;
        destroy(): void;
    }
    enum ConfigPropertyType {
        Integer = 0,
        Float = 1,
        String = 2,
        Boolean = 3,
        JSString = 4,
    }
    class ConfigProperty {
        id: string;
        displayName: string;
        config: any;
        type: ConfigPropertyType;
        value: any;
        constructor(type: ConfigPropertyType, id: string, displayName: string, defaultValue: any, config?: any);
    }
    class Block {
        protected inputConnectors: Array<Connector>;
        protected outputConnectors: Array<Connector>;
        protected configProperties: Array<ConfigProperty>;
        id: string;
        hwId: string;
        type: string;
        visualType: string;
        renderer: IBlockRenderer;
        x: number;
        y: number;
        constructor(id: string, type: string, visualType: string);
        protected sendValueToOutputConnector(connector: Connector, value: number): void;
        protected addOutputConnector(name: string, type: ConnectorType): Connector;
        protected addInputConnector(name: string, type: ConnectorType): Connector;
        protected removeOutputConnector(connector: Connector): void;
        protected removeInputConnector(connector: Connector): void;
        protected addConfigProperty(type: ConfigPropertyType, id: string, displayName: string, defaultValue: any, config?: any): ConfigProperty;
        getInputConnectors(): Array<Connector>;
        getOutputConnectors(): Array<Connector>;
        getConfigProperties(): Array<ConfigProperty>;
        _outputsChanged(): void;
        _inputsChanged(): void;
        emitConfigsChanged(): void;
        getConfigData(): any;
        getConfigPropertyById(id: string): ConfigProperty;
        setConfigData(json: any): void;
        private disconnectConnectionFromConnector(connector);
        remove(): void;
        getOutputConnectorByName(name: string): Connector;
        getInputConnectorByName(name: string): Connector;
        inputsChanged(): void;
        configsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
}
