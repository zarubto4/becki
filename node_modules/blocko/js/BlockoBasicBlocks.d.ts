import { BlockoCore } from "./BlockoCore";
export declare module BlockoBasicBlocks {
    class Manager {
        static getAllBlocks(): Array<BlockoCore.BlockClass>;
    }
    class DigitalInput extends BlockoCore.Block implements BlockoCore.IDigitalInputBlock {
        connectorOutput: BlockoCore.Connector;
        protected value: boolean;
        constructor(id: string, visibleType: string);
        setDigitalValue(value: boolean): void;
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
    }
    class DigitalOutput extends BlockoCore.Block implements BlockoCore.IDigitalOutputBlock {
        connectorInput: BlockoCore.Connector;
        protected value: boolean;
        constructor(id: string, visibleType: string);
        private digitalValueChangeCallback;
        registerDigitalValueChangeCallback(callback: (block: BlockoCore.Block, value: boolean) => void): void;
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
    }
    class Switch extends DigitalInput {
        private configHwId;
        constructor(id: string);
        configsChanged(): void;
        rendererGetDisplayName(): string;
    }
    class PushButton extends DigitalInput {
        private configHwId;
        constructor(id: string);
        configsChanged(): void;
        rendererGetDisplayName(): string;
    }
    class Light extends DigitalOutput {
        private configHwId;
        constructor(id: string);
        configsChanged(): void;
        rendererGetDisplayName(): string;
    }
    class And extends BlockoCore.Block {
        connectorInput: BlockoCore.Connector;
        connectorOutput: BlockoCore.Connector;
        constructor(id: string);
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
    class Or extends BlockoCore.Block {
        connectorInput: BlockoCore.Connector;
        connectorOutput: BlockoCore.Connector;
        constructor(id: string);
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
    class Xor extends BlockoCore.Block {
        connectorInput: BlockoCore.Connector;
        connectorOutput: BlockoCore.Connector;
        constructor(id: string);
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
    class Not extends BlockoCore.Block {
        connectorInput: BlockoCore.Connector;
        connectorOutput: BlockoCore.Connector;
        constructor(id: string);
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
    class FlipFlop extends BlockoCore.Block {
        connectorInput: BlockoCore.Connector;
        connectorOutput: BlockoCore.Connector;
        connectorOutputNeg: BlockoCore.Connector;
        private lastInputValue;
        constructor(id: string);
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
    class DelayTimer extends BlockoCore.Block {
        connectorInput: BlockoCore.Connector;
        connectorOutput: BlockoCore.Connector;
        configTime: BlockoCore.ConfigProperty;
        private lastInputValue;
        private timeoutHandle;
        constructor(id: string);
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
    class AsyncGenerator extends BlockoCore.Block {
        connectorEnabled: BlockoCore.Connector;
        connectorOutput: BlockoCore.Connector;
        configTimeDown: BlockoCore.ConfigProperty;
        configTimeUp: BlockoCore.ConfigProperty;
        configStartUp: BlockoCore.ConfigProperty;
        private lastInputValue;
        constructor(id: string);
        private timeoutUpHandle;
        private timeoutDownHandle;
        private timerUp();
        private timerDown();
        private timerStop();
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
    class JSBlock extends BlockoCore.Block {
        configJs: BlockoCore.ConfigProperty;
        configDigitalInputsCount: BlockoCore.ConfigProperty;
        configAnalogInputsCount: BlockoCore.ConfigProperty;
        configDigitalOutputsCount: BlockoCore.ConfigProperty;
        configAnalogOutputsCount: BlockoCore.ConfigProperty;
        jsEngine: any;
        constructor(id: string);
        inputsChanged(): void;
        configsChanged(): void;
        rendererGetDisplayName(): string;
        rendererGetBlockBackgroundColor(): string;
    }
    class AnalogInput extends BlockoCore.Block implements BlockoCore.IAnalogInputBlock {
        connectorOutput: BlockoCore.Connector;
        private configHwId;
        protected value: number;
        constructor(id: string);
        setAnalogValue(value: number): void;
        inputsChanged(): void;
        configsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
    class AnalogOutput extends BlockoCore.Block implements BlockoCore.IAnalogOutputBlock {
        connectorInput: BlockoCore.Connector;
        private configHwId;
        protected value: number;
        constructor(id: string);
        private analogValueChangeCallback;
        registerAnalogValueChangeCallback(callback: (block: BlockoCore.Block, value: number) => void): void;
        inputsChanged(): void;
        configsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
    class AnalogRange extends BlockoCore.Block {
        connectorInput: BlockoCore.Connector;
        connectorOutput: BlockoCore.Connector;
        configMin: BlockoCore.ConfigProperty;
        configMax: BlockoCore.ConfigProperty;
        constructor(id: string);
        configsChanged(): void;
        inputsChanged(): void;
        rendererGetBlockBackgroundColor(): string;
        rendererGetDisplayName(): string;
    }
}
