var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BlockoCore_1 = require("./BlockoCore");
var BlockoBasicBlocks;
(function (BlockoBasicBlocks) {
    var Manager = (function () {
        function Manager() {
        }
        Manager.getAllBlocks = function () {
            return [
                BlockoBasicBlocks.Switch,
                BlockoBasicBlocks.PushButton,
                BlockoBasicBlocks.Light,
                BlockoBasicBlocks.And,
                BlockoBasicBlocks.Or,
                BlockoBasicBlocks.Xor,
                BlockoBasicBlocks.Not,
                BlockoBasicBlocks.FlipFlop,
                BlockoBasicBlocks.DelayTimer,
                BlockoBasicBlocks.AsyncGenerator,
                BlockoBasicBlocks.JSBlock,
                BlockoBasicBlocks.AnalogInput,
                BlockoBasicBlocks.AnalogOutput,
                BlockoBasicBlocks.AnalogRange
            ];
        };
        return Manager;
    })();
    BlockoBasicBlocks.Manager = Manager;
    var DigitalInput = (function (_super) {
        __extends(DigitalInput, _super);
        function DigitalInput(id, visibleType) {
            _super.call(this, id, "digitalInput", visibleType);
            this.value = false;
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
        }
        DigitalInput.prototype.setDigitalValue = function (value) {
            this.value = value;
            this.sendValueToOutputConnector(this.connectorOutput, value ? 1 : 0);
        };
        DigitalInput.prototype.inputsChanged = function () {
        };
        DigitalInput.prototype.rendererGetBlockBackgroundColor = function () {
            if (this.value) {
                return "#FFCCCC";
            }
            else {
                return "#CCCCFF";
            }
        };
        return DigitalInput;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.DigitalInput = DigitalInput;
    var DigitalOutput = (function (_super) {
        __extends(DigitalOutput, _super);
        function DigitalOutput(id, visibleType) {
            _super.call(this, id, "digitalOutput", visibleType);
            this.value = false;
            this.connectorInput = this.addInputConnector("input", BlockoCore_1.BlockoCore.ConnectorType.DigitalInputOr);
        }
        DigitalOutput.prototype.registerDigitalValueChangeCallback = function (callback) {
            this.digitalValueChangeCallback = callback;
        };
        DigitalOutput.prototype.inputsChanged = function () {
            this.value = this.connectorInput.value != 0 ? true : false;
            if (this.digitalValueChangeCallback) {
                this.digitalValueChangeCallback(this, this.value);
            }
        };
        DigitalOutput.prototype.rendererGetBlockBackgroundColor = function () {
            if (this.value) {
                return "#FFCCCC";
            }
            else {
                return "#CCCCFF";
            }
        };
        return DigitalOutput;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.DigitalOutput = DigitalOutput;
    var Switch = (function (_super) {
        __extends(Switch, _super);
        function Switch(id) {
            _super.call(this, id, "switch");
            this.hwId = id;
            this.configHwId = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.String, "hwId", "HW ID", id);
        }
        Switch.prototype.configsChanged = function () {
            this.hwId = this.configHwId.value;
        };
        Switch.prototype.rendererGetDisplayName = function () {
            return (this.value) ? "[MI]\uE834" : "[MI]\uE835";
        };
        return Switch;
    })(DigitalInput);
    BlockoBasicBlocks.Switch = Switch;
    var PushButton = (function (_super) {
        __extends(PushButton, _super);
        function PushButton(id) {
            _super.call(this, id, "pushButton");
            this.hwId = id;
            this.configHwId = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.String, "hwId", "HW ID", id);
        }
        PushButton.prototype.configsChanged = function () {
            this.hwId = this.configHwId.value;
        };
        PushButton.prototype.rendererGetDisplayName = function () {
            return (this.value) ? "[MI]\uE837" : "[MI]\uE836";
        };
        return PushButton;
    })(DigitalInput);
    BlockoBasicBlocks.PushButton = PushButton;
    var Light = (function (_super) {
        __extends(Light, _super);
        function Light(id) {
            _super.call(this, id, "light");
            this.hwId = id;
            this.configHwId = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.String, "hwId", "HW ID", id);
        }
        Light.prototype.configsChanged = function () {
            this.hwId = this.configHwId.value;
        };
        Light.prototype.rendererGetDisplayName = function () {
            return (this.value) ? "[MI]\uE3AC" : "[MI]\uE3AA";
        };
        return Light;
    })(DigitalOutput);
    BlockoBasicBlocks.Light = Light;
    var And = (function (_super) {
        __extends(And, _super);
        function And(id) {
            _super.call(this, id, "and", "and");
            this.connectorInput = this.addInputConnector("input", BlockoCore_1.BlockoCore.ConnectorType.DigitalInputAnd);
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
        }
        And.prototype.inputsChanged = function () {
            this.sendValueToOutputConnector(this.connectorOutput, this.connectorInput.value);
        };
        And.prototype.rendererGetBlockBackgroundColor = function () {
            return "#a1887f";
        };
        And.prototype.rendererGetDisplayName = function () {
            return "AND";
        };
        return And;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.And = And;
    var Or = (function (_super) {
        __extends(Or, _super);
        function Or(id) {
            _super.call(this, id, "or", "or");
            this.connectorInput = this.addInputConnector("input", BlockoCore_1.BlockoCore.ConnectorType.DigitalInputOr);
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
        }
        Or.prototype.inputsChanged = function () {
            this.sendValueToOutputConnector(this.connectorOutput, this.connectorInput.value);
        };
        Or.prototype.rendererGetBlockBackgroundColor = function () {
            return "#a1887f";
        };
        Or.prototype.rendererGetDisplayName = function () {
            return "OR";
        };
        return Or;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.Or = Or;
    var Xor = (function (_super) {
        __extends(Xor, _super);
        function Xor(id) {
            _super.call(this, id, "xor", "xor");
            this.connectorInput = this.addInputConnector("input", BlockoCore_1.BlockoCore.ConnectorType.DigitalInputXor);
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
        }
        Xor.prototype.inputsChanged = function () {
            this.sendValueToOutputConnector(this.connectorOutput, this.connectorInput.value);
        };
        Xor.prototype.rendererGetBlockBackgroundColor = function () {
            return "#a1887f";
        };
        Xor.prototype.rendererGetDisplayName = function () {
            return "XOR";
        };
        return Xor;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.Xor = Xor;
    var Not = (function (_super) {
        __extends(Not, _super);
        function Not(id) {
            _super.call(this, id, "not", "not");
            this.connectorInput = this.addInputConnector("input", BlockoCore_1.BlockoCore.ConnectorType.DigitalInput);
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
        }
        Not.prototype.inputsChanged = function () {
            this.sendValueToOutputConnector(this.connectorOutput, (this.connectorInput.value == 0) ? 1 : 0);
        };
        Not.prototype.rendererGetBlockBackgroundColor = function () {
            return "#a1887f";
        };
        Not.prototype.rendererGetDisplayName = function () {
            return "NOT";
        };
        return Not;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.Not = Not;
    var FlipFlop = (function (_super) {
        __extends(FlipFlop, _super);
        function FlipFlop(id) {
            _super.call(this, id, "flipFlop", "flipFlop");
            this.lastInputValue = 0;
            this.connectorInput = this.addInputConnector("input", BlockoCore_1.BlockoCore.ConnectorType.DigitalInput);
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
            this.connectorOutputNeg = this.addOutputConnector("outputNeg", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
            this.connectorOutputNeg.value = 1;
        }
        FlipFlop.prototype.inputsChanged = function () {
            if (this.connectorInput.value != this.lastInputValue) {
                if (this.connectorInput.value > this.lastInputValue) {
                    this.sendValueToOutputConnector(this.connectorOutput, (this.connectorOutput.value == 0 ? 1 : 0));
                    this.sendValueToOutputConnector(this.connectorOutputNeg, (this.connectorOutputNeg.value == 0 ? 1 : 0));
                }
                this.lastInputValue = this.connectorInput.value;
            }
        };
        FlipFlop.prototype.rendererGetBlockBackgroundColor = function () {
            return "#90a4ae";
        };
        FlipFlop.prototype.rendererGetDisplayName = function () {
            return "[MI]\uE040";
        };
        return FlipFlop;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.FlipFlop = FlipFlop;
    var DelayTimer = (function (_super) {
        __extends(DelayTimer, _super);
        function DelayTimer(id) {
            _super.call(this, id, "delayTimer", "delayTimer");
            this.lastInputValue = 0;
            this.timeoutHandle = null;
            this.connectorInput = this.addInputConnector("input", BlockoCore_1.BlockoCore.ConnectorType.DigitalInput);
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
            this.configTime = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Float, "time", "Time", 5.0, { displayUnit: "sec" });
        }
        DelayTimer.prototype.inputsChanged = function () {
            var _this = this;
            if (this.connectorInput.value != this.lastInputValue) {
                if (this.connectorInput.value > this.lastInputValue) {
                    clearTimeout(this.timeoutHandle);
                    this.sendValueToOutputConnector(this.connectorOutput, 1);
                }
                else {
                    this.timeoutHandle = setTimeout(function () {
                        _this.sendValueToOutputConnector(_this.connectorOutput, 0);
                    }, this.configTime.value * 1000);
                }
                this.lastInputValue = this.connectorInput.value;
            }
        };
        DelayTimer.prototype.rendererGetBlockBackgroundColor = function () {
            return "#90a4ae";
        };
        DelayTimer.prototype.rendererGetDisplayName = function () {
            return "[MI]\uE190";
        };
        return DelayTimer;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.DelayTimer = DelayTimer;
    var AsyncGenerator = (function (_super) {
        __extends(AsyncGenerator, _super);
        function AsyncGenerator(id) {
            _super.call(this, id, "asyncGenerator", "asyncGenerator");
            this.lastInputValue = 0;
            this.connectorEnabled = this.addInputConnector("enabled", BlockoCore_1.BlockoCore.ConnectorType.DigitalInput);
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
            this.configStartUp = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Boolean, "startUp", "Start up", true);
            this.configTimeDown = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Float, "timeDown", "Down time", 1.0, { displayUnit: "sec" });
            this.configTimeUp = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Float, "timeUp", "Up time", 1.0, { displayUnit: "sec" });
        }
        AsyncGenerator.prototype.timerUp = function () {
            var _this = this;
            this.sendValueToOutputConnector(this.connectorOutput, 1);
            this.timeoutUpHandle = setTimeout(function () {
                _this.timerDown();
            }, this.configTimeUp.value * 1000);
        };
        AsyncGenerator.prototype.timerDown = function () {
            var _this = this;
            this.sendValueToOutputConnector(this.connectorOutput, 0);
            this.timeoutDownHandle = setTimeout(function () {
                _this.timerUp();
            }, this.configTimeDown.value * 1000);
        };
        AsyncGenerator.prototype.timerStop = function () {
            clearTimeout(this.timeoutUpHandle);
            clearTimeout(this.timeoutDownHandle);
            this.sendValueToOutputConnector(this.connectorOutput, 0);
        };
        AsyncGenerator.prototype.inputsChanged = function () {
            if (this.connectorEnabled.value != this.lastInputValue) {
                if (this.connectorEnabled.value > this.lastInputValue) {
                    if (this.configStartUp.value) {
                        this.timerUp();
                    }
                    else {
                        this.timerDown();
                    }
                }
                else {
                    this.timerStop();
                }
                this.lastInputValue = this.connectorEnabled.value;
            }
        };
        AsyncGenerator.prototype.rendererGetBlockBackgroundColor = function () {
            return "#90a4ae";
        };
        AsyncGenerator.prototype.rendererGetDisplayName = function () {
            return "[MI]\uE336";
        };
        return AsyncGenerator;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.AsyncGenerator = AsyncGenerator;
    var JSBlock = (function (_super) {
        __extends(JSBlock, _super);
        function JSBlock(id) {
            _super.call(this, id, "jsBlock", "jsBlock");
            this.configDigitalInputsCount = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Integer, "digitalInputsCount", "Počet <b>din</b>", 1, { range: true, min: 0, max: 10 });
            this.configAnalogInputsCount = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Integer, "analogInputsCount", "Počet <b>ain</b>", 1, { range: true, min: 0, max: 10 });
            this.configDigitalOutputsCount = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Integer, "digitalOutputsCount", "Počet <b>dout</b>", 1, { range: true, min: 0, max: 10 });
            this.configAnalogOutputsCount = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Integer, "analogOutputsCount", "Počet <b>aout</b>", 1, { range: true, min: 0, max: 10 });
            this.configJs = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.JSString, "configJs", "JavaScript", "block.displayName = \"JS\";\nblock.backgroundColor = \"orange\";\n\nblock.inputsChanged = function () {\n\tblock.dout1(block.din1());\n\tblock.aout1(block.ain1());\n};");
            this.configsChanged();
        }
        JSBlock.prototype.inputsChanged = function () {
            if (this.jsEngine && this.jsEngine.inputsChanged && typeof this.jsEngine.inputsChanged == "function") {
                try {
                    this.jsEngine.inputsChanged();
                }
                catch (error) {
                    console.error(error);
                    alert("JavaScript error in inputsChanged of block " + this.id + " (name:" + this.rendererGetDisplayName() + ") error: " + error);
                }
            }
        };
        JSBlock.prototype.configsChanged = function () {
            var _this = this;
            var digitalInputsCount = this.configDigitalInputsCount.value;
            var wantedDigitalInputNames = [];
            for (var i = 0; i < digitalInputsCount; i++) {
                wantedDigitalInputNames.push("din" + (i + 1));
            }
            var digitalOutputsCount = this.configDigitalOutputsCount.value;
            var wantedDigitalOutputNames = [];
            for (var i = 0; i < digitalOutputsCount; i++) {
                wantedDigitalOutputNames.push("dout" + (i + 1));
            }
            var analogInputsCount = this.configAnalogInputsCount.value;
            var wantedAnalogInputNames = [];
            for (var i = 0; i < analogInputsCount; i++) {
                wantedAnalogInputNames.push("ain" + (i + 1));
            }
            var analogOutputsCount = this.configAnalogOutputsCount.value;
            var wantedAnalogOutputNames = [];
            for (var i = 0; i < analogOutputsCount; i++) {
                wantedAnalogOutputNames.push("aout" + (i + 1));
            }
            var inputConnectors = this.getInputConnectors();
            var outputConnectors = this.getOutputConnectors();
            var inputsToDelete = [];
            var outputsToDelete = [];
            inputConnectors.forEach(function (connector) {
                inputsToDelete.push(connector.name);
            });
            outputConnectors.forEach(function (connector) {
                outputsToDelete.push(connector.name);
            });
            wantedDigitalInputNames.forEach(function (name) {
                var connector = _this.getInputConnectorByName(name);
                if (!connector) {
                    _this.addInputConnector(name, BlockoCore_1.BlockoCore.ConnectorType.DigitalInput);
                }
                var i = inputsToDelete.indexOf(name);
                if (i > -1) {
                    inputsToDelete.splice(i, 1);
                }
            });
            wantedAnalogInputNames.forEach(function (name) {
                var connector = _this.getInputConnectorByName(name);
                if (!connector) {
                    _this.addInputConnector(name, BlockoCore_1.BlockoCore.ConnectorType.AnalogInput);
                }
                var i = inputsToDelete.indexOf(name);
                if (i > -1) {
                    inputsToDelete.splice(i, 1);
                }
            });
            inputsToDelete.forEach(function (name) {
                var connector = _this.getInputConnectorByName(name);
                _this.removeInputConnector(connector);
            });
            wantedDigitalOutputNames.forEach(function (name) {
                var connector = _this.getOutputConnectorByName(name);
                if (!connector) {
                    _this.addOutputConnector(name, BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
                }
                var i = outputsToDelete.indexOf(name);
                if (i > -1) {
                    outputsToDelete.splice(i, 1);
                }
            });
            wantedAnalogOutputNames.forEach(function (name) {
                var connector = _this.getOutputConnectorByName(name);
                if (!connector) {
                    _this.addOutputConnector(name, BlockoCore_1.BlockoCore.ConnectorType.AnalogOutput);
                }
                var i = outputsToDelete.indexOf(name);
                if (i > -1) {
                    outputsToDelete.splice(i, 1);
                }
            });
            outputsToDelete.forEach(function (name) {
                var connector = _this.getOutputConnectorByName(name);
                _this.removeOutputConnector(connector);
            });
            var connectorSortFunction = function (ca, cb) {
                if (ca.isAnalog() && !cb.isAnalog()) {
                    return 1;
                }
                if (!ca.isAnalog() && cb.isAnalog()) {
                    return -1;
                }
                return ca.name.localeCompare(cb.name);
            };
            inputConnectors.sort(connectorSortFunction);
            outputConnectors.sort(connectorSortFunction);
            var jsEngineFucntions = {
                getInputValue: function (inputName) {
                    var connector = _this.getInputConnectorByName(inputName);
                    if (connector) {
                        return connector.value;
                    }
                    return 0;
                },
                setOutputValue: function (outputName, value) {
                    var connector = _this.getOutputConnectorByName(outputName);
                    if (connector) {
                        _this.sendValueToOutputConnector(connector, value);
                    }
                }
            };
            inputConnectors.forEach(function (connector) {
                var name = connector.name;
                jsEngineFucntions[name] = function () {
                    var connector = _this.getInputConnectorByName(name);
                    if (connector) {
                        return connector.value;
                    }
                    return 0;
                };
            });
            outputConnectors.forEach(function (connector) {
                var name = connector.name;
                jsEngineFucntions[name] = function (value) {
                    var connector = _this.getOutputConnectorByName(name);
                    if (connector) {
                        _this.sendValueToOutputConnector(connector, value);
                    }
                };
            });
            try {
                var jsEngineStr = "'use strict'; var window, document, location, self, name, history, parent, screen, jQuery, $, Snap; var block = _block_model_ || {}; (function() { " + this.configJs.value + "; })(); return block;";
                var jsEngineFunction = new Function("_block_model_", jsEngineStr);
                this.jsEngine = jsEngineFunction(jsEngineFucntions);
            }
            catch (error) {
                alert("JavaScript code cannot load with error: " + error);
            }
            this.inputsChanged();
            if (this.renderer)
                this.renderer.refresh();
        };
        JSBlock.prototype.rendererGetDisplayName = function () {
            if (this.jsEngine && this.jsEngine.displayName) {
                if (typeof this.jsEngine.displayName == "string") {
                    return this.jsEngine.displayName;
                }
                else if (typeof this.jsEngine.displayName == "function") {
                    return this.jsEngine.displayName();
                }
            }
            return "JS";
        };
        JSBlock.prototype.rendererGetBlockBackgroundColor = function () {
            if (this.jsEngine && this.jsEngine.backgroundColor) {
                if (typeof this.jsEngine.backgroundColor == "string") {
                    return this.jsEngine.backgroundColor;
                }
                else if (typeof this.jsEngine.backgroundColor == "function") {
                    return this.jsEngine.backgroundColor();
                }
            }
            return "#cfc";
        };
        return JSBlock;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.JSBlock = JSBlock;
    var AnalogInput = (function (_super) {
        __extends(AnalogInput, _super);
        function AnalogInput(id) {
            _super.call(this, id, "analogInput", "analogInput");
            this.value = 0;
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.AnalogOutput);
            this.hwId = id;
            this.configHwId = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.String, "hwId", "HW ID", id);
        }
        AnalogInput.prototype.setAnalogValue = function (value) {
            this.value = value;
            this.sendValueToOutputConnector(this.connectorOutput, value);
        };
        AnalogInput.prototype.inputsChanged = function () {
        };
        AnalogInput.prototype.configsChanged = function () {
            this.hwId = this.configHwId.value;
        };
        AnalogInput.prototype.rendererGetBlockBackgroundColor = function () {
            return "#CCFFCC";
        };
        AnalogInput.prototype.rendererGetDisplayName = function () {
            return "0";
        };
        return AnalogInput;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.AnalogInput = AnalogInput;
    var AnalogOutput = (function (_super) {
        __extends(AnalogOutput, _super);
        function AnalogOutput(id) {
            _super.call(this, id, "analogOutput", "analogOutput");
            this.value = 0;
            this.connectorInput = this.addInputConnector("input", BlockoCore_1.BlockoCore.ConnectorType.AnalogInput);
            this.hwId = id;
            this.configHwId = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.String, "hwId", "HW ID", id);
        }
        AnalogOutput.prototype.registerAnalogValueChangeCallback = function (callback) {
            this.analogValueChangeCallback = callback;
        };
        AnalogOutput.prototype.inputsChanged = function () {
            this.value = this.connectorInput.value;
            if (this.analogValueChangeCallback) {
                this.analogValueChangeCallback(this, this.value);
            }
        };
        AnalogOutput.prototype.configsChanged = function () {
            this.hwId = this.configHwId.value;
        };
        AnalogOutput.prototype.rendererGetBlockBackgroundColor = function () {
            return "#CCFFCC";
        };
        AnalogOutput.prototype.rendererGetDisplayName = function () {
            return this.value.toFixed(1);
        };
        return AnalogOutput;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.AnalogOutput = AnalogOutput;
    var AnalogRange = (function (_super) {
        __extends(AnalogRange, _super);
        function AnalogRange(id) {
            _super.call(this, id, "analogRange", "analogRange");
            this.connectorInput = this.addInputConnector("input", BlockoCore_1.BlockoCore.ConnectorType.AnalogInput);
            this.connectorOutput = this.addOutputConnector("output", BlockoCore_1.BlockoCore.ConnectorType.DigitalOutput);
            this.configMin = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Float, "min", "Min", 0.5);
            this.configMax = this.addConfigProperty(BlockoCore_1.BlockoCore.ConfigPropertyType.Float, "max", "Max", 1.5);
        }
        AnalogRange.prototype.configsChanged = function () {
            this.inputsChanged();
        };
        AnalogRange.prototype.inputsChanged = function () {
            if (this.configMin.value <= this.connectorInput.value && this.connectorInput.value <= this.configMax.value) {
                this.sendValueToOutputConnector(this.connectorOutput, 1);
            }
            else {
                this.sendValueToOutputConnector(this.connectorOutput, 0);
            }
        };
        AnalogRange.prototype.rendererGetBlockBackgroundColor = function () {
            return "#90a4ae";
        };
        AnalogRange.prototype.rendererGetDisplayName = function () {
            return "[MI]\uE259";
        };
        return AnalogRange;
    })(BlockoCore_1.BlockoCore.Block);
    BlockoBasicBlocks.AnalogRange = AnalogRange;
})(BlockoBasicBlocks = exports.BlockoBasicBlocks || (exports.BlockoBasicBlocks = {}));
