var BlockoCore;
(function (BlockoCore) {
    var BlockRegistration = (function () {
        function BlockRegistration(blockClass, type, visualType, displayName) {
            this.blockClass = blockClass;
            this.type = type;
            this.visualType = visualType;
            this.displayName = displayName;
        }
        return BlockRegistration;
    })();
    BlockoCore.BlockRegistration = BlockRegistration;
    var Controller = (function () {
        function Controller() {
            this.blockIndex = 0;
            this.factoryBlockRendererCallback = null;
            this.factoryConnectionRendererCallback = null;
            this.digitalValueChangeCallback = null;
            this.analogValueChangeCallback = null;
            this.blocks = [];
            this.connections = [];
            this.blocksRegister = [];
        }
        Controller.getInstance = function () {
            return Controller._instance;
        };
        Controller.prototype.registerBlocks = function (blocksClass) {
            var _this = this;
            blocksClass.forEach(function (bc) {
                _this.registerBlock(bc);
            });
        };
        Controller.prototype.registerBlock = function (blockClass) {
            var b = new blockClass("register");
            var blockRegistration = new BlockRegistration(blockClass, b.type, b.visualType, b.rendererGetDisplayName());
            this.blocksRegister.push(blockRegistration);
        };
        Controller.prototype.getBlockClassByVisutalType = function (visualType) {
            var blockClass = null;
            this.blocksRegister.forEach(function (blockRegistration) {
                if (blockRegistration.visualType == visualType) {
                    blockClass = blockRegistration.blockClass;
                }
            });
            return blockClass;
        };
        Controller.prototype.addBlock = function (block) {
            var _this = this;
            if (typeof block["registerDigitalValueChangeCallback"] == "function") {
                var blockDo = block;
                blockDo.registerDigitalValueChangeCallback(function (block, value) { return _this.blockDigitalValueChangeCallback(block, value); });
            }
            if (typeof block["registerAnalogValueChangeCallback"] == "function") {
                var blockAo = block;
                blockAo.registerAnalogValueChangeCallback(function (block, value) { return _this.blockAnalogValueChangeCallback(block, value); });
            }
            if (this.factoryBlockRendererCallback) {
                block.renderer = this.factoryBlockRendererCallback(block);
            }
            block.inputsChanged();
            this.blocks.push(block);
        };
        Controller.prototype._addConnection = function (connection) {
            if (this.factoryConnectionRendererCallback) {
                connection.renderer = this.factoryConnectionRendererCallback(connection);
            }
            this.connections.push(connection);
        };
        Controller.prototype._removeConnection = function (connection) {
            var index = this.connections.indexOf(connection);
            if (index > -1) {
                this.connections.splice(index, 1);
            }
        };
        Controller.prototype._removeBlock = function (block) {
            var index = this.blocks.indexOf(block);
            if (index > -1) {
                this.blocks.splice(index, 1);
            }
        };
        Controller.prototype.removeAllBlocks = function () {
            var toDelete = this.blocks.slice(0);
            toDelete.forEach(function (block) {
                block.remove();
            });
            this.blockIndex = 0;
        };
        Controller.prototype.getBlockById = function (id) {
            var block = null;
            this.blocks.forEach(function (b) {
                if (b.id == id) {
                    block = b;
                }
            });
            return block;
        };
        Controller.prototype.getFreeBlockId = function () {
            var id = "";
            do {
                this.blockIndex++;
                id = "b" + this.blockIndex;
            } while (this.getBlockById(id) != null);
            return id;
        };
        Controller.prototype.registerFactoryBlockRendererCallback = function (callback) {
            this.factoryBlockRendererCallback = callback;
        };
        Controller.prototype.registerFactoryConnectionRendererCallback = function (callback) {
            this.factoryConnectionRendererCallback = callback;
        };
        Controller.prototype.registerDigitalValueChangeCallback = function (callback) {
            this.digitalValueChangeCallback = callback;
        };
        Controller.prototype.registerAnalogValueChangeCallback = function (callback) {
            this.analogValueChangeCallback = callback;
        };
        Controller.prototype.blockDigitalValueChangeCallback = function (block, value) {
            if (this.digitalValueChangeCallback) {
                this.digitalValueChangeCallback(block.hwId, value);
            }
        };
        Controller.prototype.blockAnalogValueChangeCallback = function (block, value) {
            if (this.analogValueChangeCallback) {
                this.analogValueChangeCallback(block.hwId, value);
            }
        };
        Controller.prototype.setDigitalValue = function (hwId, value) {
            this.blocks.forEach(function (block) {
                if (block.hwId == hwId) {
                    if (typeof block["setDigitalValue"] == "function") {
                        var di = block;
                        di.setDigitalValue(value);
                    }
                }
            });
        };
        Controller.prototype.setAnalogValue = function (hwId, value) {
            this.blocks.forEach(function (block) {
                if (block.hwId == hwId) {
                    if (typeof block["setAnalogValue"] == "function") {
                        var di = block;
                        di.setAnalogValue(value);
                    }
                }
            });
        };
        Controller.prototype.getDigitalInputHwIds = function () {
            var ret = [];
            this.blocks.forEach(function (block) {
                if (block.hwId) {
                    if (typeof block["setDigitalValue"] == "function") {
                        ret.push(block.hwId);
                    }
                }
            });
            return ret;
        };
        Controller.prototype.getAnalogInputHwIds = function () {
            var ret = [];
            this.blocks.forEach(function (block) {
                if (block.hwId) {
                    if (typeof block["setAnalogValue"] == "function") {
                        ret.push(block.hwId);
                    }
                }
            });
            return ret;
        };
        Controller.prototype.getDataJson = function () {
            var json = {};
            json["blocks"] = {};
            this.blocks.forEach(function (block) {
                var blockJson = {};
                blockJson["type"] = block.type;
                blockJson["visualType"] = block.visualType;
                blockJson["hwId"] = block.hwId;
                blockJson["config"] = block.getConfigData();
                blockJson["editor"] = {};
                blockJson["editor"]["x"] = block.x;
                blockJson["editor"]["y"] = block.y;
                blockJson["outputs"] = {};
                var outputs = block.getOutputConnectors();
                outputs.forEach(function (connector) {
                    var connectionsJson = [];
                    connector.connections.forEach(function (connection) {
                        var otherConnector = connection.getOtherConnector(connector);
                        connectionsJson.push({
                            "block": otherConnector.block.id,
                            "connector": otherConnector.name
                        });
                    });
                    blockJson["outputs"][connector.name] = connectionsJson;
                });
                json["blocks"][block.id] = blockJson;
            });
            return JSON.stringify(json);
        };
        Controller.prototype.setDataJson = function (jsonString) {
            var _this = this;
            try {
                var json = JSON.parse(jsonString);
                if (json && json["blocks"]) {
                    this.removeAllBlocks();
                    var blocks = json["blocks"];
                    for (var id in blocks) {
                        if (blocks.hasOwnProperty(id)) {
                            var block = blocks[id];
                            var bc = this.getBlockClassByVisutalType(block["visualType"]);
                            var blockObj = new bc(id);
                            blockObj.hwId = block["hwId"];
                            blockObj.setConfigData(block["config"]);
                            blockObj.x = block["editor"]["x"];
                            blockObj.y = block["editor"]["y"];
                            this.addBlock(blockObj);
                        }
                    }
                    for (var id in blocks) {
                        if (blocks.hasOwnProperty(id)) {
                            var block = blocks[id];
                            var b1 = this.getBlockById(id);
                            var outputs = block["outputs"];
                            for (var outputName in outputs) {
                                if (outputs.hasOwnProperty(outputName)) {
                                    var connections = outputs[outputName];
                                    connections.forEach(function (connParams) {
                                        var b2name = connParams["block"];
                                        var inputName = connParams["connector"];
                                        var c1 = b1.getOutputConnectorByName(outputName);
                                        var b2 = _this.getBlockById(b2name);
                                        var c2 = b2.getInputConnectorByName(inputName);
                                        c1.connect(c2);
                                    });
                                }
                            }
                        }
                    }
                }
            }
            catch (error) {
                this.removeAllBlocks();
                return "ERROR: " + error;
            }
            return "OK";
        };
        Controller._instance = new Controller();
        return Controller;
    })();
    BlockoCore.Controller = Controller;
    (function (ConnectorType) {
        ConnectorType[ConnectorType["DigitalOutput"] = 0] = "DigitalOutput";
        ConnectorType[ConnectorType["DigitalInput"] = 1] = "DigitalInput";
        ConnectorType[ConnectorType["DigitalInputOr"] = 2] = "DigitalInputOr";
        ConnectorType[ConnectorType["DigitalInputAnd"] = 3] = "DigitalInputAnd";
        ConnectorType[ConnectorType["DigitalInputXor"] = 4] = "DigitalInputXor";
        ConnectorType[ConnectorType["AnalogInput"] = 5] = "AnalogInput";
        ConnectorType[ConnectorType["AnalogOutput"] = 6] = "AnalogOutput";
    })(BlockoCore.ConnectorType || (BlockoCore.ConnectorType = {}));
    var ConnectorType = BlockoCore.ConnectorType;
    ;
    var Connector = (function () {
        function Connector(block, name, type) {
            this.value = 0;
            this.connections = new Array();
            this.block = block;
            this.name = name;
            this.type = type;
        }
        Connector.prototype.connect = function (target) {
            if (this.canConnect(target)) {
                var connection = new Connection(this, target);
                this.connections.push(connection);
                target.connections.push(connection);
                Controller.getInstance()._addConnection(connection);
                connection.getInputConnector()._inputSetValue(connection.getOutputConnector().value);
                return connection;
            }
            return null;
        };
        Connector.prototype._removeConnection = function (connection) {
            var index = this.connections.indexOf(connection);
            if (index > -1) {
                this.connections.splice(index, 1);
            }
        };
        Connector.prototype.canConnect = function (target) {
            if (this.block == target.block) {
                return false;
            }
            if (!this.haveFreeSpace() || !target.haveFreeSpace()) {
                return false;
            }
            if (this.isInput() && target.isInput()) {
                return false;
            }
            if (this.isOutput() && target.isOutput()) {
                return false;
            }
            if (this.isAnalog() != target.isAnalog()) {
                return false;
            }
            return true;
        };
        Connector.prototype.isOutput = function () {
            return (this.type == ConnectorType.DigitalOutput || this.type == ConnectorType.AnalogOutput);
        };
        Connector.prototype.isInput = function () {
            return (this.type == ConnectorType.DigitalInput) || (this.type == ConnectorType.DigitalInputAnd) || (this.type == ConnectorType.DigitalInputOr) || (this.type == ConnectorType.DigitalInputXor) || (this.type == ConnectorType.AnalogInput);
        };
        Connector.prototype.isAnalog = function () {
            return (this.type == ConnectorType.AnalogOutput) || (this.type == ConnectorType.AnalogInput);
        };
        Connector.prototype.haveFreeSpace = function () {
            if (this.type == ConnectorType.DigitalInput || this.type == ConnectorType.AnalogInput) {
                return (this.connections.length == 0);
            }
            return true;
        };
        Connector.prototype._outputSetValue = function (value) {
            var _this = this;
            if (this.type == ConnectorType.DigitalOutput || this.type == ConnectorType.AnalogOutput) {
                if (this.value == value)
                    return;
                this.value = value;
                this.connections.forEach(function (connection) {
                    var cOther = connection.getOtherConnector(_this);
                    cOther._inputSetValue(value);
                });
                this.block._outputsChanged();
                return;
            }
            console.log("Cannot call setValue on not-output connectors!");
        };
        Connector.prototype._inputSetValue = function (value) {
            var _this = this;
            if (this.type == ConnectorType.DigitalInput || this.type == ConnectorType.AnalogInput) {
                if (this.value == value)
                    return;
                this.value = value;
                this.block._inputsChanged();
                return;
            }
            else if (this.type == ConnectorType.DigitalInputOr) {
                var newValue = 0;
                this.connections.forEach(function (connection) {
                    if (connection.getOtherConnector(_this).value != 0) {
                        newValue = 1;
                    }
                });
                if (this.value == newValue)
                    return;
                this.value = newValue;
                this.block._inputsChanged();
                return;
            }
            else if (this.type == ConnectorType.DigitalInputAnd) {
                var newValue = this.connections.length ? 1 : 0;
                this.connections.forEach(function (connection) {
                    if (connection.getOtherConnector(_this).value == 0) {
                        newValue = 0;
                    }
                });
                if (this.value == newValue)
                    return;
                this.value = newValue;
                this.block._inputsChanged();
                return;
            }
            else if (this.type == ConnectorType.DigitalInputXor) {
                var trueValuesCount = 0;
                this.connections.forEach(function (connection) {
                    if (connection.getOtherConnector(_this).value != 0) {
                        trueValuesCount++;
                    }
                });
                var newValue = (trueValuesCount % 2 == 1) ? 1 : 0;
                if (this.value == newValue)
                    return;
                this.value = newValue;
                this.block._inputsChanged();
                return;
            }
            console.log("Cannot call _inputSetValue on not-inputs connectors!");
        };
        return Connector;
    })();
    BlockoCore.Connector = Connector;
    var Connection = (function () {
        function Connection(connectorA, connectorB) {
            this.connectorA = connectorA;
            this.connectorB = connectorB;
        }
        Connection.prototype.getOtherConnector = function (self) {
            if (this.connectorA == self) {
                return this.connectorB;
            }
            else {
                return this.connectorA;
            }
        };
        Connection.prototype.getInputConnector = function () {
            if (this.connectorA.isInput())
                return this.connectorA;
            return this.connectorB;
        };
        Connection.prototype.getOutputConnector = function () {
            if (this.connectorA.isOutput())
                return this.connectorA;
            return this.connectorB;
        };
        Connection.prototype.disconnect = function () {
            this.connectorA._removeConnection(this);
            this.connectorB._removeConnection(this);
            Controller.getInstance()._removeConnection(this);
            this.getInputConnector()._inputSetValue(0);
            if (this.renderer)
                this.renderer.destroy();
        };
        return Connection;
    })();
    BlockoCore.Connection = Connection;
    (function (ConfigPropertyType) {
        ConfigPropertyType[ConfigPropertyType["Integer"] = 0] = "Integer";
        ConfigPropertyType[ConfigPropertyType["Float"] = 1] = "Float";
        ConfigPropertyType[ConfigPropertyType["String"] = 2] = "String";
        ConfigPropertyType[ConfigPropertyType["Boolean"] = 3] = "Boolean";
        ConfigPropertyType[ConfigPropertyType["JSString"] = 4] = "JSString";
    })(BlockoCore.ConfigPropertyType || (BlockoCore.ConfigPropertyType = {}));
    var ConfigPropertyType = BlockoCore.ConfigPropertyType;
    ;
    var ConfigProperty = (function () {
        function ConfigProperty(type, id, displayName, defaultValue, config) {
            this.type = type;
            this.id = id;
            this.displayName = displayName;
            this.config = config || {};
            this.value = defaultValue;
        }
        return ConfigProperty;
    })();
    BlockoCore.ConfigProperty = ConfigProperty;
    var Block = (function () {
        function Block(id, type, visualType) {
            this.x = 0;
            this.y = 0;
            this.id = id;
            this.type = type;
            this.visualType = visualType;
            this.inputConnectors = new Array();
            this.outputConnectors = new Array();
            this.configProperties = new Array();
        }
        Block.prototype.sendValueToOutputConnector = function (connector, value) {
            if (this.outputConnectors.indexOf(connector) != -1) {
                connector._outputSetValue(value);
            }
            else {
                console.log("Connector named " + connector.name + " is not output connector on block " + this.id);
            }
        };
        Block.prototype.addOutputConnector = function (name, type) {
            if (type == ConnectorType.DigitalOutput || type == ConnectorType.AnalogOutput) {
                var connector = new Connector(this, name, type);
                this.outputConnectors.push(connector);
                return connector;
            }
            console.log("Cannot add connector with type " + type + " as output connector.");
            return null;
        };
        Block.prototype.addInputConnector = function (name, type) {
            if (type == ConnectorType.DigitalInput || type == ConnectorType.DigitalInputAnd || type == ConnectorType.DigitalInputOr || type == ConnectorType.DigitalInputXor || type == ConnectorType.AnalogInput) {
                var connector = new Connector(this, name, type);
                this.inputConnectors.push(connector);
                return connector;
            }
            console.log("Cannot add connector with type " + type + " as input connector.");
            return null;
        };
        Block.prototype.removeOutputConnector = function (connector) {
            if (!connector)
                return;
            this.disconnectConnectionFromConnector(connector);
            var index = this.outputConnectors.indexOf(connector);
            if (index > -1) {
                this.outputConnectors.splice(index, 1);
            }
        };
        Block.prototype.removeInputConnector = function (connector) {
            if (!connector)
                return;
            this.disconnectConnectionFromConnector(connector);
            var index = this.inputConnectors.indexOf(connector);
            if (index > -1) {
                this.inputConnectors.splice(index, 1);
            }
        };
        Block.prototype.addConfigProperty = function (type, id, displayName, defaultValue, config) {
            var configProperty = new ConfigProperty(type, id, displayName, defaultValue, config);
            this.configProperties.push(configProperty);
            return configProperty;
        };
        Block.prototype.getInputConnectors = function () {
            return this.inputConnectors;
        };
        Block.prototype.getOutputConnectors = function () {
            return this.outputConnectors;
        };
        Block.prototype.getConfigProperties = function () {
            return this.configProperties;
        };
        Block.prototype._outputsChanged = function () {
            if (this.renderer)
                this.renderer.refresh();
        };
        Block.prototype._inputsChanged = function () {
            this.inputsChanged();
            if (this.renderer)
                this.renderer.refresh();
        };
        Block.prototype.emitConfigsChanged = function () {
            this.configsChanged();
        };
        Block.prototype.getConfigData = function () {
            var config = {};
            this.configProperties.forEach(function (configProperty) {
                config[configProperty.id] = configProperty.value;
            });
            return config;
        };
        Block.prototype.getConfigPropertyById = function (id) {
            var cp = null;
            this.configProperties.forEach(function (configProperty) {
                if (configProperty.id == id) {
                    cp = configProperty;
                }
            });
            return cp;
        };
        Block.prototype.setConfigData = function (json) {
            for (var key in json) {
                if (json.hasOwnProperty(key)) {
                    var cp = this.getConfigPropertyById(key);
                    cp.value = json[key];
                }
            }
            this.emitConfigsChanged();
        };
        Block.prototype.disconnectConnectionFromConnector = function (connector) {
            var toDisconnect = connector.connections.splice(0);
            toDisconnect.forEach(function (connection) {
                connection.disconnect();
            });
        };
        Block.prototype.remove = function () {
            var _this = this;
            this.inputConnectors.forEach(function (connector) {
                _this.disconnectConnectionFromConnector(connector);
            });
            this.outputConnectors.forEach(function (connector) {
                _this.disconnectConnectionFromConnector(connector);
            });
            if (this.renderer)
                this.renderer.destroy();
            Controller.getInstance()._removeBlock(this);
        };
        Block.prototype.getOutputConnectorByName = function (name) {
            var connector = null;
            this.outputConnectors.forEach(function (c) {
                if (c.name == name) {
                    connector = c;
                }
            });
            return connector;
        };
        Block.prototype.getInputConnectorByName = function (name) {
            var connector = null;
            this.inputConnectors.forEach(function (c) {
                if (c.name == name) {
                    connector = c;
                }
            });
            return connector;
        };
        Block.prototype.inputsChanged = function () {
            console.log("Method inputsChanged is not overrided in block " + this.type);
        };
        Block.prototype.configsChanged = function () {
        };
        Block.prototype.rendererGetBlockBackgroundColor = function () {
            return "#ccc";
        };
        Block.prototype.rendererGetDisplayName = function () {
            return this.visualType;
        };
        return Block;
    })();
    BlockoCore.Block = Block;
})(BlockoCore = exports.BlockoCore || (exports.BlockoCore = {}));
