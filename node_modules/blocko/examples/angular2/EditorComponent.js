/// <reference path="./typings/tsd.d.ts" />
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var index_1 = require("./jsLib/index");
var index_2 = require("./jsLib/index");
var index_3 = require("./jsLib/index");
var EditorComponent = (function () {
    function EditorComponent() {
        var _this = this;
        this.jsonTextarea = "";
        this.currentBlock = null;
        this.controller = index_1.BlockoCore.Controller.getInstance();
        this.rendererController = new index_2.BlockoSnapRenderer.RendererController(document.getElementById("editorWorkspace"));
        this.rendererController.registerOpenConfigCallback(function (block) {
            _this.openBlockConfig(block);
        });
        this.controller.registerFactoryBlockRendererCallback(function (block) {
            var blockRenderer = new index_2.BlockoSnapRenderer.BlockRenderer(_this.rendererController, block);
            return blockRenderer;
        });
        this.controller.registerFactoryConnectionRendererCallback(function (connection) {
            var connectionRenderer = new index_2.BlockoSnapRenderer.ConnectionRenderer(_this.rendererController, connection);
            return connectionRenderer;
        });
        this.controller.registerDigitalValueChangeCallback(function (hwId, value) {
            console.log("HWID: " + hwId + " new digital value: " + value);
        });
        this.controller.registerAnalogValueChangeCallback(function (hwId, value) {
            console.log("HWID: " + hwId + " new analog value: " + value);
        });
        this.controller.registerBlocks(index_3.BlockoBasicBlocks.Manager.getAllBlocks());
        window["controller"] = this.controller;
    }
    EditorComponent.prototype.addBlock = function (visualType) {
        var bc = this.controller.getBlockClassByVisutalType(visualType);
        if (!bc)
            return;
        var id = this.controller.getFreeBlockId();
        var b = new bc(id);
        b.x = 20;
        b.y = 20;
        this.controller.addBlock(b);
    };
    EditorComponent.prototype.clearWorkspace = function () {
        this.controller.removeAllBlocks();
    };
    EditorComponent.prototype.btnSource = function () {
        this.jsonTextarea = this.controller.getDataJson();
        $('#sourceModal').openModal();
    };
    EditorComponent.prototype.btnSourceClose = function () {
        $('#sourceModal').closeModal();
    };
    EditorComponent.prototype.btnSourceLoadAndClose = function () {
        this.controller.setDataJson(this.jsonTextarea);
        $('#sourceModal').closeModal();
    };
    EditorComponent.prototype.openBlockConfig = function (block) {
        this.currentBlock = block;
        $("#configModal-title").html("Config for block <b>" + this.currentBlock.id + "</b>");
        var configProperties = this.currentBlock.getConfigProperties();
        $("#configModal-configWrapper").html("");
        configProperties.forEach(function (configProperty) {
            var propId = "configModal-property-" + configProperty.id;
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.Integer) {
                var row = $("<div class=\"row\"></div>");
                row.append("<div class=\"col s3 displayName\">" + configProperty.displayName + ":</div>");
                if (configProperty.config.range) {
                    row.append("<div class=\"col s1 displayValue\" id=\"" + propId + "_value\">" + configProperty.value + "</div><div class=\"input-field col s4\"><input value=\"" + configProperty.value + "\" id=\"" + propId + "\" type=\"range\" min=\"" + (configProperty.config.min || 0) + "\" max=\"" + (configProperty.config.max || 100) + "\" oninput=\"document.getElementById('" + propId + "_value').innerText = this.value\" onchange=\"document.getElementById('" + propId + "_value').innerText = this.value\"></div>");
                }
                else {
                    row.append("<div class=\"input-field col s4\"><input value=\"" + configProperty.value + "\" id=\"" + propId + "\" type=\"number\"></div>");
                }
                row.append("<div class=\"col s3 displayUnit\">" + (configProperty.config.displayUnit || "") + "</div>");
                $("#configModal-configWrapper").append(row);
            }
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.Float) {
                var row = $("<div class=\"row\"></div>");
                row.append("<div class=\"col s3 displayName\">" + configProperty.displayName + ":</div>");
                row.append("<div class=\"input-field col s4\"><input value=\"" + configProperty.value + "\" id=\"" + propId + "\" type=\"number\" step=\"0.01\"></div>");
                row.append("<div class=\"col s3 displayUnit\">" + (configProperty.config.displayUnit || "") + "</div>");
                $("#configModal-configWrapper").append(row);
            }
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.String) {
                var row = $("<div class=\"row\"></div>");
                row.append("<div class=\"col s3 displayName\">" + configProperty.displayName + ":</div>");
                row.append("<div class=\"input-field col s4\"><input value=\"" + configProperty.value + "\" id=\"" + propId + "\" type=\"text\"></div>");
                row.append("<div class=\"col s3 displayUnit\">" + (configProperty.config.displayUnit || "") + "</div>");
                $("#configModal-configWrapper").append(row);
            }
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.Boolean) {
                var row = $("<div class=\"row\"></div>");
                row.append("<div class=\"col s3 displayName\">" + configProperty.displayName + ":</div>");
                row.append("<div class=\"col s4\"><div class=\"switch\"><label>No<input type=\"checkbox\" " + (configProperty.value ? "checked=\"checked\"" : "") + " id=\"" + propId + "\"><span class=\"lever\"></span>Yes</label></div></div>");
                row.append("<div class=\"col s3 displayUnit\">" + (configProperty.config.displayUnit || "") + "</div>");
                $("#configModal-configWrapper").append(row);
            }
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.JSString) {
                var row = $("<div class=\"row\"></div>");
                row.append("<div class=\"col s3 displayName\">" + configProperty.displayName + ":</div>");
                row.append("<div class=\"input-field col s9\"><div class=\"jsEditor\" id=\"" + propId + "\">" + configProperty.value + "</div></div>");
                $("#configModal-configWrapper").append(row);
                var editor = ace.edit(propId);
                editor.setTheme("ace/theme/kuroir");
                editor.getSession().setMode("ace/mode/javascript");
                editor.setOptions({
                    enableBasicAutocompletion: true,
                    enableSnippets: true,
                    enableLiveAutocompletion: false
                });
            }
        });
        $('#configModal').openModal();
    };
    EditorComponent.prototype.cancelBlockConfig = function () {
        $('#configModal').closeModal();
    };
    EditorComponent.prototype.saveBlockConfig = function () {
        var configProperties = this.currentBlock.getConfigProperties();
        configProperties.forEach(function (configProperty) {
            var propId = "configModal-property-" + configProperty.id;
            var value = null;
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.Integer) {
                value = $("#" + propId).val();
                configProperty.value = parseInt(value, 10);
            }
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.Float) {
                value = $("#" + propId).val();
                configProperty.value = parseFloat(value);
            }
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.String) {
                value = $("#" + propId).val();
                configProperty.value = value;
            }
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.Boolean) {
                configProperty.value = $("#" + propId).prop('checked');
            }
            if (configProperty.type == index_1.BlockoCore.ConfigPropertyType.JSString) {
                var editor = ace.edit(propId);
                configProperty.value = editor.getValue();
            }
        });
        this.currentBlock.emitConfigsChanged();
        $('#configModal').closeModal();
    };
    EditorComponent = __decorate([
        angular2_1.Component({
            selector: 'editor'
        }),
        angular2_1.View({
            templateUrl: './editor.html',
            directives: [angular2_1.NgFor]
        }), 
        __metadata('design:paramtypes', [])
    ], EditorComponent);
    return EditorComponent;
})();
angular2_1.bootstrap(EditorComponent);
