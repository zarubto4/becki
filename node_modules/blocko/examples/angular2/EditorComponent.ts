/// <reference path="./typings/tsd.d.ts" />

import {Component, View, bootstrap, NgFor} from 'angular2/angular2';

import {BlockoCore} from "./jsLib/index";
import {BlockoSnapRenderer} from "./jsLib/index";
import {BlockoBasicBlocks} from "./jsLib/index";

declare class ace {
	static edit(id:string);
}

// Annotation section
@Component({
  selector: 'editor'
})
@View({
  templateUrl: './editor.html',
  directives: [NgFor]
})
// Component controller
class EditorComponent {
	
	public jsonTextarea: string = "";

	// GUI
	private rendererController: BlockoSnapRenderer.RendererController;
	
	// Model
	private controller: BlockoCore.Controller;
	
	public constructor() {

		this.controller = BlockoCore.Controller.getInstance();
		this.rendererController = new BlockoSnapRenderer.RendererController(document.getElementById("editorWorkspace"));

		this.rendererController.registerOpenConfigCallback((block:BlockoCore.Block) => {
			this.openBlockConfig(block);
		});
		
		this.controller.registerFactoryBlockRendererCallback((block: BlockoCore.Block) => {
			var blockRenderer: BlockoSnapRenderer.BlockRenderer = new BlockoSnapRenderer.BlockRenderer(this.rendererController, block);
			return blockRenderer;
		});
		
		this.controller.registerFactoryConnectionRendererCallback((connection: BlockoCore.Connection) => {
			var connectionRenderer: BlockoSnapRenderer.ConnectionRenderer = new BlockoSnapRenderer.ConnectionRenderer(this.rendererController, connection);
			return connectionRenderer;
		});
		
		this.controller.registerDigitalValueChangeCallback((hwId: string, value: boolean) => {
			console.log("HWID: "+hwId+" new digital value: "+value);
		});
		
		this.controller.registerAnalogValueChangeCallback((hwId: string, value: number) => {
			console.log("HWID: "+hwId+" new analog value: "+value);
		});
		
		// Register blocks:

		this.controller.registerBlocks(BlockoBasicBlocks.Manager.getAllBlocks());

		window["controller"] = this.controller;
		
	}
	
	public addBlock(visualType: string) {
		
		var bc:BlockoCore.BlockClass = this.controller.getBlockClassByVisutalType(visualType);
		if (!bc) return;
		
		var id:string = this.controller.getFreeBlockId();
		var b:BlockoCore.Block = new bc(id);
		
		b.x = 20;
		b.y = 20;
		
		this.controller.addBlock(b);
		
	}
	
	public clearWorkspace() {
		this.controller.removeAllBlocks();
	}
	
	public btnSource() {
		this.jsonTextarea = this.controller.getDataJson();
		(<any>$('#sourceModal')).openModal();
	}
	
	public btnSourceClose() {
		(<any>$('#sourceModal')).closeModal();
	}
	
	public btnSourceLoadAndClose() {
		this.controller.setDataJson(this.jsonTextarea);
		(<any>$('#sourceModal')).closeModal();
	}
	
	private currentBlock: BlockoCore.Block = null;
	public openBlockConfig(block: BlockoCore.Block) {
		
		this.currentBlock = block;
		
		$("#configModal-title").html("Config for block <b>"+this.currentBlock.id+"</b>");
		
		var configProperties: Array<BlockoCore.ConfigProperty> = this.currentBlock.getConfigProperties();
		
		$("#configModal-configWrapper").html("");
		
		configProperties.forEach((configProperty:BlockoCore.ConfigProperty) => {
			
			var propId = "configModal-property-"+configProperty.id;
			
			if (configProperty.type == BlockoCore.ConfigPropertyType.Integer) {
				var row = $("<div class=\"row\"></div>");
				row.append("<div class=\"col s3 displayName\">"+configProperty.displayName+":</div>");
				if (configProperty.config.range) {
					row.append("<div class=\"col s1 displayValue\" id=\""+propId+"_value\">"+configProperty.value+"</div><div class=\"input-field col s4\"><input value=\""+configProperty.value+"\" id=\""+propId+"\" type=\"range\" min=\""+(configProperty.config.min || 0)+"\" max=\""+(configProperty.config.max || 100)+"\" oninput=\"document.getElementById('"+propId+"_value').innerText = this.value\" onchange=\"document.getElementById('"+propId+"_value').innerText = this.value\"></div>");
				} else {
					row.append("<div class=\"input-field col s4\"><input value=\""+configProperty.value+"\" id=\""+propId+"\" type=\"number\"></div>");
				}
				row.append("<div class=\"col s3 displayUnit\">"+(configProperty.config.displayUnit || "")+"</div>");
				$("#configModal-configWrapper").append(row);
			}
			if (configProperty.type == BlockoCore.ConfigPropertyType.Float) {
				var row = $("<div class=\"row\"></div>");
				row.append("<div class=\"col s3 displayName\">"+configProperty.displayName+":</div>");
				row.append("<div class=\"input-field col s4\"><input value=\""+configProperty.value+"\" id=\""+propId+"\" type=\"number\" step=\"0.01\"></div>");
				row.append("<div class=\"col s3 displayUnit\">"+(configProperty.config.displayUnit || "")+"</div>");
				$("#configModal-configWrapper").append(row);
			}
			if (configProperty.type == BlockoCore.ConfigPropertyType.String) {
				var row = $("<div class=\"row\"></div>");
				row.append("<div class=\"col s3 displayName\">"+configProperty.displayName+":</div>");
				row.append("<div class=\"input-field col s4\"><input value=\""+configProperty.value+"\" id=\""+propId+"\" type=\"text\"></div>");
				row.append("<div class=\"col s3 displayUnit\">"+(configProperty.config.displayUnit || "")+"</div>");
				$("#configModal-configWrapper").append(row);
			}
			if (configProperty.type == BlockoCore.ConfigPropertyType.Boolean) {
				var row = $("<div class=\"row\"></div>");
				row.append("<div class=\"col s3 displayName\">"+configProperty.displayName+":</div>");
				row.append("<div class=\"col s4\"><div class=\"switch\"><label>No<input type=\"checkbox\" "+(configProperty.value?"checked=\"checked\"":"")+" id=\""+propId+"\"><span class=\"lever\"></span>Yes</label></div></div>");
				row.append("<div class=\"col s3 displayUnit\">"+(configProperty.config.displayUnit || "")+"</div>");
				$("#configModal-configWrapper").append(row);
			}
			if (configProperty.type == BlockoCore.ConfigPropertyType.JSString) {
				var row = $("<div class=\"row\"></div>");
				row.append("<div class=\"col s3 displayName\">"+configProperty.displayName+":</div>");
				row.append("<div class=\"input-field col s9\"><div class=\"jsEditor\" id=\""+propId+"\">"+configProperty.value+"</div></div>");
				$("#configModal-configWrapper").append(row);
				var editor = ace.edit(propId);
				editor.setTheme("ace/theme/kuroir");
				editor.getSession().setMode("ace/mode/javascript");
				editor.setOptions({
					enableBasicAutocompletion: true,
					enableSnippets: true,
					enableLiveAutocompletion: false
				});
				
			}
			
		});


		(<any>$('#configModal')).openModal();
	}
	
	public cancelBlockConfig() {
		(<any>$('#configModal')).closeModal();
	}
	
	public saveBlockConfig() {
		
		var configProperties: Array<BlockoCore.ConfigProperty> = this.currentBlock.getConfigProperties();
		
		configProperties.forEach((configProperty:BlockoCore.ConfigProperty) => {
			
			var propId = "configModal-property-"+configProperty.id;
			var value = null;
			
			if (configProperty.type == BlockoCore.ConfigPropertyType.Integer) {
				value = $("#"+propId).val();
				configProperty.value = parseInt(value, 10);
			}
			if (configProperty.type == BlockoCore.ConfigPropertyType.Float) {
				value = $("#"+propId).val();
				configProperty.value = parseFloat(value);
			}
			if (configProperty.type == BlockoCore.ConfigPropertyType.String) {
				value = $("#"+propId).val();
				configProperty.value = value;
			}
			if (configProperty.type == BlockoCore.ConfigPropertyType.Boolean) {
				configProperty.value = $("#"+propId).prop('checked');
			}
			if (configProperty.type == BlockoCore.ConfigPropertyType.JSString) {
				var editor = ace.edit(propId);
				configProperty.value = editor.getValue();
			}
			
		});
		
		this.currentBlock.emitConfigsChanged();

		(<any>$('#configModal')).closeModal();
	}

}
// Register component
bootstrap(EditorComponent);