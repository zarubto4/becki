var vorpal = require('vorpal')();
var fs = require('fs');
var colors = require('colors');

var BlockoCore = require('./../../js/index').BlockoCore;
var BlockoBasicBlocks = require('./../../js/index').BlockoBasicBlocks;

var controller = BlockoCore.Controller.getInstance();

// begin of register blocks
controller.registerBlocks(BlockoBasicBlocks.Manager.getAllBlocks());
// end of register blocks

controller.registerAnalogValueChangeCallback(function (hwId, value) {
	vorpal.log(colors.green(hwId+" new analog value "+value));
});

controller.registerDigitalValueChangeCallback(function (hwId, value) {
	vorpal.log(colors.green(hwId+" new digital value "+value));
});

vorpal
	.delimiter('blocko-core$')
	.show();

vorpal
	.command('load <file>', 'Load app JSON to BlockoCore')
	.action(function(args, callback) {
		
		var fileName = args.file;
		
		vorpal.log("Opening file '"+fileName+"'");
		
		fs.readFile(fileName, 'utf8', function (err,data) {
			if (err) {
				vorpal.log(colors.red("ERROR: "+err.message));
				callback();
				return;
			}
			
			vorpal.log(colors.yellow(controller.setDataJson(data)));
			callback();
		});
	});

vorpal
	.command('d <hwId> <value>', 'Set value to digital inputs')
	.action(function(args, callback) {
		var value = parseInt(args.value);
		if (isNaN(value)) {
			if (args.value.toLowerCase() == "true" || args.value.toLowerCase() == "t" || args.value.toLowerCase() == "y" || args.value.toLowerCase() == "yes") {
				value = 1;
			} else {
				value = 0;
			}
		}
		
		controller.setDigitalValue(args.hwId, value?true:false);
		callback();
	});

vorpal
	.command('a <hwId> <value>', 'Set value to analog inputs')
	.action(function(args, callback) {
		controller.setAnalogValue(args.hwId, parseFloat(args.value));
		callback();
	});

vorpal
	.command('dlist', 'List all digital inputs')
	.action(function(args, callback) {
		var hwIds = controller.getDigitalInputHwIds();
		hwIds.forEach(function (hwId) {
			vorpal.log(colors.yellow(hwId));
		});
		if (hwIds.length == 0) {
			vorpal.log(colors.red("No digital inputs in current app"));
		}
		callback();
	});

vorpal
	.command('alist', 'List all analog inputs')
	.action(function(args, callback) {
		var hwIds = controller.getAnalogInputHwIds();
		hwIds.forEach(function (hwId) {
			vorpal.log(colors.yellow(hwId));
		});
		if (hwIds.length == 0) {
			vorpal.log(colors.red("No analog inputs in current app"));
		}
		callback();
	});