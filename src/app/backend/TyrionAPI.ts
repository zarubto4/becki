/**************************************************************/
/*                                                            */
/*   Generated Tyrion API backend file                        */
/*   Â© 2015-2016 Becki Authors.                               */
/*                                                            */
/*   Build date: 2018-05-15 22:21:28                          */
/*   Tyrion version: 2.1.9                                    */
/*                                                            */
/*   Generated by automated script from Swagger JSON.         */
/*   Script author: Byzance                                   */
/*                                                            */
/**************************************************************/

/* tslint:disable */

import { HomerAPI } from './HomerAPI';
/**
 * @name IActualizationProcedureTaskFilter
 * @description: Json Model for ActualizationProcedureTask Filter
 */
export interface IActualizationProcedureTaskFilter {
    /**
     * @name actualization_procedure_ids
     * @type string[]
     * @readonly
     */
    actualization_procedure_ids?: string[];
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name hardware_ids
     * @type string[]
     * @readonly
     */
    hardware_ids?: string[];
    /**
     * @name instance_ids
     * @type string[]
     * @readonly
     */
    instance_ids?: string[];
    /**
     * @name instance_snapshot_ids
     * @type string[]
     * @readonly
     */
    instance_snapshot_ids?: string[];
    /**
     * @name type_of_updates
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")[]
     * @readonly
     */
    type_of_updates?: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")[];
    /**
     * @name update_states
     * @type ("COMPLETE"|"CANCELED"|"BIN_FILE_MISSING"|"NOT_YET_STARTED"|"PROHIBITED_BY_CONFIG"|"IN_PROGRESS"|"OBSOLETE"|"NOT_UPDATED"|"WAITING_FOR_DEVICE"|"INSTANCE_INACCESSIBLE"|"HOMER_SERVER_IS_OFFLINE"|"HOMER_SERVER_NEVER_CONNECTED"|"CRITICAL_ERROR")[]
     * @readonly
     */
    update_states?: ("COMPLETE"|"CANCELED"|"BIN_FILE_MISSING"|"NOT_YET_STARTED"|"PROHIBITED_BY_CONFIG"|"IN_PROGRESS"|"OBSOLETE"|"NOT_UPDATED"|"WAITING_FOR_DEVICE"|"INSTANCE_INACCESSIBLE"|"HOMER_SERVER_IS_OFFLINE"|"HOMER_SERVER_NEVER_CONNECTED"|"CRITICAL_ERROR")[];
    /**
     * @name update_status
     * @type ("SUCCESSFULLY_COMPLETE"|"COMPLETE"|"COMPLETE_WITH_ERROR"|"CANCELED"|"IN_PROGRESS"|"NOT_START_YET")[]
     * @readonly
     */
    update_status?: ("SUCCESSFULLY_COMPLETE"|"COMPLETE"|"COMPLETE_WITH_ERROR"|"CANCELED"|"IN_PROGRESS"|"NOT_START_YET")[];
}


/**
 * @name IActualizationProcedureTaskList
 * @description: Interface IActualizationProcedureTaskList definition
 */
export interface IActualizationProcedureTaskList {
    /**
     * @name content
     * @type IHardwareUpdate[]
     * @readonly
     * @required
     */
    content: IHardwareUpdate[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IActualizationProcedureFilter
 * @description: Json Model for ActualizationProcedure Filter
 */
export interface IActualizationProcedureFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name project_id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name type_of_updates
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")[]
     * @readonly
     */
    type_of_updates?: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")[];
    /**
     * @name update_states
     * @type ("SUCCESSFULLY_COMPLETE"|"COMPLETE"|"COMPLETE_WITH_ERROR"|"CANCELED"|"IN_PROGRESS"|"NOT_START_YET")[]
     * @readonly
     */
    update_states?: ("SUCCESSFULLY_COMPLETE"|"COMPLETE"|"COMPLETE_WITH_ERROR"|"CANCELED"|"IN_PROGRESS"|"NOT_START_YET")[];
}


/**
 * @name IActualizationProcedureList
 * @description: Interface IActualizationProcedureList definition
 */
export interface IActualizationProcedureList {
    /**
     * @name content
     * @type IUpdateProcedure[]
     * @readonly
     * @required
     */
    content: IUpdateProcedure[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IActualizationProcedureMake
 * @description: Json Model for ActualizationProcedure Make Procedure
 */
export interface IActualizationProcedureMake {
    /**
     * @name firmware_type
     * @type string
     * @readonly
     * @required
     */
    firmware_type: string;
    /**
     * @name hardware_group_id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    hardware_group_id: string;
    /**
     * @name hardware_type_settings
     * @type IActualizationProcedureMakeHardwareType[]
     * @readonly
     * @required
     */
    hardware_type_settings: IActualizationProcedureMakeHardwareType[];
    /**
     * @name project_id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name time
     * @type number
     * @description If  value is null - its a command for immediately update 
     * @format int64
     * @readonly
     */
    time?: number;
    /**
     * @name timeoffset
     * @type number
     * @description If  value is null - its a command for immediately update - Default Value 0
     * @format int32
     * @readonly
     */
    timeoffset?: number;
}


/**
 * @name IActualizationProcedureMakeHardwareType
 * @description: Json Model for ActualizationProcedure Make Procedure - HardwareType
 */
export interface IActualizationProcedureMakeHardwareType {
    /**
     * @name bootloader_id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    bootloader_id: string;
    /**
     * @name c_program_version_id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name hardware_type_id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    hardware_type_id: string;
}


/**
 * @name IApplicableProduct
 * @description: Json Model for selecting Product for registration new project
 */
export interface IApplicableProduct {
    /**
     * @name id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name tariff
     * @type string
     * @readonly
     * @required
     */
    tariff: string;
}


/**
 * @name IArticle
 * @description: Model of Article
 */
export interface IArticle {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name mark_down_text
     * @type string
     * @required
     */
    mark_down_text: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IArticleCreateUpdate
 * @description: Json Model for create or update Article
 */
export interface IArticleCreateUpdate {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name mark_down_text
     * @type string
     * @required
     */
    mark_down_text: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IArticleFilter
 * @description: Json Model for getting Article Filter List
 */
export interface IArticleFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name tags
     * @type string[]
     * @description List of Tagst
     */
    tags?: string[];
}


/**
 * @name IArticleList
 * @description: Article List
 */
export interface IArticleList {
    /**
     * @name content
     * @type IArticle[]
     * @readonly
     * @required
     */
    content: IArticle[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IAuthorizationToken
 * @description: Model of AuthorizationToken
 */
export interface IAuthorizationToken {
    /**
     * @name access_age
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    access_age: number;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name provider_key
     * @type string
     * @required
     */
    provider_key: string;
    /**
     * @name provider_user_id
     * @type string
     * @required
     */
    provider_user_id: string;
    /**
     * @name return_url
     * @type string
     * @required
     */
    return_url: string;
    /**
     * @name social_token_verified
     * @type boolean
     * @required
     */
    social_token_verified: boolean;
    /**
     * @name type_of_connection
     * @type string
     * @required
     */
    type_of_connection: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name user_agent
     * @type string
     * @required
     */
    user_agent: string;
    /**
     * @name where_logged
     * @type ("BECKI_WEBSITE"|"HOMER_SERVER"|"E_STORE")
     * @description Record, where user make login
     * @required
     */
    where_logged: ("BECKI_WEBSITE"|"HOMER_SERVER"|"E_STORE");
}


/**
 * @name IBProgram
 * @description: Model of BProgram
 */
export interface IBProgram {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type IBProgramVersion[]
     * @readonly
     */
    program_versions?: IBProgramVersion[];
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IBProgramVersion
 * @description: Model of BProgram Version
 */
export interface IBProgramVersion {
    /**
     * @name approval_state
     * @type ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED")
     * @description Only if user make request for publishing
     */
    approval_state?: ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED");
    /**
     * @name author
     * @type IPerson
     * @description Visible only if user has permission to know it
     * @readonly
     */
    author?: IPerson;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name grid_project_snapshots
     * @type IBProgramVersionSnapGridProject[]
     * @required
     */
    grid_project_snapshots: IBProgramVersionSnapGridProject[];
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name program
     * @type string
     * @readonly
     */
    program?: string;
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IBProgramVersionSnapGridProject
 * @description: Model of Snapshot of versions of M_Project Snapshots
 */
export interface IBProgramVersionSnapGridProject {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name grid_programs
     * @type IBProgramVersionSnapGridProjectProgram[]
     */
    grid_programs?: IBProgramVersionSnapGridProjectProgram[];
    /**
     * @name grid_project
     * @type IShortReference
     * @required
     */
    grid_project: IShortReference;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IBProgramVersionSnapGridProjectProgram
 * @description: Interface IBProgramVersionSnapGridProjectProgram definition
 */
export interface IBProgramVersionSnapGridProjectProgram {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name grid_program
     * @type IShortReference
     * @readonly
     * @required
     */
    grid_program: IShortReference;
    /**
     * @name grid_program_version
     * @type IShortReference
     * @required
     */
    grid_program_version: IShortReference;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IBProgramFilter
 * @description: Json Model for getting B_Program Filter List
 */
export interface IBProgramFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get b_programs of given project
     * @format uuid
     */
    project_id?: string;
}


/**
 * @name IBProgramList
 * @description: Individual B_Program List
 */
export interface IBProgramList {
    /**
     * @name content
     * @type IBProgram[]
     * @readonly
     * @required
     */
    content: IBProgram[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBProgramVersionNew
 * @description: Json Model for new Version of B_Program
 */
export interface IBProgramVersionNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name m_project_snapshots
     * @type IMProjectSnapShot[]
     * @description Connected groups of grid_programs.versions under imported grid_programs
     */
    m_project_snapshots?: IMProjectSnapShot[];
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name program
     * @type string
     * @required
     */
    program: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IBase64File
 * @description: Json Model for getting Blocko_Block Filter List
 */
export interface IBase64File {
    /**
     * @name file
     * @type string
     * @description The file is encoded in base64. If it is null - it is a command to delete a file
     */
    file?: string;
}


/**
 * @name IBlob
 * @description: Model of Blob
 */
export interface IBlob {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IBlock
 * @description: Model of Block
 */
export interface IBlock {
    /**
     * @name active
     * @type boolean
     * @description Only for Community Administrator
     */
    active?: boolean;
    /**
     * @name author
     * @type IPerson
     * @description Visible only if user has permission to know it
     * @readonly
     */
    author?: IPerson;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name producer
     * @type IShortReference
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     */
    producer?: IShortReference;
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @required
     */
    publish_type: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name versions
     * @type IBlockVersion[]
     * @required
     */
    versions: IBlockVersion[];
}


/**
 * @name IBlockVersion
 * @description: Model of BlockVersion
 */
export interface IBlockVersion {
    /**
     * @name approval_state
     * @type ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED")
     * @description Only if user make request for publishing
     */
    approval_state?: ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED");
    /**
     * @name author
     * @type IPerson
     * @description Visible only if user has permission to know it
     * @readonly
     */
    author?: IPerson;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IBlockFilter
 * @description: Json Model for getting Block Filter List
 */
export interface IBlockFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name pending_blocks
     * @type boolean
     * @description Only for Admins with permissions
     */
    pending_blocks?: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Blocks of given project
     * @format uuid
     */
    project_id?: string;
    /**
     * @name public_programs
     * @type boolean
     * @description Show - All Public Programs which are confirmed and approved.
     */
    public_programs?: boolean;
}


/**
 * @name IBlockList
 * @description: Individual Block List
 */
export interface IBlockList {
    /**
     * @name content
     * @type IBlock[]
     * @readonly
     * @required
     */
    content: IBlock[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBlockoObjectApproval
 * @description: Interface IBlockoObjectApproval definition
 */
export interface IBlockoObjectApproval {
    /**
     * @name object_id
     * @type string
     * @format uuid
     * @required
     */
    object_id: string;
    /**
     * @name reason
     * @type string
     * @required
     */
    reason: string;
}


/**
 * @name IBlockoObjectApproveWithChanges
 * @description: Interface IBlockoObjectApproveWithChanges definition
 */
export interface IBlockoObjectApproveWithChanges {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name object_id
     * @type string
     * @format uuid
     * @required
     */
    object_id: string;
    /**
     * @name reason
     * @type string
     * @required
     */
    reason: string;
    /**
     * @name state
     * @type string
     * @required
     */
    state: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockCopy
 * @description: Json Model for copy Block
 */
export interface IBlockoBlockCopy {
    /**
     * @name block_id
     * @type string
     * @format uuid
     * @required
     */
    block_id: string;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Provide project id if you want to create private object
     * @format uuid
     * @required
     */
    project_id: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IBlockoTokenValidationRequest
 * @description: Json Model for validation of Token for HTTP requests
 */
export interface IBlockoTokenValidationRequest {
    /**
     * @name token
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    token: string;
    /**
     * @name type_of_token
     * @type string
     * @example PERSON_TOKEN, INSTANCE_TOKEN
     * @readonly
     * @required
     */
    type_of_token: string;
}


/**
 * @name IBlockoTokenValidationResult
 * @description: Json Model for validation of Token for HTTP requests
 */
export interface IBlockoTokenValidationResult {
    /**
     * @name available_requests
     * @type number
     * @format int64
     * @readonly
     * @required
     */
    available_requests: number;
    /**
     * @name token
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    token: string;
}


/**
 * @name IBoardBootloaderUpdate
 * @description: Interface IBoardBootloaderUpdate definition
 */
export interface IBoardBootloaderUpdate {
    /**
     * @name bootloader_id
     * @type string
     * @description If bootloader_is empty, system will used latest recommended version
     * @format uuid
     */
    bootloader_id?: string;
    /**
     * @name device_ids
     * @type string[]
     * @description Must be unique!!!, The hardware_id must have 20 hexadecimal characters!, It can combination of master devices and others
     * @required
     */
    device_ids: string[];
}


/**
 * @name IBoardCommand
 * @description: Json Model for developers commands to Hardware. For example restart, redirect etc. Please, use that, only if you know, what you are doing.
 */
export interface IBoardCommand {
    /**
     * @name command
     * @type ("RESTART"|"SWITCH_TO_BOOTLOADER"|"BLINK")
     * @description Command
     * @required
     */
    command: ("RESTART"|"SWITCH_TO_BOOTLOADER"|"BLINK");
    /**
     * @name hardware_id
     * @type string
     * @description Length must be between 0 and 255 characters.
     * @format uuid
     * @required
     */
    hardware_id: string;
}


/**
 * @name IBoardDeveloperParameters
 * @description: Json Model for update personal description of Board
 */
export interface IBoardDeveloperParameters {
    /**
     * @name boolean_value
     * @type boolean
     * @description only for boolean parameters
     */
    boolean_value?: boolean;
    /**
     * @name integer_value
     * @type number
     * @description only for text label parameters
     * @format int32
     */
    integer_value?: number;
    /**
     * @name parameter_type
     * @type string
     * @description Parameter names fo developer settings
     * @required
     */
    parameter_type: string;
    /**
     * @name string_value
     * @type string
     * @description only for text label parameters
     */
    string_value?: string;
}


/**
 * @name IBoardNewGarfield
 * @description: Json Model for create new Board
 */
export interface IBoardNewGarfield {
    /**
     * @name batch_id
     * @type string
     * @description Required valid batch_id
     * @format uuid
     * @required
     */
    batch_id: string;
    /**
     * @name full_id
     * @type string
     * @description Must be unique!!!, The hardware_id must have 24 hexadecimal characters!
     * @required
     */
    full_id: string;
    /**
     * @name garfield_station_id
     * @type string
     * @format uuid
     * @required
     */
    garfield_station_id: string;
    /**
     * @name hardware_type_id
     * @type string
     * @description Required valid hardware_type_id
     * @format uuid
     * @required
     */
    hardware_type_id: string;
}


/**
 * @name IBoardNewManual
 * @description: Json Model for create new Board
 */
export interface IBoardNewManual {
    /**
     * @name full_id
     * @type string
     * @description Must be unique!!!, The hardware_id must have 24 hexadecimal characters!
     * @required
     */
    full_id: string;
    /**
     * @name hardware_type_id
     * @type string
     * @description Required valid hardware_type_id
     * @format uuid
     * @required
     */
    hardware_type_id: string;
}


/**
 * @name IBoardServerRedirect
 * @description: Interface IBoardServerRedirect definition
 */
export interface IBoardServerRedirect {
    /**
     * @name server_id
     * @type string
     * @description Required only if server_url & server_port is null
     * @format uuid
     */
    server_id?: string;
    /**
     * @name server_port
     * @type string
     * @description Required only if server_id is null && server_url is not null
     */
    server_port?: string;
    /**
     * @name server_url
     * @type string
     * @description Required only if server_id is null && server_port is not null 
     */
    server_url?: string;
}


/**
 * @name IBoardFilter
 * @description: Json Model for Filtering Boards
 */
export interface IBoardFilter {
    /**
     * @name active
     * @type string
     * @description Boolean - required in String! "true" or "false "
     */
    active?: string;
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name end_time
     * @type string
     * @description Unix in millis - created - end_time
     * @format date-time
     */
    end_time?: string;
    /**
     * @name hardware_groups_id
     * @type string[]
     * @description List of hardware_group.id
     */
    hardware_groups_id?: string[];
    /**
     * @name hardware_type_ids
     * @type string[]
     * @description List of hardware_type.id
     */
    hardware_type_ids?: string[];
    /**
     * @name instance_snapshots
     * @type string[]
     * @description List of instance_snapshot.id
     */
    instance_snapshots?: string[];
    /**
     * @name processors
     * @type string[]
     * @description List of processor.id
     */
    processors?: string[];
    /**
     * @name producers
     * @type string[]
     * @description List of producer.id
     */
    producers?: string[];
    /**
     * @name projects
     * @type string[]
     * @description List of project.id
     */
    projects?: string[];
    /**
     * @name start_time
     * @type string
     * @description Unix in millis - created - start_time
     * @format date-time
     */
    start_time?: string;
}


/**
 * @name IBootLoader
 * @description: Model of BootLoader
 */
export interface IBootLoader {
    /**
     * @name changing_note
     * @type string
     * @required
     */
    changing_note: string;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name file
     * @type IBlob
     * @required
     */
    file: IBlob;
    /**
     * @name file_path
     * @type string
     * @readonly
     */
    file_path?: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name main_bootloader
     * @type boolean
     * @readonly
     */
    main_bootloader?: boolean;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name version_identifier
     * @type string
     * @required
     */
    version_identifier: string;
}


/**
 * @name IBootLoaderCreate
 * @description: Json Model for create Bootloader
 */
export interface IBootLoaderCreate {
    /**
     * @name changing_note
     * @type string
     * @description Length must be between 8 and 2500 characters.
     * @required
     */
    changing_note: string;
    /**
     * @name description
     * @type string
     * @description Length must be between 8 and 2500 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name version_identifier
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_identifier: string;
}


/**
 * @name IBootloaderUpdateProgram
 * @description: Interface IBootloaderUpdateProgram definition
 */
export interface IBootloaderUpdateProgram {
    /**
     * @name bootloader_id
     * @type string
     * @description Can be empty
     * @format uuid
     * @readonly
     * @required
     */
    bootloader_id: string;
    /**
     * @name bootloader_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    bootloader_name: string;
    /**
     * @name hardware_type_id
     * @type string
     * @description Can be empty
     * @format uuid
     * @readonly
     * @required
     */
    hardware_type_id: string;
    /**
     * @name hardware_type_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    hardware_type_name: string;
    /**
     * @name version_identificator
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    version_identificator: string;
}


/**
 * @name ICProgramVersion
 * @description: Model of CProgramVersion
 */
export interface ICProgramVersion {
    /**
     * @name approval_state
     * @type ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED")
     * @description Only if user make request for publishing
     */
    approval_state?: ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED");
    /**
     * @name author
     * @type IPerson
     * @description Visible only if user has permission to know it
     * @readonly
     */
    author?: IPerson;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name compilation_version
     * @type string
     * @readonly
     * @required
     */
    compilation_version: string;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name download_link_bin_file
     * @type string
     * @description Link for download file in Binary (Not in Base64). Its ready to manual Upload. Only if "status" == "SUCCESS"
     * @readonly
     */
    download_link_bin_file?: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name main_mark
     * @type boolean
     * @description Visible only for Administrator with Special Permission
     * @readonly
     */
    main_mark?: boolean;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name program
     * @type ICProgramVersionProgram
     * @description Program
     * @readonly
     */
    program?: ICProgramVersionProgram;
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name status
     * @type ("IN_PROGRESS"|"FILE_NOT_FOUND"|"BROKEN_JSON"|"SERVER_OFFLINE"|"SERVER_ERROR"|"FAILED"|"SUCCESS_DOWNLOAD_FAILED"|"SUCCESS"|"UNSTABLE"|"UNDEFINED")
     * @readonly
     * @required
     */
    status: ("IN_PROGRESS"|"FILE_NOT_FOUND"|"BROKEN_JSON"|"SERVER_OFFLINE"|"SERVER_ERROR"|"FAILED"|"SUCCESS_DOWNLOAD_FAILED"|"SUCCESS"|"UNSTABLE"|"UNDEFINED");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name virtual_input_output
     * @type string
     * @description Value can be empty, Server cannot guarantee that. External documentation: dsafsdfsdf
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name ICProgram
 * @description: Object represented C_Program in database
 */
export interface ICProgram {
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with Permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name default_version
     * @type ICProgramVersion
     * @description Visible only for Administrators with permission - its default version of Main Program of each hardware type
     * @readonly
     */
    default_version?: ICProgramVersion;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name hardware_type
     * @type IShortReference
     * @required
     */
    hardware_type: IShortReference;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type ICProgramVersion[]
     * @readonly
     */
    program_versions?: ICProgramVersion[];
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @required
     */
    publish_type: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name ICProgramCopy
 * @description: Json Model for copy C_Program
 */
export interface ICProgramCopy {
    /**
     * @name c_program_id
     * @type string
     * @format uuid
     * @required
     */
    c_program_id: string;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Provide project id if you want to create private object
     * @format uuid
     * @required
     */
    project_id: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ICProgramFilter
 * @description: Json Model for getting C_Program Filter List
 */
export interface ICProgramFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name hardware_type_ids
     * @type string[]
     * @description Return by Type Of Board - and only codes with permissions
     */
    hardware_type_ids?: string[];
    /**
     * @name pending_programs
     * @type boolean
     * @description Designed for Administrators for publishing decisions of Community Codes - Without permission, the value is ignored. 
     */
    pending_programs?: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get C_Programs of given project
     * @format uuid
     */
    project_id?: string;
    /**
     * @name public_programs
     * @type boolean
     * @description Show - All Public Programs which are confirmed and approved.
     */
    public_programs?: boolean;
}


/**
 * @name ICProgramList
 * @description: Individual C_Program List
 */
export interface ICProgramList {
    /**
     * @name content
     * @type ICProgram[]
     * @readonly
     * @required
     */
    content: ICProgram[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ICProgramNew
 * @description: Json Model for new C_Program
 */
export interface ICProgramNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name hardware_type_id
     * @type string
     * @format uuid
     * @required
     */
    hardware_type_id: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Provide project id if you want to create private object
     * @format uuid
     */
    project_id?: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ICProgramUpdateProgram
 * @description: Interface ICProgramUpdateProgram definition
 */
export interface ICProgramUpdateProgram {
    /**
     * @name c_program_id
     * @type string
     * @description Can be empty
     * @format uuid
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_program_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_program_name: string;
    /**
     * @name c_program_version_id
     * @type string
     * @description Can be empty
     * @format uuid
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_version_name: string;
}


/**
 * @name ICProgramVersionNew
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name files
     * @type ILibraryRecord[]
     */
    files?: ILibraryRecord[];
    /**
     * @name imported_libraries
     * @type string[]
     * @description Contains IDs of imported Library versions
     */
    imported_libraries?: string[];
    /**
     * @name library_compilation_version
     * @type string
     * @description The Library Version tag_name from HardwareType.supported_libraries
     */
    library_compilation_version?: string;
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ICProgramVersionProgram
 * @description: Json Model for Version of C_program
 */
export interface ICProgramVersionProgram {
    /**
     * @name files
     * @type ILibraryRecord[]
     * @readonly
     */
    files?: ILibraryRecord[];
    /**
     * @name imported_libraries
     * @type ILibraryLibraryVersionPair[]
     * @description List imported libraries
     * @readonly
     */
    imported_libraries?: ILibraryLibraryVersionPair[];
    /**
     * @name main
     * @type string
     * @readonly
     */
    main?: string;
}


/**
 * @name ICProgramVersionUpdate
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionUpdate {
    /**
     * @name files
     * @type ILibraryRecord[]
     * @readonly
     */
    files?: ILibraryRecord[];
    /**
     * @name hardware_type_id
     * @type string
     * @description Required only if user compile code not under C++ code version (where compilation can found hardware_type)
     * @format uuid
     */
    hardware_type_id?: string;
    /**
     * @name imported_libraries
     * @type string[]
     * @description List ID of libraries version ID
     * @readonly
     */
    imported_libraries?: string[];
    /**
     * @name library_compilation_version
     * @type string
     * @description The Library Version tag_name from HardwareType.supported_libraries
     */
    library_compilation_version?: string;
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
}


/**
 * @name ICloudCompilationServerCompilationResult
 * @description: Interface ICloudCompilationServerCompilationResult definition
 */
export interface ICloudCompilationServerCompilationResult {
    /**
     * @name interface_code
     * @type string
     * @readonly
     */
    interface_code?: string;
}


/**
 * @name ICloudHomerServerNewAuto
 * @description: Json Model for new Blocko Server
 */
export interface ICloudHomerServerNewAuto {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Optiona value - only for private server, for public server, user need permission
     * @format uuid
     */
    project_id?: string;
    /**
     * @name region_slug
     * @type string
     * @required
     */
    region_slug: string;
    /**
     * @name size_slug
     * @type string
     * @required
     */
    size_slug: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ICloudHomerServerNewManually
 * @description: Json Model for new Blocko Server
 */
export interface ICloudHomerServerNewManually {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name grid_port
     * @type number
     * @format int32
     * @required
     */
    grid_port: number;
    /**
     * @name hardware_logger_port
     * @type number
     * @format int32
     * @required
     */
    hardware_logger_port: number;
    /**
     * @name mqtt_port
     * @type number
     * @format int32
     * @required
     */
    mqtt_port: number;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Optiona value - only for private server, for public server, user need permission
     * @format uuid
     */
    project_id?: string;
    /**
     * @name rest_api_port
     * @type number
     * @format int32
     * @required
     */
    rest_api_port: number;
    /**
     * @name server_url
     * @type string
     * @required
     */
    server_url: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
    /**
     * @name web_view_port
     * @type number
     * @format int32
     * @required
     */
    web_view_port: number;
}


/**
 * @name ICommunityVersionPublishResponse
 * @description: Json Model for admin response for publishing C_Program
 */
export interface ICommunityVersionPublishResponse {
    /**
     * @name decision
     * @type boolean
     * @required
     */
    decision: boolean;
    /**
     * @name program_description
     * @type string
     * @required
     */
    program_description: string;
    /**
     * @name program_name
     * @type string
     * @required
     */
    program_name: string;
    /**
     * @name reason
     * @type string
     * @required
     */
    reason: string;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @format uuid
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name ICompilationLibrary
 * @description: Json Model with Library Compilation
 */
export interface ICompilationLibrary {
    /**
     * @name body
     * @type string
     */
    body?: string;
    /**
     * @name created_at
     * @type string
     * @required
     */
    created_at: string;
    /**
     * @name draft
     * @type boolean
     * @required
     */
    draft: boolean;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name prerelease
     * @type boolean
     * @required
     */
    prerelease: boolean;
    /**
     * @name published_at
     * @type string
     * @required
     */
    published_at: string;
    /**
     * @name tag_name
     * @type string
     * @example v1.0.1
     * @required
     */
    tag_name: string;
}


/**
 * @name ICompilationBuildError
 * @description: Json Model for Compilation Result
 */
export interface ICompilationBuildError {
    /**
     * @name adjusted_column
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    adjusted_column: number;
    /**
     * @name code
     * @type string
     * @readonly
     * @required
     */
    code: string;
    /**
     * @name code_white_space
     * @type string
     * @readonly
     * @required
     */
    code_white_space: string;
    /**
     * @name column
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    column: number;
    /**
     * @name end_index
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    end_index: number;
    /**
     * @name file_name
     * @type string
     * @readonly
     * @required
     */
    file_name: string;
    /**
     * @name line
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    line: number;
    /**
     * @name start_index
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    start_index: number;
    /**
     * @name state
     * @type string
     * @description Value is build_error
     * @readonly
     * @required
     */
    state: string;
    /**
     * @name text
     * @type string
     * @readonly
     * @required
     */
    text: string;
    /**
     * @name type
     * @type string
     * @readonly
     * @required
     */
    type: string;
}


/**
 * @name ICompilationServer
 * @description: Model of CompilationServer
 */
export interface ICompilationServer {
    /**
     * @name connection_identificator
     * @type string
     * @readonly
     */
    connection_identificator?: string;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name hash_certificate
     * @type string
     * @readonly
     */
    hash_certificate?: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name online_state
     * @type ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER")
     * @readonly
     * @required
     */
    online_state: ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER");
    /**
     * @name personal_server_name
     * @type string
     * @required
     */
    personal_server_name: string;
    /**
     * @name server_url
     * @type string
     * @readonly
     * @required
     */
    server_url: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name ICompilationServerNew
 * @description: Json Model for new Compilation Server
 */
export interface ICompilationServerNew {
    /**
     * @name personal_server_name
     * @type string
     * @description Unique name For Compiler cloud_blocko_server, The name length must be between 6 and 60 characters
     * @required
     */
    personal_server_name: string;
    /**
     * @name server_url
     * @type string
     * @required
     */
    server_url: string;
}


/**
 * @name IComputer
 * @description: Interface IComputer definition
 */
export interface IComputer {
    /**
     * @name hostname
     * @type string
     * @required
     */
    hostname: string;
    /**
     * @name inet
     * @type string
     * @required
     */
    inet: string;
    /**
     * @name inet6
     * @type string
     * @required
     */
    inet6: string;
    /**
     * @name jre
     * @type string
     * @required
     */
    jre: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name state
     * @type string
     * @required
     */
    state: string;
    /**
     * @name version
     * @type string
     * @required
     */
    version: string;
}


/**
 * @name ICustomer
 * @description: Model of Customer
 */
export interface ICustomer {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name employees
     * @type IEmployee[]
     * @required
     */
    employees: IEmployee[];
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name payment_details
     * @type IPaymentDetails
     * @required
     */
    payment_details: IPaymentDetails;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name ICustomerEmployee
 * @description: For adding employees to a company.
 */
export interface ICustomerEmployee {
    /**
     * @name customer_id
     * @type string
     * @format uuid
     * @required
     */
    customer_id: string;
    /**
     * @name mails
     * @type string[]
     * @required
     */
    mails: string[];
}


/**
 * @name ICustomerNew
 * @description: Json Model for creating new company.
 */
export interface ICustomerNew {
    /**
     * @name city
     * @type string
     * @description The city must have at least 2 characters
     * @required
     */
    city: string;
    /**
     * @name company_authorized_email
     * @type string
     * @description The company_authorized_email must have at least 4 characters
     * @required
     */
    company_authorized_email: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description The company_authorized_phone must have at least 4 characters
     * @required
     */
    company_authorized_phone: string;
    /**
     * @name company_name
     * @type string
     * @description The company_name must have at least 4 characters
     * @required
     */
    company_name: string;
    /**
     * @name company_registration_no
     * @type string
     * @description The company_registration_no must have at least 4 characters and maximum 20 characters - FOR non-EU countries, for Business account is required registration_no OR vat_number
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Required: only if account is business & from EU!!! CZ28496639 for Business account is required registration_no OR vat_number
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description The country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name invoice_email
     * @type string
     * @description Email must be valid
     * @required
     */
    invoice_email: string;
    /**
     * @name street
     * @type string
     * @description The street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: always. But The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name zip_code
     * @type string
     * @description The zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name IDMBoardBootloaderDefaultConfig
 * @description: Interface IDMBoardBootloaderDefaultConfig definition
 */
export interface IDMBoardBootloaderDefaultConfig {
    /**
     * @name autobackup
     * @type boolean
     * @readonly
     * @required
     */
    autobackup: boolean;
    /**
     * @name autojump
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    autojump: number;
    /**
     * @name blreport
     * @type boolean
     * @readonly
     * @required
     */
    blreport: boolean;
    /**
     * @name lowpanbr
     * @type boolean
     * @readonly
     * @required
     */
    lowpanbr: boolean;
    /**
     * @name netsource
     * @type string
     * @readonly
     * @required
     */
    netsource: string;
    /**
     * @name timeoffset
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    timeoffset: number;
    /**
     * @name timesync
     * @type boolean
     * @readonly
     * @required
     */
    timesync: boolean;
    /**
     * @name wdenable
     * @type boolean
     * @readonly
     * @required
     */
    wdenable: boolean;
    /**
     * @name wdtime
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    wdtime: number;
    /**
     * @name webport
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    webport: number;
    /**
     * @name webview
     * @type boolean
     * @readonly
     * @required
     */
    webview: boolean;
}


/**
 * @name IDeployFirmware
 * @description: Json Model with List of Board ID
 */
export interface IDeployFirmware {
    /**
     * @name c_program_version_id
     * @type string
     * @format uuid
     * @required
     */
    c_program_version_id: string;
    /**
     * @name hardware_ids
     * @type string[]
     * @required
     */
    hardware_ids: string[];
}


/**
 * @name IEmailAndPassword
 * @description: Json Model with email and password
 */
export interface IEmailAndPassword {
    /**
     * @name email
     * @type string
     * @required
     */
    email: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
}


/**
 * @name IEmailRequired
 * @description: Json Model with email
 */
export interface IEmailRequired {
    /**
     * @name email
     * @type string
     * @required
     */
    email: string;
}


/**
 * @name IEmployee
 * @description: Model of Employee
 */
export interface IEmployee {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name person
     * @type IPerson
     */
    person?: IPerson;
    /**
     * @name state
     * @type ("OWNER"|"ADMIN"|"MEMBER"|"INVITED")
     * @required
     */
    state: ("OWNER"|"ADMIN"|"MEMBER"|"INVITED");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IEntityRegistrationStatus
 * @description: Json Model for Status and all information about embedded Hardware, GSM Modul, etx..
 */
export interface IEntityRegistrationStatus {
    /**
     * @name status
     * @type ("CAN_REGISTER"|"NOT_EXIST"|"ALREADY_REGISTERED_IN_YOUR_ACCOUNT"|"ALREADY_REGISTERED"|"PERMANENTLY_DISABLED"|"BROKEN_DEVICE")
     * @description CAN_REGISTER, ALREADY_REGISTERED_IN_YOUR_ACCOUNT, ALREADY_REGISTERED, PERMANENTLY_DISABLED, BROKEN_DEVICE
     * @example CAN_REGISTER
     * @readonly
     * @required
     */
    status: ("CAN_REGISTER"|"NOT_EXIST"|"ALREADY_REGISTERED_IN_YOUR_ACCOUNT"|"ALREADY_REGISTERED"|"PERMANENTLY_DISABLED"|"BROKEN_DEVICE");
}


/**
 * @name IEntityValidationIn
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationIn {
    /**
     * @name key
     * @type ("email"|"nick_name"|"vat_number")
     * @description This field is required
     * @required
     */
    key: ("email"|"nick_name"|"vat_number");
    /**
     * @name value
     * @type string
     * @description This field is required
     * @required
     */
    value: string;
}


/**
 * @name IEntityValidationOut
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationOut {
    /**
     * @name message
     * @type string
     * @description If valid = false, Json probably contains message for user
     * @example Email is used
     * @readonly
     */
    message?: string;
    /**
     * @name valid
     * @type boolean
     * @description Entity (Email, NickName.. etc) is valid if valid = true
     * @readonly
     * @required
     */
    valid: boolean;
}


/**
 * @name IFileContent
 * @description: Json Model for file content
 */
export interface IFileContent {
    /**
     * @name file_in_base64
     * @type string
     * @required
     */
    file_in_base64: string;
}


/**
 * @name IGSM
 * @description: Model of GSM
 */
export interface IGSM {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name msi_number
     * @type number
     * @format int64
     * @required
     */
    msi_number: number;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name provider
     * @type string
     * @required
     */
    provider: string;
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name un_registration_permission
     * @type boolean
     * @readonly
     */
    un_registration_permission?: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IGSMCredit
 * @description: Interface IGSMCredit definition
 */
export interface IGSMCredit {
    /**
     * @name date_first
     * @type string
     * @format date-time
     * @required
     */
    date_first: string;
    /**
     * @name date_last
     * @type string
     * @format date-time
     * @required
     */
    date_last: string;
}


/**
 * @name IGSMFilter
 * @description: Interface IGSMFilter definition
 */
export interface IGSMFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name project_id
     * @type string
     * @format uuid
     * @required
     */
    project_id: string;
}


/**
 * @name IGSMList
 * @description: Interface IGSMList definition
 */
export interface IGSMList {
    /**
     * @name content
     * @type IGSM[]
     * @readonly
     * @required
     */
    content: IGSM[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IGSMRegister
 * @description: Json Model for register SIMCard Modul to project
 */
export interface IGSMRegister {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be max 60 characters.
     */
    name?: string;
    /**
     * @name project_id
     * @type string
     * @format uuid
     * @required
     */
    project_id: string;
    /**
     * @name registration_hash
     * @type string
     * @format uuid
     * @required
     */
    registration_hash: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IGarfield
 * @description: Model of Garfield test set
 */
export interface IGarfield {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name hardware_tester_id
     * @type string
     * @required
     */
    hardware_tester_id: string;
    /**
     * @name hardware_type
     * @type IHardwareType
     * @readonly
     */
    hardware_type?: IHardwareType;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name print_label_id_1
     * @type number
     * @format int32
     * @required
     */
    print_label_id_1: number;
    /**
     * @name print_label_id_2
     * @type number
     * @format int32
     * @required
     */
    print_label_id_2: number;
    /**
     * @name print_sticker_id
     * @type number
     * @format int32
     * @required
     */
    print_sticker_id: number;
    /**
     * @name producer
     * @type IProducer
     * @readonly
     */
    producer?: IProducer;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IGarfieldEdit
 * @description: Json Model for creating new Garfield.
 */
export interface IGarfieldEdit {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name hardware_tester_id
     * @type string
     * @required
     */
    hardware_tester_id: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name print_label_id_1
     * @type number
     * @format int32
     * @required
     */
    print_label_id_1: number;
    /**
     * @name print_label_id_2
     * @type number
     * @format int32
     * @required
     */
    print_label_id_2: number;
    /**
     * @name print_sticker_id
     * @type number
     * @format int32
     * @required
     */
    print_sticker_id: number;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IGarfieldNew
 * @description: Json Model for creating new Garfield.
 */
export interface IGarfieldNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name hardware_tester_id
     * @type string
     * @required
     */
    hardware_tester_id: string;
    /**
     * @name hardware_type_id
     * @type string
     * @format uuid
     * @required
     */
    hardware_type_id: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name print_label_id_1
     * @type number
     * @format int32
     * @required
     */
    print_label_id_1: number;
    /**
     * @name print_label_id_2
     * @type number
     * @format int32
     * @required
     */
    print_label_id_2: number;
    /**
     * @name print_sticker_id
     * @type number
     * @format int32
     * @required
     */
    print_sticker_id: number;
    /**
     * @name producer_id
     * @type string
     * @format uuid
     * @required
     */
    producer_id: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IGitHubReleases
 * @description: Json Model - Private for GitHub Release
 */
export interface IGitHubReleases {
    /**
     * @name assets
     * @type IGitHubReleasesAsset[]
     * @required
     */
    assets: IGitHubReleasesAsset[];
    /**
     * @name assets_url
     * @type string
     * @required
     */
    assets_url: string;
    /**
     * @name body
     * @type string
     * @required
     */
    body: string;
    /**
     * @name created_at
     * @type string
     * @required
     */
    created_at: string;
    /**
     * @name draft
     * @type boolean
     * @required
     */
    draft: boolean;
    /**
     * @name html_url
     * @type string
     * @required
     */
    html_url: string;
    /**
     * @name id
     * @type number
     * @format int32
     * @required
     */
    id: number;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name prerelease
     * @type boolean
     * @required
     */
    prerelease: boolean;
    /**
     * @name published_at
     * @type string
     * @required
     */
    published_at: string;
    /**
     * @name tag_name
     * @type string
     * @required
     */
    tag_name: string;
    /**
     * @name tarball_url
     * @type string
     * @required
     */
    tarball_url: string;
    /**
     * @name target_commitish
     * @type string
     * @required
     */
    target_commitish: string;
    /**
     * @name upload_url
     * @type string
     * @required
     */
    upload_url: string;
    /**
     * @name url
     * @type string
     * @required
     */
    url: string;
    /**
     * @name zipball_url
     * @type string
     * @required
     */
    zipball_url: string;
}


/**
 * @name IGitHubReleasesAsset
 * @description: Json Model - Private for GitHub Release Assets
 */
export interface IGitHubReleasesAsset {
    /**
     * @name browser_download_url
     * @type string
     * @required
     */
    browser_download_url: string;
    /**
     * @name content_type
     * @type string
     * @required
     */
    content_type: string;
    /**
     * @name created_at
     * @type string
     * @required
     */
    created_at: string;
    /**
     * @name download_count
     * @type number
     * @format int32
     * @required
     */
    download_count: number;
    /**
     * @name id
     * @type number
     * @format int32
     * @required
     */
    id: number;
    /**
     * @name label
     * @type string
     * @required
     */
    label: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name size
     * @type number
     * @format int64
     * @required
     */
    size: number;
    /**
     * @name state
     * @type string
     * @required
     */
    state: string;
    /**
     * @name updated_at
     * @type string
     * @required
     */
    updated_at: string;
    /**
     * @name url
     * @type string
     * @required
     */
    url: string;
}


/**
 * @name IGridProgram
 * @description: Model of GridProgram
 */
export interface IGridProgram {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type IGridProgramVersion[]
     * @readonly
     * @required
     */
    program_versions: IGridProgramVersion[];
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IGridProgramVersion
 * @description: Model of GridProgramVersion
 */
export interface IGridProgramVersion {
    /**
     * @name approval_state
     * @type ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED")
     * @description Only if user make request for publishing
     */
    approval_state?: ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED");
    /**
     * @name author
     * @type IPerson
     * @description Visible only if user has permission to know it
     * @readonly
     */
    author?: IPerson;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name m_program_virtual_input_output
     * @type string
     */
    m_program_virtual_input_output?: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name program_version
     * @type string
     * @readonly
     */
    program_version?: string;
    /**
     * @name public_access
     * @type boolean
     * @required
     */
    public_access: boolean;
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IGridProject
 * @description: Model of GridProject
 */
export interface IGridProject {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name m_programs
     * @type IGridProgram[]
     * @readonly
     * @required
     */
    m_programs: IGridProgram[];
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IGridProjectFilter
 * @description: Json Model for Filtering Grids Projects
 */
export interface IGridProjectFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name project_id
     * @type string
     * @format uuid
     * @required
     */
    project_id: string;
}


/**
 * @name IGridProjectList
 * @description: Individual GridProject List
 */
export interface IGridProjectList {
    /**
     * @name content
     * @type IGridProject[]
     * @readonly
     * @required
     */
    content: IGridProject[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IGridTerminal
 * @description: Model of GridTerminal
 */
export interface IGridTerminal {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     */
    device_name?: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     */
    device_type?: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name m_program_access
     * @type boolean
     * @required
     */
    m_program_access: boolean;
    /**
     * @name terminal_token
     * @type string
     * @example Mobile, WebBrowser
     * @readonly
     * @required
     */
    terminal_token: string;
    /**
     * @name up_to_date
     * @type boolean
     * @required
     */
    up_to_date: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name user_agent
     * @type string
     * @example Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405
     * @readonly
     */
    user_agent?: string;
    /**
     * @name ws_permission
     * @type boolean
     * @required
     */
    ws_permission: boolean;
}


/**
 * @name IGridWidgetVersionNew
 * @description: Json Model for crating new version and also content of GridWidget Model
 */
export interface IGridWidgetVersionNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IGridWidgetFilter
 * @description: Json Model for getting GridWidget Filter List
 */
export interface IGridWidgetFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name pending_widgets
     * @type boolean
     * @description Only for Admins with permissions
     */
    pending_widgets?: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Widgets of given project
     * @format uuid
     */
    project_id?: string;
    /**
     * @name public_programs
     * @type boolean
     * @description Show - All Public Programs which are confirmed and approved.
     */
    public_programs?: boolean;
}


/**
 * @name IGridWidgetList
 * @description: Individual GridWidget List
 */
export interface IGridWidgetList {
    /**
     * @name content
     * @type IWidget[]
     * @readonly
     * @required
     */
    content: IWidget[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IGridTerminalIdentf
 * @description: Json Model for Identificator
 */
export interface IGridTerminalIdentf {
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     * @required
     */
    device_name: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     * @required
     */
    device_type: string;
}


/**
 * @name IHardware
 * @description: Model of Hardware
 */
export interface IHardware {
    /**
     * @name actual_bootloader
     * @type IBootLoader
     * @readonly
     */
    actual_bootloader?: IBootLoader;
    /**
     * @name actual_c_program
     * @type IShortReference
     * @readonly
     */
    actual_c_program?: IShortReference;
    /**
     * @name actual_c_program_backup
     * @type IShortReference
     * @readonly
     */
    actual_c_program_backup?: IShortReference;
    /**
     * @name actual_c_program_backup_version
     * @type IShortReference
     * @readonly
     */
    actual_c_program_backup_version?: IShortReference;
    /**
     * @name actual_c_program_version
     * @type IShortReference
     */
    actual_c_program_version?: IShortReference;
    /**
     * @name actual_instance
     * @type IShortReference
     * @description Can be null, if device is not in Instance
     * @readonly
     */
    actual_instance?: IShortReference;
    /**
     * @name alert_list
     * @type ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[]
     * @description Optional. Only if we have Alert parameters
     * @readonly
     */
    alert_list?: ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[];
    /**
     * @name available_latest_bootloader
     * @type IBootLoader
     * @readonly
     */
    available_latest_bootloader?: IBootLoader;
    /**
     * @name backup_mode
     * @type ("STATIC_BACKUP"|"AUTO_BACKUP"|"NO_BACKUP")
     */
    backup_mode?: ("STATIC_BACKUP"|"AUTO_BACKUP"|"NO_BACKUP");
    /**
     * @name bootloader_core_configuration
     * @type IDMBoardBootloaderDefaultConfig
     * @readonly
     */
    bootloader_core_configuration?: IDMBoardBootloaderDefaultConfig;
    /**
     * @name bootloader_update_in_progress
     * @type IBootLoader
     * @readonly
     */
    bootloader_update_in_progress?: IBootLoader;
    /**
     * @name collision
     * @type ("NO_COLLISION"|"ALREADY_IN_INSTANCE"|"PLANNED_UPDATE")
     * @description Basic alerts for potential collisions when deploying or updating new programs
     * @readonly
     */
    collision?: ("NO_COLLISION"|"ALREADY_IN_INSTANCE"|"PLANNED_UPDATE");
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name database_synchronize
     * @type boolean
     * @required
     */
    database_synchronize: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name developer_kit
     * @type boolean
     * @required
     */
    developer_kit: boolean;
    /**
     * @name dominant_entity
     * @type boolean
     * @required
     */
    dominant_entity: boolean;
    /**
     * @name dominant_project_active
     * @type IShortReference
     * @readonly
     */
    dominant_project_active?: IShortReference;
    /**
     * @name full_id
     * @type string
     * @required
     */
    full_id: string;
    /**
     * @name hardware_groups
     * @type IShortReference[]
     * @required
     */
    hardware_groups: IShortReference[];
    /**
     * @name hardware_type
     * @type IShortReference
     */
    hardware_type?: IShortReference;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name ip_address
     * @type string
     * @description Optional. Only if the address is cached
     * @readonly
     */
    ip_address?: string;
    /**
     * @name latest_online
     * @type number
     * @description Value is missing, if device status is online
     * @format int64
     * @readonly
     */
    latest_online?: number;
    /**
     * @name mac_address
     * @type string
     * @required
     */
    mac_address: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER")
     * @description Value is cached with asynchronous refresh
     * @readonly
     */
    online_state?: ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER");
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
    /**
     * @name producer
     * @type IShortReference
     * @readonly
     */
    producer?: IShortReference;
    /**
     * @name project
     * @type IShortReference
     */
    project?: IShortReference;
    /**
     * @name required_updates
     * @type IHardwareUpdate[]
     * @readonly
     */
    required_updates?: IHardwareUpdate[];
    /**
     * @name server
     * @type IHomerServer
     * @readonly
     */
    server?: IHomerServer;
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name wifi_mac_address
     * @type string
     * @required
     */
    wifi_mac_address: string;
}


/**
 * @name IHardwareBackupPair
 * @description: Interface IHardwareBackupPair definition
 */
export interface IHardwareBackupPair {
    /**
     * @name backup_mode
     * @type boolean
     * @description True - for auto_backup. False for static backup. If static c_program_version_id is required!
     * @required
     */
    backup_mode: boolean;
    /**
     * @name c_program_version_id
     * @type string
     * @description Required if backup_mode is false. C_program_version_id must be compiled and for same type of Board!
     * @format uuid
     */
    c_program_version_id?: string;
    /**
     * @name hardware_id
     * @type string
     * @format uuid
     * @required
     */
    hardware_id: string;
}


/**
 * @name IHardwareBackupSettings
 * @description: Interface IHardwareBackupSettings definition
 */
export interface IHardwareBackupSettings {
    /**
     * @name hardware_backup_pairs
     * @type IHardwareBackupPair[]
     * @description List of Pairs for settings of Backup on hardware
     * @required
     */
    hardware_backup_pairs: IHardwareBackupPair[];
}


/**
 * @name IHardwareBatch
 * @description: Model of Production Batch  
 */
export interface IHardwareBatch {
    /**
     * @name assembly_manufacture_id
     * @type string
     * @required
     */
    assembly_manufacture_id: string;
    /**
     * @name assembly_manufacture_name
     * @type string
     * @required
     */
    assembly_manufacture_name: string;
    /**
     * @name batch_id
     * @type string
     * @required
     */
    batch_id: string;
    /**
     * @name compiler_target_name
     * @type string
     * @required
     */
    compiler_target_name: string;
    /**
     * @name customer_company_made_description
     * @type string
     * @required
     */
    customer_company_made_description: string;
    /**
     * @name customer_company_name
     * @type string
     * @required
     */
    customer_company_name: string;
    /**
     * @name customer_product_name
     * @type string
     * @required
     */
    customer_product_name: string;
    /**
     * @name date_of_assembly
     * @type string
     * @required
     */
    date_of_assembly: string;
    /**
     * @name deleted
     * @type boolean
     * @required
     */
    deleted: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name ean_number
     * @type string
     * @required
     */
    ean_number: string;
    /**
     * @name get_collection_name
     * @type string
     * @required
     */
    get_collection_name: string;
    /**
     * @name latest_used_mac_address
     * @type string
     * @required
     */
    latest_used_mac_address: string;
    /**
     * @name mac_address_end
     * @type string
     * @required
     */
    mac_address_end: string;
    /**
     * @name mac_address_start
     * @type string
     * @required
     */
    mac_address_start: string;
    /**
     * @name pcb_manufacture_id
     * @type string
     * @required
     */
    pcb_manufacture_id: string;
    /**
     * @name pcb_manufacture_name
     * @type string
     * @required
     */
    pcb_manufacture_name: string;
    /**
     * @name production_batch
     * @type string
     * @required
     */
    production_batch: string;
    /**
     * @name revision
     * @type string
     * @required
     */
    revision: string;
}


/**
 * @name IHardwareBatchNew
 * @description: Json Model for new Hardware Batch
 */
export interface IHardwareBatchNew {
    /**
     * @name assembly_manufacture_id
     * @type string
     * @required
     */
    assembly_manufacture_id: string;
    /**
     * @name assembly_manufacture_name
     * @type string
     * @required
     */
    assembly_manufacture_name: string;
    /**
     * @name customer_company_made_description
     * @type string
     * @required
     */
    customer_company_made_description: string;
    /**
     * @name customer_company_name
     * @type string
     * @required
     */
    customer_company_name: string;
    /**
     * @name customer_product_name
     * @type string
     * @required
     */
    customer_product_name: string;
    /**
     * @name date_of_assembly
     * @type string
     * @required
     */
    date_of_assembly: string;
    /**
     * @name description
     * @type string
     */
    description?: string;
    /**
     * @name ean_number
     * @type string
     * @required
     */
    ean_number: string;
    /**
     * @name mac_address_end
     * @type string
     * @required
     */
    mac_address_end: string;
    /**
     * @name mac_address_start
     * @type string
     * @required
     */
    mac_address_start: string;
    /**
     * @name pcb_manufacture_id
     * @type string
     * @required
     */
    pcb_manufacture_id: string;
    /**
     * @name pcb_manufacture_name
     * @type string
     * @required
     */
    pcb_manufacture_name: string;
    /**
     * @name production_batch
     * @type string
     * @required
     */
    production_batch: string;
    /**
     * @name revision
     * @type string
     * @required
     */
    revision: string;
}


/**
 * @name IHardwareFeature
 * @description: Model of HardwareFeature
 */
export interface IHardwareFeature {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IHardwareGroup
 * @description: Model of Hardware Group
 */
export interface IHardwareGroup {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name hardware_types
     * @type IShortReference[]
     * @readonly
     * @required
     */
    hardware_types: IShortReference[];
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name size
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    size: number;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IHardwareGroupFilter
 * @description: Json Model for Hardware Group Filter List 
 */
export interface IHardwareGroupFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name instance_snapshots
     * @type string[]
     * @description List of instance_snapshot.id
     */
    instance_snapshots?: string[];
    /**
     * @name instances
     * @type string[]
     * @description List of instance.id
     */
    instances?: string[];
    /**
     * @name project_id
     * @type string
     * @format uuid
     * @required
     */
    project_id: string;
}


/**
 * @name IHardwareGroupList
 * @description: Individual Hardware Group List
 */
export interface IHardwareGroupList {
    /**
     * @name content
     * @type IHardwareGroup[]
     * @readonly
     * @required
     */
    content: IHardwareGroup[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IHardwareType
 * @description: Model of HardwareType
 */
export interface IHardwareType {
    /**
     * @name batch_register_permission
     * @type boolean
     * @description Visible only for Administrator with Special Permission
     * @readonly
     */
    batch_register_permission?: boolean;
    /**
     * @name batchs
     * @type IHardwareBatch[]
     * @description accessible only for persons with permissions
     * @readonly
     */
    batchs?: IHardwareBatch[];
    /**
     * @name boot_loaders
     * @type IBootLoader[]
     * @description accessible only for persons with permissions
     */
    boot_loaders?: IBootLoader[];
    /**
     * @name bootloader_edit_permission
     * @type boolean
     * @description Visible only for Administrator with Special Permission
     * @readonly
     */
    bootloader_edit_permission?: boolean;
    /**
     * @name compiler_target_name
     * @type string
     * @required
     */
    compiler_target_name: string;
    /**
     * @name connectible_to_internet
     * @type boolean
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name default_c_program_edit_permission
     * @type boolean
     * @description Visible only for Administrator with Special Permission
     * @readonly
     */
    default_c_program_edit_permission?: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name features
     * @type IHardwareFeature[]
     * @required
     */
    features: IHardwareFeature[];
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name main_boot_loader
     * @type IBootLoader
     */
    main_boot_loader?: IBootLoader;
    /**
     * @name main_c_program
     * @type ICProgram
     */
    main_c_program?: ICProgram;
    /**
     * @name main_test_c_program
     * @type ICProgram
     * @description accessible only for persons with permissions
     * @readonly
     */
    main_test_c_program?: ICProgram;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name picture_link
     * @type string
     * @readonly
     */
    picture_link?: string;
    /**
     * @name processor
     * @type IShortReference
     */
    processor?: IShortReference;
    /**
     * @name producer
     * @type IShortReference
     * @description Only if user have permission for this object
     */
    producer?: IShortReference;
    /**
     * @name supported_libraries
     * @type ICompilationLibrary[]
     * @readonly
     */
    supported_libraries?: ICompilationLibrary[];
    /**
     * @name test_c_program_edit_permission
     * @type boolean
     * @description Visible only for Administrator with Special Permission
     * @readonly
     */
    test_c_program_edit_permission?: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IHardwareTypeNew
 * @description: Json Model for new HardwareType
 */
export interface IHardwareTypeNew {
    /**
     * @name compiler_target_name
     * @type string
     * @description The description must have at least 4 characters
     * @required
     */
    compiler_target_name: string;
    /**
     * @name connectible_to_internet
     * @type boolean
     * @description If device can connect to internet
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name processor_id
     * @type string
     * @description Required valid processor_id
     * @format uuid
     * @required
     */
    processor_id: string;
    /**
     * @name producer_id
     * @type string
     * @description Required valid producer_id
     * @format uuid
     * @required
     */
    producer_id: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IHardwareUpdate
 * @description: Model of HardwareUpdate
 */
export interface IHardwareUpdate {
    /**
     * @name actualization_procedure_id
     * @type string
     * @format uuid
     * @readonly
     */
    actualization_procedure_id?: string;
    /**
     * @name binary_file_detail
     * @type IBlob
     * @description Is visible only if user send own binary file ( OR state for c_program_detail)
     * @readonly
     */
    binary_file_detail?: IBlob;
    /**
     * @name bootloader_detail
     * @type IBootloaderUpdateProgram
     * @description Is visible only if update is for Bootloader
     * @readonly
     */
    bootloader_detail?: IBootloaderUpdateProgram;
    /**
     * @name c_program_detail
     * @type ICProgramUpdateProgram
     * @description Is visible only if update is for Firmware or Backup
     * @readonly
     */
    c_program_detail?: ICProgramUpdateProgram;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name date_of_finish
     * @type string
     * @description UNIX time in ms
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_finish: string;
    /**
     * @name date_of_planing
     * @type string
     * @format date-time
     * @readonly
     */
    date_of_planing?: string;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name error
     * @type string
     * @description Only if state is critical_error or Homer record some error
     */
    error?: string;
    /**
     * @name error_code
     * @type number
     * @description Only if state is critical_error or Homer record some error
     * @format int32
     */
    error_code?: number;
    /**
     * @name firmware_type
     * @type ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI")
     * @required
     */
    firmware_type: ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI");
    /**
     * @name hardware
     * @type IShortReference
     * @readonly
     * @required
     */
    hardware: IShortReference;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name state
     * @type ("COMPLETE"|"CANCELED"|"BIN_FILE_MISSING"|"NOT_YET_STARTED"|"PROHIBITED_BY_CONFIG"|"IN_PROGRESS"|"OBSOLETE"|"NOT_UPDATED"|"WAITING_FOR_DEVICE"|"INSTANCE_INACCESSIBLE"|"HOMER_SERVER_IS_OFFLINE"|"HOMER_SERVER_NEVER_CONNECTED"|"CRITICAL_ERROR")
     * @required
     */
    state: ("COMPLETE"|"CANCELED"|"BIN_FILE_MISSING"|"NOT_YET_STARTED"|"PROHIBITED_BY_CONFIG"|"IN_PROGRESS"|"OBSOLETE"|"NOT_UPDATED"|"WAITING_FOR_DEVICE"|"INSTANCE_INACCESSIBLE"|"HOMER_SERVER_IS_OFFLINE"|"HOMER_SERVER_NEVER_CONNECTED"|"CRITICAL_ERROR");
    /**
     * @name type_of_update
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")
     * @readonly
     */
    type_of_update?: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IHardwareGroupDeviceListEdit
 * @description: Json Model for new Hardware Group edit group of devices or group of hardware
 */
export interface IHardwareGroupDeviceListEdit {
    /**
     * @name device_synchro
     * @type IHardwareGroupDeviceListEditDevice
     */
    device_synchro?: IHardwareGroupDeviceListEditDevice;
    /**
     * @name group_synchro
     * @type IHardwareGroupDeviceListEditGroup
     */
    group_synchro?: IHardwareGroupDeviceListEditGroup;
}


/**
 * @name IHardwareGroupDeviceListEditDevice
 * @description: Json Model for new Hardware Group edit group of devices or group of hardware
 */
export interface IHardwareGroupDeviceListEditDevice {
    /**
     * @name hardware_group_ids
     * @type string[]
     * @required
     */
    hardware_group_ids: string[];
    /**
     * @name hardware_id
     * @type string
     * @format uuid
     * @required
     */
    hardware_id: string;
}


/**
 * @name IHardwareGroupDeviceListEditGroup
 * @description: Json Model for new Hardware Group edit group of devices or group of hardware
 */
export interface IHardwareGroupDeviceListEditGroup {
    /**
     * @name group_id
     * @type string
     * @format uuid
     * @required
     */
    group_id: string;
    /**
     * @name hardware_ids
     * @type string[]
     * @required
     */
    hardware_ids: string[];
}


/**
 * @name IHardwareList
 * @description: Individual Hardware List
 */
export interface IHardwareList {
    /**
     * @name content
     * @type IHardware[]
     * @readonly
     * @required
     */
    content: IHardware[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IHardwareNewPassword
 * @description: Interface IHardwareNewPassword definition
 */
export interface IHardwareNewPassword {
    /**
     * @name mqtt_password
     * @type string
     * @readonly
     * @required
     */
    mqtt_password: string;
    /**
     * @name mqtt_username
     * @type string
     * @readonly
     * @required
     */
    mqtt_username: string;
}


/**
 * @name IHardwareNewSettingsResult
 * @description: Json Model with settings and firwmare and bootloader for Embedded hardware
 */
export interface IHardwareNewSettingsResult {
    /**
     * @name configuration
     * @type IHardwareNewSettingsResultConfiguration
     * @readonly
     * @required
     */
    configuration: IHardwareNewSettingsResultConfiguration;
    /**
     * @name full_id
     * @type string
     * @readonly
     */
    full_id?: string;
}


/**
 * @name IHardwareNewSettingsResultConfiguration
 * @description: Interface IHardwareNewSettingsResultConfiguration definition
 */
export interface IHardwareNewSettingsResultConfiguration {
    /**
     * @name autobackup
     * @type boolean
     * @readonly
     * @required
     */
    autobackup: boolean;
    /**
     * @name autojump
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    autojump: number;
    /**
     * @name backup_mqtt_hostname
     * @type string
     * @readonly
     * @required
     */
    backup_mqtt_hostname: string;
    /**
     * @name backup_mqtt_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    backup_mqtt_port: number;
    /**
     * @name blreport
     * @type boolean
     * @readonly
     * @required
     */
    blreport: boolean;
    /**
     * @name lowpanbr
     * @type boolean
     * @readonly
     * @required
     */
    lowpanbr: boolean;
    /**
     * @name mac
     * @type string
     * @readonly
     * @required
     */
    mac: string;
    /**
     * @name mqtt_password
     * @type string
     * @readonly
     * @required
     */
    mqtt_password: string;
    /**
     * @name mqtt_username
     * @type string
     * @readonly
     * @required
     */
    mqtt_username: string;
    /**
     * @name netsource
     * @type string
     * @readonly
     * @required
     */
    netsource: string;
    /**
     * @name normal_mqtt_hostname
     * @type string
     * @readonly
     * @required
     */
    normal_mqtt_hostname: string;
    /**
     * @name normal_mqtt_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    normal_mqtt_port: number;
    /**
     * @name timeoffset
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    timeoffset: number;
    /**
     * @name timesync
     * @type boolean
     * @readonly
     * @required
     */
    timesync: boolean;
    /**
     * @name wdenable
     * @type boolean
     * @readonly
     * @required
     */
    wdenable: boolean;
    /**
     * @name wdtime
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    wdtime: number;
    /**
     * @name webport
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    webport: number;
    /**
     * @name webview
     * @type boolean
     * @readonly
     * @required
     */
    webview: boolean;
}


/**
 * @name IHardwareRegistrationHash
 * @description: Only For Admins
 */
export interface IHardwareRegistrationHash {
    /**
     * @name hash
     * @type string
     * @required
     */
    hash: string;
}


/**
 * @name IHomerServer
 * @description: Model of HomerServer
 */
export interface IHomerServer {
    /**
     * @name connection_identificator
     * @type string
     * @readonly
     */
    connection_identificator?: string;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name days_in_archive
     * @type number
     * @format int32
     * @required
     */
    days_in_archive: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name deployment_in_progress
     * @type boolean
     * @description Visible only when server is in deployment state
     * @readonly
     */
    deployment_in_progress?: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name grid_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    grid_port: number;
    /**
     * @name hardware_logger_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    hardware_logger_port: number;
    /**
     * @name hash_certificate
     * @type string
     * @readonly
     */
    hash_certificate?: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name interactive
     * @type boolean
     * @required
     */
    interactive: boolean;
    /**
     * @name log_level
     * @type ("ERROR"|"WARN"|"INFO"|"DEBUG"|"TRACE")
     * @required
     */
    log_level: ("ERROR"|"WARN"|"INFO"|"DEBUG"|"TRACE");
    /**
     * @name logging
     * @type boolean
     * @required
     */
    logging: boolean;
    /**
     * @name mqtt_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    mqtt_port: number;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER")
     * @readonly
     * @required
     */
    online_state: ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER");
    /**
     * @name rest_api_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    rest_api_port: number;
    /**
     * @name server_type
     * @type ("PUBLIC"|"PRIVATE"|"BACKUP"|"MAIN"|"TEST")
     * @required
     */
    server_type: ("PUBLIC"|"PRIVATE"|"BACKUP"|"MAIN"|"TEST");
    /**
     * @name server_url
     * @type string
     * @readonly
     * @required
     */
    server_url: string;
    /**
     * @name server_version
     * @type string
     * @readonly
     * @required
     */
    server_version: string;
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name time_stamp_configuration
     * @type string
     * @format date-time
     * @required
     */
    time_stamp_configuration: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name web_view_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    web_view_port: number;
}


/**
 * @name IHomerServerFilter
 * @description: Json Model for Filtering Homer Servers
 */
export interface IHomerServerFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name project_id
     * @type string
     * @format uuid
     */
    project_id?: string;
    /**
     * @name server_types
     * @type ("PUBLIC"|"PRIVATE"|"BACKUP"|"MAIN"|"TEST")[]
     * @description Default if empty is public
     */
    server_types?: ("PUBLIC"|"PRIVATE"|"BACKUP"|"MAIN"|"TEST")[];
}


/**
 * @name IHomerServerList
 * @description: Individual Homer Server List
 */
export interface IHomerServerList {
    /**
     * @name content
     * @type IHomerServer[]
     * @readonly
     * @required
     */
    content: IHomerServer[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IInstance
 * @description: Model of Instance
 */
export interface IInstance {
    /**
     * @name b_program
     * @type IShortReference
     */
    b_program?: IShortReference;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name current_snapshot
     * @type IInstanceSnapshot
     * @readonly
     */
    current_snapshot?: IInstanceSnapshot;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name instance_remote_url
     * @type string
     * @readonly
     * @required
     */
    instance_remote_url: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER")
     * @readonly
     * @required
     */
    online_state: ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER");
    /**
     * @name server
     * @type IHomerServer
     * @readonly
     */
    server?: IHomerServer;
    /**
     * @name snapshots
     * @type IShortReference[]
     */
    snapshots?: IShortReference[];
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IInstanceSnapshot
 * @description: Model of InstanceSnapshot
 */
export interface IInstanceSnapshot {
    /**
     * @name b_program
     * @type IShortReference
     * @readonly
     */
    b_program?: IShortReference;
    /**
     * @name b_program_version
     * @type IShortReference
     */
    b_program_version?: IShortReference;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name deployed
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    deployed: number;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name m_projects
     * @type IBProgramVersionSnapGridProject[]
     * @readonly
     */
    m_projects?: IBProgramVersionSnapGridProject[];
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name program
     * @type IInstanceSnapshotJsonFile
     * @description only if snapshot is main
     */
    program?: IInstanceSnapshotJsonFile;
    /**
     * @name settings
     * @type ISwaggerInstanceSnapShotConfiguration
     * @readonly
     */
    settings?: ISwaggerInstanceSnapShotConfiguration;
    /**
     * @name stopped
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    stopped: number;
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name updates
     * @type IUpdateProcedure[]
     * @description only if snapshot is main
     * @readonly
     */
    updates?: IUpdateProcedure[];
}


/**
 * @name IInstanceSnapshotDeploy
 * @description: Json Model for new Version of B_Program
 */
export interface IInstanceSnapshotDeploy {
    /**
     * @name snapshot_id
     * @type string
     * @format uuid
     * @required
     */
    snapshot_id: string;
    /**
     * @name upload_time
     * @type number
     * @description UNIX time in millis - Date: number of milliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int64
     */
    upload_time?: number;
}


/**
 * @name IInstanceSnapshotJsonFile
 * @description: Interface IInstanceSnapshotJsonFile definition
 */
export interface IInstanceSnapshotJsonFile {
    /**
     * @name interfaces
     * @type IInstanceSnapshotJsonFileInterface[]
     * @required
     */
    interfaces: IInstanceSnapshotJsonFileInterface[];
    /**
     * @name snapshot
     * @type string
     * @required
     */
    snapshot: string;
}


/**
 * @name IInstanceSnapshotJsonFileInterface
 * @description: Interface IInstanceSnapshotJsonFileInterface definition
 */
export interface IInstanceSnapshotJsonFileInterface {
    /**
     * @name interface_id
     * @type string
     * @format uuid
     * @required
     */
    interface_id: string;
    /**
     * @name target_id
     * @type string
     * @format uuid
     * @required
     */
    target_id: string;
    /**
     * @name type
     * @type ("group"|"hardware")
     * @required
     */
    type: ("group"|"hardware");
}


/**
 * @name IInstanceSnapshotNew
 * @description: Interface IInstanceSnapshotNew definition
 */
export interface IInstanceSnapshotNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name interfaces
     * @type IInstanceSnapshotJsonFileInterface[]
     * @required
     */
    interfaces: IInstanceSnapshotJsonFileInterface[];
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name snapshot
     * @type string
     * @required
     */
    snapshot: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
    /**
     * @name version_id
     * @type string
     * @format uuid
     * @required
     */
    version_id: string;
}


/**
 * @name IInstanceFilter
 * @description: Interface IInstanceFilter definition
 */
export interface IInstanceFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name instance_types
     * @type string[]
     */
    instance_types?: string[];
    /**
     * @name project_id
     * @type string
     * @format uuid
     */
    project_id?: string;
    /**
     * @name server_unique_ids
     * @type string[]
     */
    server_unique_ids?: string[];
}


/**
 * @name IInstanceList
 * @description: List of instances by Filter Query
 */
export interface IInstanceList {
    /**
     * @name content
     * @type IInstance[]
     * @readonly
     * @required
     */
    content: IInstance[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IInstanceNew
 * @description: Interface IInstanceNew definition
 */
export interface IInstanceNew {
    /**
     * @name b_program_id
     * @type string
     * @format uuid
     * @required
     */
    b_program_id: string;
    /**
     * @name backup_server_id
     * @type string
     * @description Optional and not supported value now
     * @format uuid
     */
    backup_server_id?: string;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name main_server_id
     * @type string
     * @format uuid
     * @required
     */
    main_server_id: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Provide project id if you want to create private object
     * @format uuid
     * @required
     */
    project_id: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IInvitePerson
 * @description: Json Model for sharing project with Persons, invite to permission group etc..
 */
export interface IInvitePerson {
    /**
     * @name persons_mail
     * @type string[]
     * @required
     */
    persons_mail: string[];
}


/**
 * @name IInvoice
 * @description: Model of Invoice
 */
export interface IInvoice {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name gw_url
     * @type string
     * @description Visible only when the invoice is not paid
     */
    gw_url?: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name invoice_items
     * @type IInvoiceItem[]
     * @readonly
     * @required
     */
    invoice_items: IInvoiceItem[];
    /**
     * @name invoice_number
     * @type string
     * @readonly
     * @required
     */
    invoice_number: string;
    /**
     * @name invoice_pdf_link
     * @type string
     * @description Visible only when the invoice is available
     * @readonly
     */
    invoice_pdf_link?: string;
    /**
     * @name overdue
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    overdue: number;
    /**
     * @name paid
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     */
    paid?: number;
    /**
     * @name payment_method
     * @type string
     * @readonly
     * @required
     */
    payment_method: string;
    /**
     * @name payment_status
     * @type string
     * @readonly
     * @required
     */
    payment_status: string;
    /**
     * @name price
     * @type number
     * @format double
     * @readonly
     * @required
     */
    price: number;
    /**
     * @name proforma_pdf_link
     * @type string
     * @description Visible only when the invoice is available
     * @readonly
     */
    proforma_pdf_link?: string;
    /**
     * @name require_payment
     * @type boolean
     * @description Visible only when the invoice is not paid
     * @readonly
     */
    require_payment?: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IInvoiceItem
 * @description: Model of InvoiceItem
 */
export interface IInvoiceItem {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name currency
     * @type ("CZK"|"EUR"|"USD")
     * @required
     */
    currency: ("CZK"|"EUR"|"USD");
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name quantity
     * @type number
     * @format int64
     * @required
     */
    quantity: number;
    /**
     * @name unit_name
     * @type string
     * @required
     */
    unit_name: string;
    /**
     * @name unit_price
     * @type number
     * @format double
     */
    unit_price?: number;
    /**
     * @name unit_price_without_vat
     * @type number
     * @format double
     * @readonly
     */
    unit_price_without_vat?: number;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name vat
     * @type number
     * @format int64
     * @required
     */
    vat: number;
    /**
     * @name vat_rate
     * @type string
     * @readonly
     */
    vat_rate?: string;
}


/**
 * @name IInvoiceFullDetails
 * @description: Json Model for new Producer
 */
export interface IInvoiceFullDetails {
    /**
     * @name invoice
     * @type IInvoice
     * @required
     */
    invoice: IInvoice;
    /**
     * @name invoice_items
     * @type IInvoiceItem[]
     * @required
     */
    invoice_items: IInvoiceItem[];
}


/**
 * @name ILibrary
 * @description: Model of Library
 */
export interface ILibrary {
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with Permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name hardware_types
     * @type IHardwareType[]
     * @required
     */
    hardware_types: IHardwareType[];
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @required
     */
    publish_type: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name versions
     * @type ILibraryVersion[]
     */
    versions?: ILibraryVersion[];
}


/**
 * @name ILibraryVersion
 * @description: Model of LibraryVersion
 */
export interface ILibraryVersion {
    /**
     * @name approval_state
     * @type ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED")
     * @description Only if user make request for publishing
     */
    approval_state?: ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED");
    /**
     * @name author
     * @type IPerson
     * @description Visible only if user has permission to know it
     * @readonly
     */
    author?: IPerson;
    /**
     * @name c_rpogram_examples
     * @type IShortReference[]
     * @readonly
     * @required
     */
    c_rpogram_examples: IShortReference[];
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name files
     * @type ILibraryRecord[]
     * @readonly
     * @required
     */
    files: ILibraryRecord[];
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name ILibraryCopy
 * @description: Json Model for copy Library
 */
export interface ILibraryCopy {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name library_id
     * @type string
     * @format uuid
     * @required
     */
    library_id: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Provide project id if you want to create private object
     * @format uuid
     * @required
     */
    project_id: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ILibraryFilter
 * @description: Json Model for getting Library Filter List
 */
export interface ILibraryFilter {
    /**
     * @name count_on_page
     * @type number
     * @description number of objects per page, min value is 1, max value is 50, default is 25. It's optional
     * @format int32
     */
    count_on_page?: number;
    /**
     * @name pending_library
     * @type boolean
     * @description Designed for Administrators for publishing decisions of Community Codes - Without permission, the value is ignored. 
     */
    pending_library?: boolean;
    /**
     * @name project_id
     * @type string
     * @format uuid
     */
    project_id?: string;
    /**
     * @name public_library
     * @type boolean
     * @description Show - All Public Programs which are confirmed and approved.
     */
    public_library?: boolean;
}


/**
 * @name ILibraryLibraryVersionPair
 * @description: Json Model for Pair With detail of Library and Version of Library
 */
export interface ILibraryLibraryVersionPair {
    /**
     * @name library
     * @type IShortReference
     * @required
     */
    library: IShortReference;
    /**
     * @name library_version
     * @type IShortReference
     * @required
     */
    library_version: IShortReference;
}


/**
 * @name ILibraryList
 * @description: Individual Library List
 */
export interface ILibraryList {
    /**
     * @name content
     * @type ILibrary[]
     * @readonly
     * @required
     */
    content: ILibrary[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ILibraryNew
 * @description: Json Model for new Library
 */
export interface ILibraryNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Provide project id if you want to create private object
     * @format uuid
     */
    project_id?: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ILibraryRecord
 * @description: Json Model for Library_Record
 */
export interface ILibraryRecord {
    /**
     * @name content
     * @type string
     * @required
     */
    content: string;
    /**
     * @name file_name
     * @type string
     * @required
     */
    file_name: string;
}


/**
 * @name ILibraryVersionNew
 * @description: Json Model for new Version of Library
 */
export interface ILibraryVersionNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name files
     * @type ILibraryRecord[]
     */
    files?: ILibraryRecord[];
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ILoginResult
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginResult {
    /**
     * @name permissions
     * @type string[]
     * @description List of all person permission (private and all collections from Person Roles ("SecurityRole") 
     * @readonly
     */
    permissions?: string[];
    /**
     * @name person
     * @type IPerson
     * @readonly
     */
    person?: IPerson;
    /**
     * @name roles
     * @type IRole[]
     * @description List of roles, that
     * @readonly
     */
    roles?: IRole[];
}


/**
 * @name ILoginToken
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginToken {
    /**
     * @name auth_token
     * @type string
     * @description X-AUTH-TOKEN - used this token in HTML head for verifying the identities
     * @format uuid
     * @readonly
     * @required
     */
    auth_token: string;
}


/**
 * @name IMProgramSnapShot
 * @description: Interface IMProgramSnapShot definition
 */
export interface IMProgramSnapShot {
    /**
     * @name m_program_id
     * @type string
     * @format uuid
     * @required
     */
    m_program_id: string;
    /**
     * @name version_id
     * @type string
     * @format uuid
     * @required
     */
    version_id: string;
}


/**
 * @name IMProgramVersionInterface
 * @description: Json Model for Version of M_program
 */
export interface IMProgramVersionInterface {
    /**
     * @name version
     * @type IGridProgramVersion
     * @readonly
     * @required
     */
    version: IGridProgramVersion;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramVersionNew
 * @description: Json Model for new Version of M_program
 */
export interface IMProgramVersionNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name m_code
     * @type string
     * @required
     */
    m_code: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name public_access
     * @type boolean
     * @description if value is true - program can be open throw the QR token (public) by everyone!
     */
    public_access?: boolean;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
    /**
     * @name virtual_input_output
     * @type string
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramInterface
 * @description: Json Model that contain values with accessible interface of virtual_input_output under M_programs (auto_incrementing == false) or head M_Program.virtual_input_output if auto_incrementing is True
 */
export interface IMProgramInterface {
    /**
     * @name accessible_versions
     * @type IMProgramVersionInterface[]
     * @required
     */
    accessible_versions: IMProgramVersionInterface[];
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
}


/**
 * @name IMProjectSnapShot
 * @description: Interface IMProjectSnapShot definition
 */
export interface IMProjectSnapShot {
    /**
     * @name m_program_snapshots
     * @type IMProgramSnapShot[]
     * @description Connected hardware
     * @required
     */
    m_program_snapshots: IMProgramSnapShot[];
    /**
     * @name m_project_id
     * @type string
     * @format uuid
     * @required
     */
    m_project_id: string;
}


/**
 * @name IMProjectInterface
 * @description: Json Model that contain values with accessible interface of virtual_input_output under M_project (auto_incrementing == false) or head M_project.M_program.virtual_input_output if auto_incrementing is True
 */
export interface IMProjectInterface {
    /**
     * @name accessible_interface
     * @type IMProgramInterface[]
     * @readonly
     * @required
     */
    accessible_interface: IMProgramInterface[];
    /**
     * @name auto_incrementing
     * @type boolean
     * @readonly
     */
    auto_incrementing?: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     */
    description?: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name INameAndDescProjectIdOptional
 * @description: Json Model for crating new Block Model
 */
export interface INameAndDescProjectIdOptional {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Provide project id if you want to create private object
     * @format uuid
     */
    project_id?: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name INameAndDescProjectIdRequired
 * @description: Json pattern for crating new object with name, description and required project id.
 */
export interface INameAndDescProjectIdRequired {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Provide project id if you want to create private object
     * @format uuid
     * @required
     */
    project_id: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name INameAndDescription
 * @description: Json Model with name and description
 */
export interface INameAndDescription {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name INotification
 * @description: Model of Notification
 */
export interface INotification {
    /**
     * @name buttons
     * @type INotificationButton[]
     * @readonly
     */
    buttons?: INotificationButton[];
    /**
     * @name confirmation_required
     * @type boolean
     * @required
     */
    confirmation_required: boolean;
    /**
     * @name confirmed
     * @type boolean
     * @required
     */
    confirmed: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name message_channel
     * @type string
     * @readonly
     * @required
     */
    message_channel: string;
    /**
     * @name message_type
     * @type string
     * @readonly
     * @required
     */
    message_type: string;
    /**
     * @name notification_body
     * @type INotificationElement[]
     * @readonly
     * @required
     */
    notification_body: INotificationElement[];
    /**
     * @name notification_importance
     * @type ("LOW"|"NORMAL"|"HIGH")
     * @required
     */
    notification_importance: ("LOW"|"NORMAL"|"HIGH");
    /**
     * @name notification_level
     * @type ("INFO"|"SUCCESS"|"WARNING"|"ERROR")
     * @required
     */
    notification_level: ("INFO"|"SUCCESS"|"WARNING"|"ERROR");
    /**
     * @name notification_type
     * @type ("CHAIN_START"|"CHAIN_UPDATE"|"CHAIN_END"|"INDIVIDUAL")
     * @required
     */
    notification_type: ("CHAIN_START"|"CHAIN_UPDATE"|"CHAIN_END"|"INDIVIDUAL");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name was_read
     * @type boolean
     * @required
     */
    was_read: boolean;
}


/**
 * @name INotificationButton
 * @description: Json Model for notification buttons
 */
export interface INotificationButton {
    /**
     * @name action
     * @type ("ACCEPT_PROJECT_INVITATION"|"REJECT_PROJECT_INVITATION"|"CONFIRM_NOTIFICATION")
     * @required
     */
    action: ("ACCEPT_PROJECT_INVITATION"|"REJECT_PROJECT_INVITATION"|"CONFIRM_NOTIFICATION");
    /**
     * @name bold
     * @type boolean
     * @required
     */
    bold: boolean;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name italic
     * @type boolean
     * @required
     */
    italic: boolean;
    /**
     * @name payload
     * @type string
     * @required
     */
    payload: string;
    /**
     * @name text
     * @type string
     * @required
     */
    text: string;
    /**
     * @name underline
     * @type boolean
     * @required
     */
    underline: boolean;
}


/**
 * @name INotificationConfirm
 * @description: Json Model for confirming notification
 */
export interface INotificationConfirm {
    /**
     * @name action
     * @type ("ACCEPT_PROJECT_INVITATION"|"REJECT_PROJECT_INVITATION"|"CONFIRM_NOTIFICATION")
     * @description Notification_action
     * @required
     */
    action: ("ACCEPT_PROJECT_INVITATION"|"REJECT_PROJECT_INVITATION"|"CONFIRM_NOTIFICATION");
    /**
     * @name payload
     * @type string
     * @description Notification payload
     * @required
     */
    payload: string;
}


/**
 * @name INotificationElement
 * @description: Json Model for notification body elements
 */
export interface INotificationElement {
    /**
     * @name bold
     * @type boolean
     * @required
     */
    bold: boolean;
    /**
     * @name button
     * @type boolean
     * @required
     */
    button: boolean;
    /**
     * @name color
     * @type string
     */
    color?: string;
    /**
     * @name date
     * @type string
     * @format date-time
     */
    date?: string;
    /**
     * @name id
     * @type string
     * @format uuid
     */
    id?: string;
    /**
     * @name italic
     * @type boolean
     * @required
     */
    italic: boolean;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name program_id
     * @type string
     * @format uuid
     */
    program_id?: string;
    /**
     * @name project_id
     * @type string
     * @format uuid
     */
    project_id?: string;
    /**
     * @name text
     * @type string
     */
    text?: string;
    /**
     * @name type
     * @type ("LINK"|"OBJECT"|"TEXT"|"DATE"|"NEW_LINE")
     * @required
     */
    type: ("LINK"|"OBJECT"|"TEXT"|"DATE"|"NEW_LINE");
    /**
     * @name underline
     * @type boolean
     * @required
     */
    underline: boolean;
    /**
     * @name url
     * @type string
     */
    url?: string;
}


/**
 * @name INotificationList
 * @description: Individual Notification List
 */
export interface INotificationList {
    /**
     * @name content
     * @type INotification[]
     * @readonly
     * @required
     */
    content: INotification[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
    /**
     * @name unread_total
     * @type number
     * @description Total unread subjects
     * @format int32
     * @readonly
     * @required
     */
    unread_total: number;
}


/**
 * @name INotificationRead
 * @description: Json Model for List with ids of read notifications
 */
export interface INotificationRead {
    /**
     * @name notification_id
     * @type string[]
     * @description List of notification.id
     * @required
     */
    notification_id: string[];
}


/**
 * @name IPair
 * @description: Interface IPair definition
 */
export interface IPair {
    /**
     * @name json_identifier
     * @type string
     * @readonly
     * @required
     */
    json_identifier: string;
    /**
     * @name user_description
     * @type string
     * @readonly
     * @required
     */
    user_description: string;
}


/**
 * @name IPaymentDetailsNew
 * @description: Json Model with List of Board ID
 */
export interface IPaymentDetailsNew {
    /**
     * @name city
     * @type string
     * @description Required: alwaysThe city must have at least 4 characters
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     * @description Required: only if user want have business account
     */
    company_account?: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_name
     * @type string
     * @description Required: only if company_account = trueThe company_name must have at least 4 characters
     */
    company_name?: string;
    /**
     * @name company_registration_no
     * @type string
     * @description Required: only if company_account = trueThe company_registration_no must have at least 4 characters
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Required: only if company_account = true And VAT_number is required only for EU Customers.The VAT_number must have at least 4 characters
     * @example CZ12345678
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if company_account = trueThe company_web url must be valid 
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Required: alwaysThe country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name invoice_email
     * @type string
     * @description Required: always. Email must be valid
     * @required
     */
    invoice_email: string;
    /**
     * @name method
     * @type ("BANK_TRANSFER"|"CREDIT_CARD"|"CREDIT"|"FREE")
     * @description Payment method.
     * @required
     */
    method: ("BANK_TRANSFER"|"CREDIT_CARD"|"CREDIT"|"FREE");
    /**
     * @name street
     * @type string
     * @description Required: alwaysThe street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: alwaysBut The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name zip_code
     * @type string
     * @description Required: alwaysThe zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name IPaymentDetails
 * @description: Model of Payment_Details
 */
export interface IPaymentDetails {
    /**
     * @name bank_account
     * @type string
     * @description Used for billing and invoices
     */
    bank_account?: string;
    /**
     * @name city
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     * @required
     */
    company_account: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_phone?: string;
    /**
     * @name company_name
     * @type string
     * @description Only if Product is for business
     */
    company_name?: string;
    /**
     * @name company_registration_no
     * @type string
     * @description Only if Product is for business
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Only if Product is for business
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     * @description Only if Product is for business
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    country: string;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name full_name
     * @type string
     * @description Used for billing and invoices
     */
    full_name?: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name invoice_email
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    invoice_email: string;
    /**
     * @name street
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street_number: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name zip_code
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    zip_code: string;
}


/**
 * @name IPermission
 * @description: Model of Permission
 */
export interface IPermission {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IPermissionEdit
 * @description: Json Model for change description for Permission
 */
export interface IPermissionEdit {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
}


/**
 * @name IPerson
 * @description: Interface IPerson definition
 */
export interface IPerson {
    /**
     * @name country
     * @type string
     * @required
     */
    country: string;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name email
     * @type string
     * @required
     */
    email: string;
    /**
     * @name first_name
     * @type string
     * @required
     */
    first_name: string;
    /**
     * @name gender
     * @type string
     * @required
     */
    gender: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name last_name
     * @type string
     * @required
     */
    last_name: string;
    /**
     * @name nick_name
     * @type string
     * @required
     */
    nick_name: string;
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IPersonChangeProperty
 * @description: Json Model for changing Person property
 */
export interface IPersonChangeProperty {
    /**
     * @name email
     * @type string
     * @description Valid email
     */
    email?: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     */
    password?: string;
    /**
     * @name property
     * @type string
     * @description Required property ('password' or 'email')
     * @required
     */
    property: string;
}


/**
 * @name IPersonNew
 * @description: Json Model for creating new Person
 */
export interface IPersonNew {
    /**
     * @name email
     * @type string
     * @required
     */
    email: string;
    /**
     * @name first_name
     * @type string
     * @description The full_name is not required. Max lenght is 60 characters.
     * @required
     */
    first_name: string;
    /**
     * @name last_name
     * @type string
     * @description The full_name is not required. Max lenght is 60 characters.
     * @required
     */
    last_name: string;
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
}


/**
 * @name IPersonPasswordNew
 * @description: Json Model for recovering person password
 */
export interface IPersonPasswordNew {
    /**
     * @name email
     * @type string
     * @required
     */
    email: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
    /**
     * @name password_recovery_token
     * @type string
     * @description Required password_recovery_token
     * @required
     */
    password_recovery_token: string;
}


/**
 * @name IPersonUpdate
 * @description: Json Model for update Person. (For password or email, you have to used separate API)
 */
export interface IPersonUpdate {
    /**
     * @name country
     * @type string
     * @description Where does the user come from.
     */
    country?: string;
    /**
     * @name first_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     */
    first_name?: string;
    /**
     * @name gender
     * @type ("male"|"female")
     * @description Gender of the user.
     */
    gender?: ("male"|"female");
    /**
     * @name last_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     */
    last_name?: string;
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
}


/**
 * @name IPrinter
 * @description: Interface IPrinter definition
 */
export interface IPrinter {
    /**
     * @name computer
     * @type IComputer
     * @required
     */
    computer: IComputer;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type number
     * @format int32
     * @required
     */
    id: number;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name state
     * @type string
     * @required
     */
    state: string;
}


/**
 * @name IProcessor
 * @description: Model of Processor
 */
export interface IProcessor {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name processor_code
     * @type string
     * @required
     */
    processor_code: string;
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IProcessorNew
 * @description: Json Model for new Processor
 */
export interface IProcessorNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name processor_code
     * @type string
     * @description The Processor Code must have at least 4 characters
     * @required
     */
    processor_code: string;
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IProducer
 * @description: Model of Producer
 */
export interface IProducer {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IProduct
 * @description: Model of Product
 */
export interface IProduct {
    /**
     * @name active
     * @type boolean
     * @required
     */
    active: boolean;
    /**
     * @name client_billing
     * @type boolean
     * @required
     */
    client_billing: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name customer
     * @type ICustomer
     * @required
     */
    customer: ICustomer;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name extensions
     * @type IProductExtension[]
     * @required
     */
    extensions: IProductExtension[];
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name invoices
     * @type IInvoice[]
     * @required
     */
    invoices: IInvoice[];
    /**
     * @name method
     * @type ("BANK_TRANSFER"|"CREDIT_CARD"|"CREDIT"|"FREE")
     * @required
     */
    method: ("BANK_TRANSFER"|"CREDIT_CARD"|"CREDIT"|"FREE");
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name payment_details
     * @type IPaymentDetails
     * @required
     */
    payment_details: IPaymentDetails;
    /**
     * @name remaining_credit
     * @type number
     * @format double
     * @readonly
     */
    remaining_credit?: number;
    /**
     * @name subscription_id
     * @type string
     * @required
     */
    subscription_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IProductExtension
 * @description: Model of ProductExtension
 */
export interface IProductExtension {
    /**
     * @name active
     * @type boolean
     * @required
     */
    active: boolean;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name config
     * @type string
     * @description Visible only for Administrator with Special Permission
     * @readonly
     */
    config?: string;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name order_position
     * @type number
     * @format int32
     * @required
     */
    order_position: number;
    /**
     * @name price
     * @type number
     * @format double
     * @readonly
     * @required
     */
    price: number;
    /**
     * @name type
     * @type ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant")
     * @required
     */
    type: ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IProductExtensionEdit
 * @description: Json Model for updating extension of product.
 */
export interface IProductExtensionEdit {
    /**
     * @name color
     * @type string
     * @description Color
     */
    color?: string;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IProductExtensionNew
 * @description: Json Model for creating new extension of product.
 */
export interface IProductExtensionNew {
    /**
     * @name color
     * @type string
     * @description Color of extension
     * @required
     */
    color: string;
    /**
     * @name config
     * @type string
     * @required
     */
    config: string;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name extension_type
     * @type string
     * @description Enumerated type of extension
     * @required
     */
    extension_type: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IProductExtensionType
 * @description: Json Model for ProductExtension_Type
 */
export interface IProductExtensionType {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type
     * @type string
     * @readonly
     * @required
     */
    type: string;
}


/**
 * @name IProductCredit
 * @description: Json Model for buying credit for Product
 */
export interface IProductCredit {
    /**
     * @name credit
     * @type number
     * @description Double number - amount of credit to be bought.
     * @format double
     * @required
     */
    credit: number;
}


/**
 * @name IProductNew
 * @description: Json Model if user wants to create new Product for projects
 */
export interface IProductNew {
    /**
     * @name city
     * @type string
     * @description The city must have at least 2 characters
     */
    city?: string;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if account is businessThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if account is businessThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_name
     * @type string
     * @description The company_name must have at least 2 characters
     */
    company_name?: string;
    /**
     * @name company_registration_no
     * @type string
     * @description Required: only if account is businessThe registration_no must have at least 3 characters - FOR non-EU countriesfor Business account is required registration_no OR vat_number
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Required: only if account is business & from EU!!! CZ28496639 The vat_number must have at least 3 charactersfor Business account is required registration_no OR vat_number
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if account is businessThe company_web must have at least 4 characters
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description The country must have at least 2 characters
     */
    country?: string;
    /**
     * @name customer_id
     * @type string
     * @description If null new customer is created. Customer can be company or single person.
     * @format uuid
     */
    customer_id?: string;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name extension_ids
     * @type string[]
     * @description List of Ids of Extensions
     */
    extension_ids?: string[];
    /**
     * @name full_name
     * @type string
     */
    full_name?: string;
    /**
     * @name integrator_registration
     * @type boolean
     * @description If product is for someone else and you are an integrator.
     */
    integrator_registration?: boolean;
    /**
     * @name invoice_email
     * @type string
     * @description Required: always, Email must be valid
     */
    invoice_email?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name payment_method
     * @type ("BANK_TRANSFER"|"CREDIT_CARD"|"CREDIT"|"FREE")
     * @description Allowable values =>[BANK_TRANSFER, CREDIT_CARD], default: CREDIT_CARD
     */
    payment_method?: ("BANK_TRANSFER"|"CREDIT_CARD"|"CREDIT"|"FREE");
    /**
     * @name street
     * @type string
     * @description The street must have at least 4 characters
     */
    street?: string;
    /**
     * @name street_number
     * @type string
     */
    street_number?: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
    /**
     * @name tariff_id
     * @type string
     * @description Id of a selected tariff.
     * @format uuid
     * @required
     */
    tariff_id: string;
    /**
     * @name zip_code
     * @type string
     * @description The zip_code must have at least 3 characters
     */
    zip_code?: string;
}


/**
 * @name IProject
 * @description: Model of Project
 */
export interface IProject {
    /**
     * @name active
     * @type boolean
     * @readonly
     * @required
     */
    active: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name participants
     * @type IProjectParticipant[]
     * @required
     */
    participants: IProjectParticipant[];
    /**
     * @name product
     * @type IShortReference
     * @required
     */
    product: IShortReference;
    /**
     * @name project_stats
     * @type IProjectStats
     * @description Its Asynchronous Cached Value and it visible only, when system has cached everything. If not, the system automatically searches for all data in a special thread, and when it gets it, it sends them to the client via Websocket. 
     */
    project_stats?: IProjectStats;
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IProjectStats
 * @description: Model of Project Statistic - Its Asynchronous Object created after all values in project are cached.
 */
export interface IProjectStats {
    /**
     * @name b_programs
     * @type number
     * @format int32
     * @required
     */
    b_programs: number;
    /**
     * @name blocks
     * @type number
     * @format int32
     * @required
     */
    blocks: number;
    /**
     * @name c_programs
     * @type number
     * @format int32
     * @required
     */
    c_programs: number;
    /**
     * @name grid_projects
     * @type number
     * @format int32
     * @required
     */
    grid_projects: number;
    /**
     * @name hardware
     * @type number
     * @format int32
     * @required
     */
    hardware: number;
    /**
     * @name hardware_groups
     * @type number
     * @format int32
     * @required
     */
    hardware_groups: number;
    /**
     * @name hardware_online
     * @type number
     * @format int32
     * @required
     */
    hardware_online: number;
    /**
     * @name instance_online
     * @type number
     * @format int32
     * @required
     */
    instance_online: number;
    /**
     * @name instances
     * @type number
     * @format int32
     * @required
     */
    instances: number;
    /**
     * @name libraries
     * @type number
     * @format int32
     * @required
     */
    libraries: number;
    /**
     * @name servers
     * @type number
     * @format int32
     * @required
     */
    servers: number;
    /**
     * @name servers_online
     * @type number
     * @format int32
     * @required
     */
    servers_online: number;
    /**
     * @name widgets
     * @type number
     * @format int32
     * @required
     */
    widgets: number;
}


/**
 * @name IProjectAddHardware
 * @description: Interface IProjectAddHardware definition
 */
export interface IProjectAddHardware {
    /**
     * @name group_ids
     * @type string[]
     */
    group_ids?: string[];
    /**
     * @name name
     * @type string
     * @description Optional value on Begging
     */
    name?: string;
    /**
     * @name project_id
     * @type string
     * @format uuid
     * @required
     */
    project_id: string;
    /**
     * @name registration_hash
     * @type string
     * @required
     */
    registration_hash: string;
}


/**
 * @name IProjectNew
 * @description: Json Model for new General Project
 */
export interface IProjectNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name product_id
     * @type string
     * @description Id of Product (Tariff) where the project will be registered
     * @format uuid
     * @required
     */
    product_id: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name IProjectParticipantStatus
 * @description: Json Model for changing Project_participant status
 */
export interface IProjectParticipantStatus {
    /**
     * @name person_id
     * @type string
     * @description Participant id
     * @format uuid
     * @required
     */
    person_id: string;
    /**
     * @name state
     * @type ("ADMIN"|"MEMBER")
     * @description Status
     * @required
     */
    state: ("ADMIN"|"MEMBER");
}


/**
 * @name IProjectParticipant
 * @description: Model of Project_participant
 */
export interface IProjectParticipant {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name email
     * @type string
     * @readonly
     * @required
     */
    email: string;
    /**
     * @name full_name
     * @type string
     * @readonly
     * @required
     */
    full_name: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name state
     * @type ("OWNER"|"ADMIN"|"MEMBER"|"INVITED")
     * @required
     */
    state: ("OWNER"|"ADMIN"|"MEMBER"|"INVITED");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IReportAdminDashboard
 * @description: Interface IReportAdminDashboard definition
 */
export interface IReportAdminDashboard {
    /**
     * @name board_registered
     * @type number
     * @format int32
     * @required
     */
    board_registered: number;
    /**
     * @name bugs_reported
     * @type number
     * @format int32
     * @required
     */
    bugs_reported: number;
    /**
     * @name compilation_server_public_created
     * @type number
     * @format int32
     * @required
     */
    compilation_server_public_created: number;
    /**
     * @name compilation_server_public_online
     * @type number
     * @format int32
     * @required
     */
    compilation_server_public_online: number;
    /**
     * @name homer_server_private_created
     * @type number
     * @format int32
     * @required
     */
    homer_server_private_created: number;
    /**
     * @name homer_server_private_online
     * @type number
     * @format int32
     * @required
     */
    homer_server_private_online: number;
    /**
     * @name homer_server_public_created
     * @type number
     * @format int32
     * @required
     */
    homer_server_public_created: number;
    /**
     * @name homer_server_public_online
     * @type number
     * @format int32
     * @required
     */
    homer_server_public_online: number;
    /**
     * @name person_registration
     * @type number
     * @format int32
     * @required
     */
    person_registration: number;
    /**
     * @name project_created
     * @type number
     * @format int32
     * @required
     */
    project_created: number;
}


/**
 * @name IResendEmail
 * @description: Json Model for change description for Permission
 */
export interface IResendEmail {
    /**
     * @name email
     * @type string
     * @description Email is optional value! If it is empty, default invoice email will be used.
     */
    email?: string;
}


/**
 * @name IResultBadRequest
 * @description: When is something wrong
 */
export interface IResultBadRequest {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IResultExternalServerSideError
 * @description: Unknown Error on external server 
 */
export interface IResultExternalServerSideError {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Internal Server Error
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IResultForbidden
 * @description: Permission is needed for this action.
 */
export interface IResultForbidden {
    /**
     * @name code
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("forbidden")
     * @readonly
     * @required
     */
    state: ("forbidden");
}


/**
 * @name IResultFound
 * @description: Requested entity was not found
 */
export interface IResultFound {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("not_found")
     * @description state
     * @readonly
     * @required
     */
    state: ("not_found");
}


/**
 * @name IResultInternalServerError
 * @description: When server is in fault state
 */
export interface IResultInternalServerError {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("internal_server_error")
     * @description state
     * @readonly
     * @required
     */
    state: ("internal_server_error");
}


/**
 * @name IResultInvalidBody
 * @description: Provided body is not valid. Something is missing or some field input is not allowed.
 */
export interface IResultInvalidBody {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("invalid_body")
     * @description state
     * @readonly
     * @required
     */
    state: ("invalid_body");
}


/**
 * @name IResultNotValidated
 * @description: When account is not validated.
 */
export interface IResultNotValidated {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("error_person_account_is_not_validated")
     * @description state
     * @readonly
     * @required
     */
    state: ("error_person_account_is_not_validated");
}


/**
 * @name IResultOk
 * @description: Interface IResultOk definition
 */
export interface IResultOk {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User. Server fills the message only when it is important
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("error_person_account_is_not_validated")
     * @description state
     * @readonly
     * @required
     */
    state: ("error_person_account_is_not_validated");
}


/**
 * @name IResultServerOffline
 * @description: External servers (compilation, blocko cloud_blocko_server etc.) are offline
 */
export interface IResultServerOffline {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("server_is_offline")
     * @description state
     * @readonly
     * @required
     */
    state: ("server_is_offline");
}


/**
 * @name IRole
 * @description: Model of Role
 */
export interface IRole {
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name permissions
     * @type IPermission[]
     * @required
     */
    permissions: IPermission[];
    /**
     * @name persons
     * @type IPerson[]
     * @required
     */
    persons: IPerson[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IRoleAddPermission
 * @description: Json Model for add list of Permission to Role
 */
export interface IRoleAddPermission {
    /**
     * @name permissions
     * @type string[]
     * @description List of permission keys
     * @required
     */
    permissions: string[];
}


/**
 * @name IServerError
 * @description: Model of ServerError
 */
export interface IServerError {
    /**
     * @name cause_message
     * @type string
     * @required
     */
    cause_message: string;
    /**
     * @name cause_stack_trace
     * @type string
     * @required
     */
    cause_stack_trace: string;
    /**
     * @name cause_type
     * @type string
     * @required
     */
    cause_type: string;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name message
     * @type string
     * @required
     */
    message: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name person
     * @type string
     * @required
     */
    person: string;
    /**
     * @name repetition
     * @type number
     * @format int64
     * @required
     */
    repetition: number;
    /**
     * @name request
     * @type string
     * @required
     */
    request: string;
    /**
     * @name stack_trace
     * @type string
     * @required
     */
    stack_trace: string;
    /**
     * @name type
     * @type string
     * @required
     */
    type: string;
    /**
     * @name tyrion
     * @type string
     * @required
     */
    tyrion: string;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name youtrack_url
     * @type string
     * @required
     */
    youtrack_url: string;
}


/**
 * @name IServerRegistrationFormData
 * @description: Interface IServerRegistrationFormData definition
 */
export interface IServerRegistrationFormData {
    /**
     * @name server_sizes
     * @type IServerRegistrationFormDataServerSize[]
     * @required
     */
    server_sizes: IServerRegistrationFormDataServerSize[];
}


/**
 * @name IServerRegistrationFormDataServerRegion
 * @description: Interface IServerRegistrationFormDataServerRegion definition
 */
export interface IServerRegistrationFormDataServerRegion {
    /**
     * @name available
     * @type boolean
     * @required
     */
    available: boolean;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name slug
     * @type string
     * @required
     */
    slug: string;
}


/**
 * @name IServerRegistrationFormDataServerSize
 * @description: Interface IServerRegistrationFormDataServerSize definition
 */
export interface IServerRegistrationFormDataServerSize {
    /**
     * @name alias
     * @type string
     * @required
     */
    alias: string;
    /**
     * @name available
     * @type string
     * @required
     */
    available: string;
    /**
     * @name memory
     * @type number
     * @format int32
     * @required
     */
    memory: number;
    /**
     * @name price_hourly
     * @type number
     * @required
     */
    price_hourly: number;
    /**
     * @name price_monthly
     * @type number
     * @required
     */
    price_monthly: number;
    /**
     * @name regions
     * @type IServerRegistrationFormDataServerRegion[]
     * @required
     */
    regions: IServerRegistrationFormDataServerRegion[];
    /**
     * @name slug
     * @type string
     * @required
     */
    slug: string;
    /**
     * @name vcpus
     * @type number
     * @format int32
     * @required
     */
    vcpus: number;
}


/**
 * @name IServerUpdate
 * @description: Json Model for scheduling server update.
 */
export interface IServerUpdate {
    /**
     * @name update_time
     * @type number
     * @description UNIX time in millis
     * @example 1466163478925
     * @format int32
     * @required
     */
    update_time: number;
    /**
     * @name version
     * @type string
     * @required
     */
    version: string;
}


/**
 * @name IServerUpdates
 * @description: Json Model with available server updates
 */
export interface IServerUpdates {
    /**
     * @name current
     * @type string
     * @required
     */
    current: string;
    /**
     * @name releases
     * @type IGitHubReleases[]
     * @required
     */
    releases: IGitHubReleases[];
    /**
     * @name schedule_release
     * @type string
     * @required
     */
    schedule_release: string;
    /**
     * @name schedule_release_time
     * @type string
     * @format date-time
     * @required
     */
    schedule_release_time: string;
}


/**
 * @name IShortReference
 * @description: Model of Reference
 */
export interface IShortReference {
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER")
     * @description Only for Special Object type like Server, Instance, HW
     */
    online_state?: ("NOT_YET_FIRST_CONNECTED"|"FREEZED"|"SHUT_DOWN"|"SYNCHRONIZATION_IN_PROGRESS"|"OFFLINE"|"ONLINE"|"UNKNOWN_LOST_CONNECTION_WITH_SERVER");
}


/**
 * @name ISocialNetworkLogin
 * @description: Json Model for logi via Facebook, Github etc.
 */
export interface ISocialNetworkLogin {
    /**
     * @name redirect_url
     * @type string
     * @required
     */
    redirect_url: string;
}


/**
 * @name ISocialLogin
 * @description: Json Model for new Basic Login throw the social networks
 */
export interface ISocialLogin {
    /**
     * @name auth_token
     * @type string
     * @description token, that you have to used in HTML head for verifying the identities
     * @format uuid
     * @readonly
     */
    auth_token?: string;
    /**
     * @name redirect_url
     * @type string
     * @description URL that you have to redirect user
     * @readonly
     */
    redirect_url?: string;
    /**
     * @name type
     * @type ("Facebook"|"GitHub")
     * @readonly
     */
    type?: ("Facebook"|"GitHub");
}


/**
 * @name ISwaggerBlockVersionNew
 * @description: Json Model for crating new version and also content of BlockVersion Model
 */
export interface ISwaggerBlockVersionNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ISwaggerGridWidgetVersionGridAppSource
 * @description: Interface ISwaggerGridWidgetVersionGridAppSource definition
 */
export interface ISwaggerGridWidgetVersionGridAppSource {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @readonly
     * @required
     */
    logic_json: string;
}


/**
 * @name ISwaggerInstanceSnapShotConfiguration
 * @description: Interface ISwaggerInstanceSnapShotConfiguration definition
 */
export interface ISwaggerInstanceSnapShotConfiguration {
    /**
     * @name grids_collections
     * @type ISwaggerInstanceSnapShotConfigurationFile[]
     * @required
     */
    grids_collections: ISwaggerInstanceSnapShotConfigurationFile[];
}


/**
 * @name ISwaggerInstanceSnapShotConfigurationFile
 * @description: Interface ISwaggerInstanceSnapShotConfigurationFile definition
 */
export interface ISwaggerInstanceSnapShotConfigurationFile {
    /**
     * @name grid_programs
     * @type ISwaggerInstanceSnapShotConfigurationProgram[]
     * @required
     */
    grid_programs: ISwaggerInstanceSnapShotConfigurationProgram[];
    /**
     * @name grid_project_id
     * @type string
     * @format uuid
     * @required
     */
    grid_project_id: string;
}


/**
 * @name ISwaggerInstanceSnapShotConfigurationProgram
 * @description: Interface ISwaggerInstanceSnapShotConfigurationProgram definition
 */
export interface ISwaggerInstanceSnapShotConfigurationProgram {
    /**
     * @name connection_token
     * @type string
     * @required
     */
    connection_token: string;
    /**
     * @name connection_url
     * @type string
     * @readonly
     */
    connection_url?: string;
    /**
     * @name grid_program_id
     * @type string
     * @format uuid
     * @required
     */
    grid_program_id: string;
    /**
     * @name grid_program_version_id
     * @type string
     * @format uuid
     * @required
     */
    grid_program_version_id: string;
    /**
     * @name snapshot_settings
     * @type ("PUBLIC"|"PROJECT"|"TESTING")
     * @required
     */
    snapshot_settings: ("PUBLIC"|"PROJECT"|"TESTING");
}


/**
 * @name ISystemAccess
 * @description: Json Model for System Access>
 */
export interface ISystemAccess {
    /**
     * @name permissions
     * @type IPermission[]
     * @readonly
     * @required
     */
    permissions: IPermission[];
    /**
     * @name roles
     * @type IRole[]
     * @readonly
     * @required
     */
    roles: IRole[];
}


/**
 * @name ITags
 * @description: Json Model for adding Tags
 */
export interface ITags {
    /**
     * @name object_id
     * @type string
     * @description Id of object that should be tagged. (e.g. Project, Block, Widget etc.)
     * @format uuid
     * @required
     */
    object_id: string;
    /**
     * @name tags
     * @type string[]
     * @required
     */
    tags: string[];
}


/**
 * @name ITariff
 * @description: Model of Tariff
 */
export interface ITariff {
    /**
     * @name active
     * @type boolean
     * @required
     */
    active: boolean;
    /**
     * @name awesome_icon
     * @type string
     * @required
     */
    awesome_icon: string;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name company_details_required
     * @type boolean
     * @required
     */
    company_details_required: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name credit_for_beginning
     * @type number
     * @description Visible only for Administrator with Special Permission
     * @format int64
     */
    credit_for_beginning?: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name extensions_included
     * @type ITariffExtension[]
     */
    extensions_included?: ITariffExtension[];
    /**
     * @name extensions_recommended
     * @type ITariffExtension[]
     */
    extensions_recommended?: ITariffExtension[];
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name identifier
     * @type string
     * @required
     */
    identifier: string;
    /**
     * @name labels
     * @type ITariffLabel[]
     * @readonly
     */
    labels?: ITariffLabel[];
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name order_position
     * @type number
     * @format int32
     * @required
     */
    order_position: number;
    /**
     * @name payment_details_required
     * @type boolean
     * @required
     */
    payment_details_required: boolean;
    /**
     * @name payment_method_required
     * @type boolean
     * @required
     */
    payment_method_required: boolean;
    /**
     * @name payment_methods
     * @type IPair[]
     * @readonly
     */
    payment_methods?: IPair[];
    /**
     * @name price
     * @type number
     * @format double
     * @readonly
     */
    price?: number;
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name ITariffExtension
 * @description: Model of TariffExtension
 */
export interface ITariffExtension {
    /**
     * @name active
     * @type boolean
     * @required
     */
    active: boolean;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name config
     * @type string
     * @description Visible only for Administrator with Special Permission
     * @readonly
     */
    config?: string;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name order_position
     * @type number
     * @format int32
     * @required
     */
    order_position: number;
    /**
     * @name price
     * @type number
     * @format double
     * @readonly
     * @required
     */
    price: number;
    /**
     * @name type
     * @type ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant")
     * @required
     */
    type: ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name ITariffExtensionEdit
 * @description: Json Model for updating extension of product.
 */
export interface ITariffExtensionEdit {
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name config
     * @type string
     * @description Json in String
     * @required
     */
    config: string;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ITariffExtensionNew
 * @description: Json Model for updating extension of product.
 */
export interface ITariffExtensionNew {
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name config
     * @type string
     * @description Json in String
     * @required
     */
    config: string;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name extension_type
     * @type string
     * @description Enumerated type of extension
     * @required
     */
    extension_type: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ITariffLabel
 * @description: Json Model for getting Type_Of_Block Filter List
 */
export interface ITariffLabel {
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name icon
     * @type string
     * @required
     */
    icon: string;
}


/**
 * @name ITariffNew
 * @description: Json Model for creating new tariff.
 */
export interface ITariffNew {
    /**
     * @name awesome_icon
     * @type string
     * @required
     */
    awesome_icon: string;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name company_details_required
     * @type boolean
     * @required
     */
    company_details_required: boolean;
    /**
     * @name credit_for_beginning
     * @type number
     * @format double
     * @required
     */
    credit_for_beginning: number;
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name identifier
     * @type string
     * @required
     */
    identifier: string;
    /**
     * @name labels
     * @type ITariffLabel[]
     * @required
     */
    labels: ITariffLabel[];
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name payment_details_required
     * @type boolean
     * @required
     */
    payment_details_required: boolean;
    /**
     * @name payment_method_required
     * @type boolean
     * @required
     */
    payment_method_required: boolean;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
}


/**
 * @name ITerminalConnectionSummary
 * @description: Interface ITerminalConnectionSummary definition
 */
export interface ITerminalConnectionSummary {
    /**
     * @name grid_app_url
     * @type string
     * @description WS address -> replaces token in URL by verified token from the other APIs if its required by query
     * @readonly
     * @required
     */
    grid_app_url: string;
    /**
     * @name grid_program
     * @type string
     * @description Grid Program code in String
     * @readonly
     * @required
     */
    grid_program: string;
    /**
     * @name grid_program_id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    grid_program_id: string;
    /**
     * @name grid_program_version_id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    grid_program_version_id: string;
    /**
     * @name grid_project_id
     * @type string
     * @format uuid
     * @readonly
     * @required
     */
    grid_project_id: string;
    /**
     * @name instance_id
     * @type string
     * @description Generated Token used for public programs, use as standard verification token
     * @format uuid
     * @readonly
     * @required
     */
    instance_id: string;
    /**
     * @name source_code_list
     * @type ISwaggerGridWidgetVersionGridAppSource[]
     * @description Generated Token used for public programs, use as standard verification token
     * @readonly
     * @required
     */
    source_code_list: ISwaggerGridWidgetVersionGridAppSource[];
}


/**
 * @name IUnauthorized
 * @description: Interface IUnauthorized definition
 */
export interface IUnauthorized {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     */
    message?: string;
    /**
     * @name state
     * @type ("unauthorized")
     * @description state
     * @readonly
     * @required
     */
    state: ("unauthorized");
}


/**
 * @name IUpdateProcedure
 * @description: Model of UpdateProcedure
 */
export interface IUpdateProcedure {
    /**
     * @name bootloader
     * @type IBootloaderUpdateProgram
     * @description Only of type_of_update constant is MANUALLY_RELEASE_MANAGER && firmware_type is BOOTLOADER
     * @readonly
     * @required
     */
    bootloader: IBootloaderUpdateProgram;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name date_of_finish
     * @type number
     * @description UNIX time in ms
     * @required
     */
    date_of_finish: number;
    /**
     * @name date_of_planing
     * @type number
     * @description UNIX time in ms
     * @required
     */
    date_of_planing: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name firmware_type
     * @type ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI")
     * @description Only if type_of_update constant is MANUALLY_RELEASE_MANAGER
     * @readonly
     * @required
     */
    firmware_type: ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI");
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name procedure_size_all
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    procedure_size_all: number;
    /**
     * @name procedure_size_complete
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    procedure_size_complete: number;
    /**
     * @name program
     * @type ICProgramUpdateProgram
     * @description Only if type_of_update constant is MANUALLY_RELEASE_MANAGER && firmware_type is FIRMWARE or BACKUP
     * @readonly
     * @required
     */
    program: ICProgramUpdateProgram;
    /**
     * @name state
     * @type ("SUCCESSFULLY_COMPLETE"|"COMPLETE"|"COMPLETE_WITH_ERROR"|"CANCELED"|"IN_PROGRESS"|"NOT_START_YET")
     * @required
     */
    state: ("SUCCESSFULLY_COMPLETE"|"COMPLETE"|"COMPLETE_WITH_ERROR"|"CANCELED"|"IN_PROGRESS"|"NOT_START_YET");
    /**
     * @name type_of_update
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")
     * @required
     */
    type_of_update: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IWebSocketToken
 * @description: Json Model that you will get, if login was successful
 */
export interface IWebSocketToken {
    /**
     * @name websocket_token
     * @type string
     * @description Swagger_Websocket_Token - used this token for WebSocket access. The lifetime of the token is 5 seconds. It is disposable. It can not be used twice. In the event of the expiration of the life of the disabled. 
     * @format uuid
     * @readonly
     * @required
     */
    websocket_token: string;
}


/**
 * @name IWidget
 * @description: Model of Widget
 */
export interface IWidget {
    /**
     * @name active
     * @type boolean
     * @description Only for Community Administrator
     */
    active?: boolean;
    /**
     * @name author
     * @type IPerson
     * @description Visible only if user has permission to know it
     * @readonly
     */
    author?: IPerson;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with Special Permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name producer
     * @type IShortReference
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     */
    producer?: IShortReference;
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @required
     */
    publish_type: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name tags
     * @type string[]
     */
    tags?: string[];
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
    /**
     * @name versions
     * @type IWidgetVersion[]
     * @required
     */
    versions: IWidgetVersion[];
}


/**
 * @name IWidgetVersion
 * @description: Model of WidgetVersion
 */
export interface IWidgetVersion {
    /**
     * @name approval_state
     * @type ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED")
     * @description Only if user make request for publishing
     */
    approval_state?: ("PENDING"|"APPROVED"|"DISAPPROVED"|"EDITED");
    /**
     * @name author
     * @type IPerson
     * @description Visible only if user has permission to know it
     * @readonly
     */
    author?: IPerson;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with permission
     * @readonly
     */
    community_publishing_permission?: boolean;
    /**
     * @name created
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name publish_type
     * @type ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("PRIVATE"|"PUBLIC"|"DEFAULT_MAIN"|"DEFAULT_TEST"|"DEFAULT_VERSION");
    /**
     * @name update_permission
     * @type boolean
     * @description can be hidden
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updated
     * @type number
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    updated: number;
}


/**
 * @name IWidgetCopy
 * @description: Json Model for copy Widget
 */
export interface IWidgetCopy {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Provide project id if you want to create private object
     * @format uuid
     * @required
     */
    project_id: string;
    /**
     * @name tags
     * @type string[]
     * @description Tags - Optional
     */
    tags?: string[];
    /**
     * @name widget_id
     * @type string
     * @format uuid
     * @required
     */
    widget_id: string;
}




export abstract class TyrionAPI extends HomerAPI {

    protected abstract requestRestPath<T>(method:string, path:string, body:Object, success:number[]):Promise<T>;

    /**
     * @name __login
     * @summary login
     * @operationId login
     * @tags Access, Person, APP-Api
     *
     * @description Get access Token
     *
     * @param {IEmailAndPassword} body - Contains Json with values
     *
     * @returns {ILoginToken} [code 200] Successfully logged
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IResultInternalServerError} [code 500] Server side Error
     * @throws {IResultNotValidated} [code 705] Account not validated
     */
    public __login(body:IEmailAndPassword):Promise<ILoginToken> {
        return this.requestRestPath("POST", `/login`, body, [200]);
    }

    /**
     * @name __logout
     * @summary logout
     * @operationId logout
     * @tags Access, Person, APP-Api
     *
     * @description for logout person - that's deactivate person token 
     *
     *
     * @returns {IResultOk} [code 200] Successfully logged out
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public __logout():Promise<IResultOk> {
        return this.requestRestPath("POST", `/logout`, {}, [200]);
    }

    /**
     * @name actualizationProcedureCancel
     * @summary cancel ActualizationProcedure
     * @operationId canceled_procedure
     * @tags Actualization
     *
     * @description cancel (terminate) procedure
     *
     * @param {string} procedure_id
     *
     * @returns {IUpdateProcedure} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public actualizationProcedureCancel(procedure_id:string):Promise<IUpdateProcedure> {
        return this.requestRestPath("PUT", `/update_procedure/cancel/${procedure_id}`, {}, [200]);
    }

    /**
     * @name actualizationProcedureGet
     * @summary get ActualizationProcedure
     * @operationId get_Actualization_Procedure
     * @tags Actualization
     *
     * @description get Actualization Procedure by ID
     *
     * @param {string} procedure_id
     *
     * @returns {IUpdateProcedure} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public actualizationProcedureGet(procedure_id:string):Promise<IUpdateProcedure> {
        return this.requestRestPath("GET", `/update_procedure/object/${procedure_id}`, {}, [200]);
    }

    /**
     * @name actualizationProcedureGetByFilter
     * @summary get ActualizationProcedure by Filter
     * @operationId get_Actualization_Procedures_by_filter
     * @tags Actualization
     *
     * @description get actualization Procedure by query
     *
     * @param {number} page_number
     * @param {IActualizationProcedureFilter} body - Contains Json with values
     *
     * @returns {IActualizationProcedureList} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public actualizationProcedureGetByFilter(page_number:number, body:IActualizationProcedureFilter):Promise<IActualizationProcedureList> {
        return this.requestRestPath("PUT", `/update_procedure/filter/${page_number}`, body, [200]);
    }

    /**
     * @name actualizationProcedureMake
     * @summary make ActualizationProcedure
     * @operationId make_actualization_procedure
     * @tags Actualization
     *
     * @description make procedure
     *
     * @param {IActualizationProcedureMake} body - Contains Json with values
     *
     * @returns {IUpdateProcedure} [code 201] Ok Created
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public actualizationProcedureMake(body:IActualizationProcedureMake):Promise<IUpdateProcedure> {
        return this.requestRestPath("POST", `/update_procedure/make`, body, [201]);
    }

    /**
     * @name actualizationTaskGet
     * @summary get ActualizationTask
     * @operationId get_Actualization_CProgramUpdatePlan
     * @tags Actualization
     *
     * @description get Actualization task by ID
     *
     * @param {string} task_id
     *
     * @returns {IHardwareUpdate} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public actualizationTaskGet(task_id:string):Promise<IHardwareUpdate> {
        return this.requestRestPath("PUT", `/update_task/object/${task_id}`, {}, [200]);
    }

    /**
     * @name actualizationTaskGetByFilter
     * @summary get ActualizationTask by Filter
     * @operationId get_Actualization_CProgramUpdatePlan_by_filter
     * @tags Actualization
     *
     * @description get actualization Tasks by query
     *
     * @param {number} page_number
     * @param {IActualizationProcedureTaskFilter} body - Contains Json with values
     *
     * @returns {IActualizationProcedureTaskList} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public actualizationTaskGetByFilter(page_number:number, body:IActualizationProcedureTaskFilter):Promise<IActualizationProcedureTaskList> {
        return this.requestRestPath("PUT", `/update_task/filter/${page_number}`, body, [200]);
    }

    /**
     * @name articleCreate
     * @summary create Article
     * @operationId article_create
     * @tags B_ArticleProgram
     *
     * @description create new Article
     *
     * @param {IArticleCreateUpdate} body - Contains Json with values
     *
     * @returns {IArticle} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public articleCreate(body:IArticleCreateUpdate):Promise<IArticle> {
        return this.requestRestPath("POST", `/article`, body, [201]);
    }

    /**
     * @name articleDelete
     * @summary delete Article
     * @operationId article_delete
     * @tags Article
     *
     * @description remove Article object
     *
     * @param {string} article_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public articleDelete(article_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/article/${article_id}`, {}, [200]);
    }

    /**
     * @name articleEdit
     * @summary edit Article
     * @operationId article_edit
     * @tags Article
     *
     * @description edit Article object
     *
     * @param {string} article_id
     * @param {IArticleCreateUpdate} body - Contains Json with values
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public articleEdit(article_id:string, body:IArticleCreateUpdate):Promise<IBProgram> {
        return this.requestRestPath("PUT", `/article/${article_id}`, body, [200]);
    }

    /**
     * @name articleGetListByFilter
     * @summary get Article List by Filter
     * @operationId article_getByFilter
     * @tags Article
     *
     * @description get Article List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IArticleFilter} body - Contains Json with values
     *
     * @returns {IArticleList} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public articleGetListByFilter(page_number:number, body:IArticleFilter):Promise<IArticleList> {
        return this.requestRestPath("PUT", `/article/list/${page_number}`, body, [200]);
    }

    /**
     * @name bProgramCreate
     * @summary create B_Program
     * @operationId bProgram_create
     * @tags B_Program
     *
     * @description create new B_Program
     *
     * @param {string} project_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IBProgram} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramCreate(project_id:string, body:INameAndDescription):Promise<IBProgram> {
        return this.requestRestPath("POST", `/b_program/${project_id}`, body, [201]);
    }

    /**
     * @name bProgramDelete
     * @summary delete B_Program
     * @operationId bProgram_delete
     * @tags B_Program
     *
     * @description remove B_Program object
     *
     * @param {string} b_program_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramDelete(b_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name bProgramEdit
     * @summary edit B_Program
     * @operationId bProgram_update
     * @tags B_Program
     *
     * @description edit basic information in B_Program object
     *
     * @param {string} b_program_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramEdit(b_program_id:string, body:INameAndDescription):Promise<IBProgram> {
        return this.requestRestPath("PUT", `/b_program/${b_program_id}`, body, [200]);
    }

    /**
     * @name bProgramGet
     * @summary get B_Program
     * @operationId bProgram_get
     * @tags B_Program
     *
     * @description get B_Program object
     *
     * @param {string} b_program_id
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramGet(b_program_id:string):Promise<IBProgram> {
        return this.requestRestPath("GET", `/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name bProgramGetInstanceSnapshostFile
     * @summary get B_Program Instance Snapshost File
     * @operationId cloud_file_get_b_program_version
     * @tags Homer-Server-API
     *
     * @description Required secure Token changed throw websocket
     *
     * @param {string} snapshot_id
     *
     * @returns {any} [code 200] 
     *
     * @throws [code 303] Automatic Redirect To another URL
     * @throws {IResultForbidden} [code 403] Need required permission or File is not probably right type
     * @throws {IResultFound} [code 404] File by ID not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramGetInstanceSnapshostFile(snapshot_id:string):Promise<any> {
        return this.requestRestPath("GET", `/cloud/homer_server/file/snapshot_programs/${snapshot_id}`, {}, [200]);
    }

    /**
     * @name bProgramGetListByFilter
     * @summary get B_Program List by Filter
     * @operationId bProgram_getByFilter
     * @tags B_Program
     *
     * @description get B_Program List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBProgramFilter} body - Contains Json with values
     *
     * @returns {IBProgramList} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramGetListByFilter(page_number:number, body:IBProgramFilter):Promise<IBProgramList> {
        return this.requestRestPath("PUT", `/b_program/list/${page_number}`, body, [200]);
    }

    /**
     * @name bProgramTag
     * @summary tag B_Program
     * @operationId bProgram_addTags
     * @tags B_Program
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramTag(body:ITags):Promise<IBProgram> {
        return this.requestRestPath("PUT", `/b_program/tags/add`, body, [200]);
    }

    /**
     * @name bProgramUntag
     * @summary untag B_Program
     * @operationId bProgram_removeTags
     * @tags B_Program
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramUntag(body:ITags):Promise<IBProgram> {
        return this.requestRestPath("PUT", `/b_program/tags/remove`, body, [200]);
    }

    /**
     * @name bProgramVersionCreate
     * @summary create B_Program_Version
     * @operationId bProgramVersion_create
     * @tags B_Program
     *
     * @description create new vesion in Blocko program
     *
     * @param {string} b_program_id
     * @param {IBProgramVersionNew} body - Contains Json with values
     *
     * @returns {IBProgramVersion} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramVersionCreate(b_program_id:string, body:IBProgramVersionNew):Promise<IBProgramVersion> {
        return this.requestRestPath("POST", `/b_program/version/${b_program_id}`, body, [200]);
    }

    /**
     * @name bProgramVersionDelete
     * @summary delete B_Program_Version
     * @operationId bProgramVersion_delete
     * @tags B_Program
     *
     * @description remove B_Program version object
     *
     * @param {string} version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramVersionDelete(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name bProgramVersionEdit
     * @summary edit B_Program_Version
     * @operationId bProgramVersion_update
     * @tags B_Program
     *
     * @description edit Version object
     *
     * @param {string} version_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramVersionEdit(version_id:string, body:INameAndDescription):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/b_program/version/${version_id}`, body, [200]);
    }

    /**
     * @name bProgramVersionGet
     * @summary get B_Program_Version
     * @operationId bProgramVersion_get
     * @tags B_Program
     *
     * @description get B_Program version object
     *
     * @param {string} version_id
     *
     * @returns {IBProgramVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bProgramVersionGet(version_id:string):Promise<IBProgramVersion> {
        return this.requestRestPath("GET", `/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name blockActivate
     * @summary activate Block
     * @operationId block_activate
     * @tags Admin-Block
     *
     * @description activate Block
     *
     * @param {string} block_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockActivate(block_id:string):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/block/active/${block_id}`, {}, [200]);
    }

    /**
     * @name blockClone
     * @summary clone Block
     * @operationId block_clone
     * @tags Block
     *
     * @description clone Block for private
     *
     * @param {IBlockoBlockCopy} body - Contains Json with values
     *
     * @returns {IBlock} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockClone(body:IBlockoBlockCopy):Promise<IBlock> {
        return this.requestRestPath("POST", `/block/clone`, body, [200]);
    }

    /**
     * @name blockCreate
     * @summary create Block
     * @operationId block_create
     * @tags Block
     *
     * @description creating new independent Block object for Blocko tools
     *
     * @param {INameAndDescProjectIdOptional} body - Contains Json with values
     *
     * @returns {IBlock} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockCreate(body:INameAndDescProjectIdOptional):Promise<IBlock> {
        return this.requestRestPath("POST", `/block`, body, [201]);
    }

    /**
     * @name blockDeactivate
     * @summary deactivate Block
     * @operationId block_deactivate
     * @tags Admin-Block
     *
     * @description deactivate Block
     *
     * @param {string} block_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockDeactivate(block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/block/deactive/${block_id}`, {}, [200]);
    }

    /**
     * @name blockDelete
     * @summary delete Block
     * @operationId block_delete
     * @tags Block
     *
     * @description delete Block
     *
     * @param {string} block_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockDelete(block_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/block/${block_id}`, {}, [200]);
    }

    /**
     * @name blockEdit
     * @summary edit Block
     * @operationId block_update
     * @tags Block
     *
     * @description update basic information (name, and description) of the independent Block
     *
     * @param {string} block_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IBlock} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockEdit(block_id:string, body:INameAndDescription):Promise<IBlock> {
        return this.requestRestPath("PUT", `/block/${block_id}`, body, [200]);
    }

    /**
     * @name blockGet
     * @summary get Block
     * @operationId block_get
     * @tags Block
     *
     * @description get independent Block object
     *
     * @param {string} block_id
     *
     * @returns {IBlock} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockGet(block_id:string):Promise<IBlock> {
        return this.requestRestPath("GET", `/block/${block_id}`, {}, [200]);
    }

    /**
     * @name blockGetListByFilter
     * @summary get Block List by Filter
     * @operationId block_getByFilter
     * @tags Block
     *
     * @description get Block List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBlockFilter} body - Contains Json with values
     *
     * @returns {IBlockList} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockGetListByFilter(page_number:number, body:IBlockFilter):Promise<IBlockList> {
        return this.requestRestPath("PUT", `/block/list/${page_number}`, body, [200]);
    }

    /**
     * @name blockOrderDown
     * @summary orderDown Block
     * @operationId block_orderDown
     * @tags Block
     *
     * @description set up order
     *
     * @param {string} block_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockOrderDown(block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/block/order/down/${block_id}`, {}, [200]);
    }

    /**
     * @name blockOrderUp
     * @summary orderUp Block
     * @operationId block_orderUp
     * @tags Block
     *
     * @description set up order
     *
     * @param {string} block_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockOrderUp(block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/block/order/up/${block_id}`, {}, [200]);
    }

    /**
     * @name blockTag
     * @summary tag Block
     * @operationId block_addTags
     * @tags Block
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IBlock} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockTag(body:ITags):Promise<IBlock> {
        return this.requestRestPath("PUT", `/block/tags/add`, body, [200]);
    }

    /**
     * @name blockUntag
     * @summary untag Block
     * @operationId block_removeTags
     * @tags Block
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IBlock} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockUntag(body:ITags):Promise<IBlock> {
        return this.requestRestPath("PUT", `/block/tags/remove`, body, [200]);
    }

    /**
     * @name blockVersionCreate
     * @summary create BlockVersion
     * @operationId blockVersion_create
     * @tags Block
     *
     * @description new Block version
     *
     * @param {string} block_id
     * @param {ISwaggerBlockVersionNew} body - Contains Json with values
     *
     * @returns {IBlockVersion} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockVersionCreate(block_id:string, body:ISwaggerBlockVersionNew):Promise<IBlockVersion> {
        return this.requestRestPath("POST", `/block/version/${block_id}`, body, [201]);
    }

    /**
     * @name blockVersionDelete
     * @summary delete BlockVersion
     * @operationId blockVersion_delete
     * @tags Block
     *
     * @description delete Block version
     *
     * @param {string} version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockVersionDelete(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/block/version/${version_id}`, {}, [200]);
    }

    /**
     * @name blockVersionEdit
     * @summary edit BlockVersion
     * @operationId blockVersion_update
     * @tags Block
     *
     * @description You can edit only basic information of the version. If you want to update the code, you have to create a new version!
     *
     * @param {string} version_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IBlockVersion} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockVersionEdit(version_id:string, body:INameAndDescription):Promise<IBlockVersion> {
        return this.requestRestPath("PUT", `/block/version/${version_id}`, body, [200]);
    }

    /**
     * @name blockVersionEditAcceptPublication
     * @summary edit BlockVersion accept publication
     * @operationId blockoApproval
     * @tags Admin-Block
     *
     * @description sets Approval_state to pending
     *
     * @param {IBlockoObjectApproveWithChanges} body - Contains Json with values
     *
     * @returns {IBlockVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockVersionEditAcceptPublication(body:IBlockoObjectApproveWithChanges):Promise<IBlockVersion> {
        return this.requestRestPath("PUT", `/blocko/approval`, body, [200]);
    }

    /**
     * @name blockVersionEditRefusePublication
     * @summary edit BlockVersion refuse publication
     * @operationId blockoDisapprove
     * @tags Admin-Block
     *
     * @description sets disapproved from pending
     *
     * @param {IBlockoObjectApproval} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockVersionEditRefusePublication(body:IBlockoObjectApproval):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/blocko/disapprove`, body, [200]);
    }

    /**
     * @name blockVersionEditResponsePublication
     * @summary edit BlockVersion Response publication
     * @operationId block_public_response
     * @tags Admin-Block
     *
     * @description sets Approval_state to pending
     *
     * @param {ICommunityVersionPublishResponse} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockVersionEditResponsePublication(body:ICommunityVersionPublishResponse):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/block/approval`, body, [200]);
    }

    /**
     * @name blockVersionGet
     * @summary get BlockVersion
     * @operationId blockVersion_get
     * @tags Block
     *
     * @description get version (content) from independent Block
     *
     * @param {string} version_id
     *
     * @returns {IBlockVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockVersionGet(version_id:string):Promise<IBlockVersion> {
        return this.requestRestPath("GET", `/block/version/${version_id}`, {}, [200]);
    }

    /**
     * @name blockVersionPublish
     * @summary publish BlockVersion
     * @operationId blockVersion_make_public
     * @tags Block
     *
     * @description sets Approval_state to pending
     *
     * @param {string} version_id
     *
     * @returns {IBlockVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockVersionPublish(version_id:string):Promise<IBlockVersion> {
        return this.requestRestPath("PUT", `/block/version/make_public/${version_id}`, {}, [200]);
    }

    /**
     * @name blockVersionSetMain
     * @summary setMain BlockVersion
     * @operationId blockVersion_setMain
     * @tags Admin-Block
     *
     * @param {string} version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultFound} [code 403] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public blockVersionSetMain(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/block/version/set_main/${version_id}`, {}, [200]);
    }

    /**
     * @name boardChangeserver
     * @summary change_server Board
     * @operationId hardware_redirect_to_server
     * @tags Hardware
     *
     * @description Redirect Board to another server (Change Server)
     *
     * @param {string} hardware_id
     * @param {IBoardServerRedirect} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardChangeserver(hardware_id:string, body:IBoardServerRedirect):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/hardware/change_server/${hardware_id}`, body, [200]);
    }

    /**
     * @name boardCheckRegistrationStatus
     * @summary check Board registration status
     * @operationId hardware_check
     * @tags Board
     *
     * @description Check Board state for new Registration. Types of responses in JSON state value[CAN_REGISTER, NOT_EXIST, ALREADY_REGISTERED_IN_YOUR_ACCOUNT, ALREADY_REGISTERED, PERMANENTLY_DISABLED, BROKEN_DEVICE]... 
     *     PERMANENTLY_DISABLED - device was removed by Byzance. 
     *    BROKEN_DEVICE - device exist - but its not possible to registered that. Damaged during manufacturing. 
     *
     * @param {string} registration_hash
     * @param {string} project_id
     *
     * @returns {IEntityRegistrationStatus} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardCheckRegistrationStatus(registration_hash:string, project_id:string):Promise<IEntityRegistrationStatus> {
        return this.requestRestPath("GET", `/hardware/check/${registration_hash}/${project_id}`, {}, [200]);
    }

    /**
     * @name boardCommandExecution
     * @summary command Board execution
     * @operationId hardware_command_execution
     * @tags Board
     *
     * @description Removes picture of logged person
     *
     * @param {IBoardCommand} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardCommandExecution(body:IBoardCommand):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/hardware/command`, body, [200]);
    }

    /**
     * @name boardCreateAutomaticGarfield
     * @summary create Board automatic Garfield
     * @operationId hardware_create_garfield
     * @tags Admin-Board
     *
     * @description This Api is using for Board automatic registration adn Testing. Hardware is not allowed to delete! Only deactivate. Classic User can only register that to own project or own to account
     *
     * @param {IBoardNewGarfield} body - Contains Json with values
     *
     * @returns {IHardwareNewSettingsResult} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardCreateAutomaticGarfield(body:IBoardNewGarfield):Promise<IHardwareNewSettingsResult> {
        return this.requestRestPath("POST", `/hardware/automatic_registration`, body, [201]);
    }

    /**
     * @name boardDeactivate
     * @summary deactivate Board
     * @operationId hardware_deactivate
     * @tags Hardware
     *
     * @description Permanent exclusion from the system - for some reason it is not allowed to remove the Board from database
     *
     * @param {string} hardware_id
     *
     * @returns {IHardware} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardDeactivate(hardware_id:string):Promise<IHardware> {
        return this.requestRestPath("DELETE", `/hardware/deactivate/${hardware_id}`, {}, [200]);
    }

    /**
     * @name boardDeletePicture
     * @summary delete Board picture
     * @operationId hardware_removePicture
     * @tags Board
     *
     * @description Removes picture of logged person
     *
     * @param {string} hardware_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardDeletePicture(hardware_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/hardware/picture/remove/${hardware_id}`, {}, [200]);
    }

    /**
     * @name boardEditDevelopersParameters
     * @summary edit Board developers parameters
     * @operationId hardware_update_parameters
     * @tags Hardware
     *
     * @description Edit Developers parameters [developer_kit, database_synchronize, web_view, web_port]
     *
     * @param {string} hardware_id
     * @param {IBoardDeveloperParameters} body - Contains Json with values
     *
     * @returns {IHardware} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardEditDevelopersParameters(hardware_id:string, body:IBoardDeveloperParameters):Promise<IHardware> {
        return this.requestRestPath("PUT", `/hardware/parameters/${hardware_id}`, body, [200]);
    }

    /**
     * @name boardEditPersonalDescription
     * @summary edit Board personal description
     * @operationId hardware_update_description
     * @tags Hardware
     *
     * @description Used for add descriptions by owners. "Persons" who registred "Board" to own "Project" 
     *
     * @param {string} hardware_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IHardware} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardEditPersonalDescription(hardware_id:string, body:INameAndDescription):Promise<IHardware> {
        return this.requestRestPath("PUT", `/hardware/userDescription/${hardware_id}`, body, [200]);
    }

    /**
     * @name boardGeneratemqttpassword
     * @summary generate_mqtt_password Board
     * @operationId hardware_generate_new_password
     * @tags Board
     *
     * @description Generate new connection password for Hardware
     *
     * @param {string} hardware_id
     *
     * @returns {IHardwareNewPassword} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardGeneratemqttpassword(hardware_id:string):Promise<IHardwareNewPassword> {
        return this.requestRestPath("PUT", `/hardware/mqtt_password_reset/${hardware_id}`, {}, [200]);
    }

    /**
     * @name boardGet
     * @summary get Board
     * @operationId hardware_get
     * @tags Hardware
     *
     * @description if you want get Board object by query = hardware_id. User can get only hardware from project, whitch user owning or user need Permission key "Board_rea".
     *
     * @param {string} hardware_id
     *
     * @returns {IHardware} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardGet(hardware_id:string):Promise<IHardware> {
        return this.requestRestPath("GET", `/hardware/${hardware_id}`, {}, [200]);
    }

    /**
     * @name boardGroupUpdateDeviceList
     * @summary update BoardGroup Device List
     * @operationId board_group_update_device_list
     * @tags BoardGroup
     *
     * @description update BoardGroup add or remove device list
     *
     * @param {IHardwareGroupDeviceListEdit} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public boardGroupUpdateDeviceList(body:IHardwareGroupDeviceListEdit):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/hardware_group/hardware_synnchronize`, body, [200]);
    }

    /**
     * @name boardPrintlabel
     * @summary print_label Board
     * @operationId print_label
     * @tags Garfield
     *
     * @description Print Labels Board - Not working properly yet!
     *
     * @param {string} hardware_id
     *
     * @returns {IGarfield} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardPrintlabel(hardware_id:string):Promise<IGarfield> {
        return this.requestRestPath("GET", `/admin/garfiled-print-labes/${hardware_id}`, {}, [200]);
    }

    /**
     * @name boardUpdateBackup
     * @summary update Board Backup
     * @operationId hardware_updateBackup
     * @tags Hardware
     *
     * @param {IHardwareBackupSettings} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardUpdateBackup(body:IHardwareBackupSettings):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/hardware/backup`, body, [200]);
    }

    /**
     * @name boardsGetListByFilter
     * @summary get Boards List by Filter
     * @operationId hardware_getByFilter
     * @tags Hardware
     *
     * @description Get List of hardware. According to permission - system return only hardware from project, where is user owner or all hardware if user have static Permission key
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)
     * @param {IBoardFilter} body - Contains Json with values
     *
     * @returns {IHardwareList} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public boardsGetListByFilter(page_number:number, body:IBoardFilter):Promise<IHardwareList> {
        return this.requestRestPath("PUT", `/hardware/filter/${page_number}`, body, [200]);
    }

    /**
     * @name bootloaderCreate
     * @summary create Bootloader
     * @operationId bootLoader_create
     * @tags HardwareType
     *
     * @description Create bootloader for HardwareType
     *
     * @param {string} hardware_type_id
     * @param {IBootLoaderCreate} body - Contains Json with values
     *
     * @returns {IBootLoader} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bootloaderCreate(hardware_type_id:string, body:IBootLoaderCreate):Promise<IBootLoader> {
        return this.requestRestPath("POST", `/bootloader/${hardware_type_id}`, body, [200]);
    }

    /**
     * @name bootloaderDelete
     * @summary delete Bootloader
     * @operationId bootLoader_delete
     * @tags HardwareType
     *
     * @param {string} boot_loader_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bootloaderDelete(boot_loader_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/bootloader/${boot_loader_id}`, {}, [200]);
    }

    /**
     * @name bootloaderEdit
     * @summary edit Bootloader
     * @operationId bootLoader_update
     * @tags HardwareType
     *
     * @description Edit bootloader for HardwareType
     *
     * @param {string} boot_loader_id
     * @param {IBootLoaderCreate} body - Contains Json with values
     *
     * @returns {IBootLoader} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bootloaderEdit(boot_loader_id:string, body:IBootLoaderCreate):Promise<IBootLoader> {
        return this.requestRestPath("PUT", `/bootloader/${boot_loader_id}`, body, [200]);
    }

    /**
     * @name bootloaderEditSetAsMain
     * @summary edit Bootloader Set as Main
     * @operationId bootLoader_markAsMain
     * @tags Admin-Bootloader
     *
     * @description List of Hardware Id for update on latest bootloader version (system used latest bootloader for type of hardware)
     *
     * @param {string} boot_loader_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bootloaderEditSetAsMain(boot_loader_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/bootloader/mark/bootloader/${boot_loader_id}`, {}, [200]);
    }

    /**
     * @name bootloaderGetFileRecord
     * @summary get Bootloader FileRecord
     * @operationId fileRecord_get_bootLoader
     * @tags File, Garfield
     *
     * @param {string} bootloader_id
     *
     * @returns {IFileContent} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bootloaderGetFileRecord(bootloader_id:string):Promise<IFileContent> {
        return this.requestRestPath("GET", `/file/bootloader/${bootloader_id}`, {}, [200]);
    }

    /**
     * @name bootloaderUploadFile
     * @summary upload Bootloader File
     * @operationId bootLoader_uploadFile
     * @tags Admin-Bootloader
     *
     * @param {string} boot_loader_id
     * @param {IBase64File} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public bootloaderUploadFile(boot_loader_id:string, body:IBase64File):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/bootloader/file/${boot_loader_id}`, body, [200]);
    }

    /**
     * @name cProgramCompile
     * @summary compile C_Program
     * @operationId compile_c_program_code
     * @tags C_Program
     *
     * @description Compile code
     *
     * @param {ICProgramVersionUpdate} body - Contains Json with values
     *
     * @returns {ICloudCompilationServerCompilationResult} [code 200] Compilation successful
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {ICompilationBuildError[]} [code 422] Compilation unsuccessful
     * @throws {IResultServerOffline} [code 477] External server is offline
     * @throws {IResultExternalServerSideError} [code 478] External server side Error
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramCompile(body:ICProgramVersionUpdate):Promise<ICloudCompilationServerCompilationResult> {
        return this.requestRestPath("POST", `/c_program/version/compile`, body, [200]);
    }

    /**
     * @name cProgramCreate
     * @summary create C_Program
     * @operationId c_program_create
     * @tags C_Program
     *
     * @description If you want create new C_Program in project.id = {project_id}. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {ICProgramNew} body - Contains Json with values
     *
     * @returns {ICProgram} [code 201] Successfully created
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramCreate(body:ICProgramNew):Promise<ICProgram> {
        return this.requestRestPath("POST", `/c_program/create`, body, [201]);
    }

    /**
     * @name cProgramDelete
     * @summary delete C_Program
     * @operationId c_program_delete
     * @tags C_Program
     *
     * @description delete C_Program by query = c_program_id, query = version_id
     *
     * @param {string} c_program_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramDelete(c_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/c_program/${c_program_id}`, {}, [200]);
    }

    /**
     * @name cProgramEdit
     * @summary edit C_Program
     * @operationId c_program_edit
     * @tags C_Program
     *
     * @description If you want edit base information about C_Program by  query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramEdit(c_program_id:string, body:INameAndDescription):Promise<ICProgram> {
        return this.requestRestPath("PUT", `/c_program/${c_program_id}`, body, [200]);
    }

    /**
     * @name cProgramGet
     * @summary get C_Program
     * @operationId c_program_get
     * @tags C_Program
     *
     * @description get C_Program by query = c_program_id
     *
     * @param {string} c_program_id
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramGet(c_program_id:string):Promise<ICProgram> {
        return this.requestRestPath("GET", `/c_program/get/${c_program_id}`, {}, [200]);
    }

    /**
     * @name cProgramGetFile
     * @summary get C_Program File
     * @operationId cloud_file_get_c_program_compilation
     * @tags Homer-Server-API
     *
     * @description Required secure Token changed throw websocket
     *
     * @param {string} compilation_id
     *
     * @returns {any} [code 200] 
     *
     * @throws [code 303] Automatic Redirect To another URL
     * @throws {IResultForbidden} [code 403] Need required permission or File is not probably right type
     * @throws {IResultFound} [code 404] File by ID not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramGetFile(compilation_id:string):Promise<any> {
        return this.requestRestPath("GET", `/cloud/homer_server/file/c_program/${compilation_id}`, {}, [200]);
    }

    /**
     * @name cProgramGetListByFilter
     * @summary get C_Program List by Filter
     * @operationId c_program_getByFilter
     * @tags C_Program
     *
     * @description get all C_Programs that belong to logged person
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)
     * @param {ICProgramFilter} body - Contains Json with values
     *
     * @returns {ICProgramList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramGetListByFilter(page_number:number, body:ICProgramFilter):Promise<ICProgramList> {
        return this.requestRestPath("PUT", `/c_program/filter/${page_number}`, body, [200]);
    }

    /**
     * @name cProgramMakeClone
     * @summary make_Clone C_Program
     * @operationId c_program_clone
     * @tags C_Program
     *
     * @description clone C_Program for private
     *
     * @param {ICProgramCopy} body - Contains Json with values
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramMakeClone(body:ICProgramCopy):Promise<ICProgram> {
        return this.requestRestPath("PUT", `/c_program/clone`, body, [200]);
    }

    /**
     * @name cProgramUploadIntoHardware
     * @summary upload C_Program into Hardware
     * @operationId hardware_updateFirmware
     * @tags C_Program, Board, Actualization
     *
     * @description Upload compilation to list of hardware. Compilation is on Version oc C_Program. And before uplouding compilation, you must succesfuly compile required version before! Result (HTML code) will be every time 200. - Its because upload, restart, etc.. operation need more than ++30 second There is also problem / chance that Tyrion didn't find where Embedded hardware is. So you have to listening Server Sent Events (SSE) and show "future" message to the user!
     *
     * @param {IDeployFirmware} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramUploadIntoHardware(body:IDeployFirmware):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/version/upload`, body, [200]);
    }

    /**
     * @name cProgramVersionCreate
     * @summary create C_Program_Version
     * @operationId c_program_version_create
     * @tags C_Program
     *
     * @description If you want add new code to C_Program by query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id - version_id String query
     * @param {ICProgramVersionNew} body - Contains Json with values
     *
     * @returns {ICProgramVersion} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionCreate(c_program_id:string, body:ICProgramVersionNew):Promise<ICProgramVersion> {
        return this.requestRestPath("POST", `/c_program/version/create/${c_program_id}`, body, [201]);
    }

    /**
     * @name cProgramVersionDelete
     * @summary delete C_Program_Version
     * @operationId c_program_version_delete
     * @tags C_Program
     *
     * @description delete Version.id = version_id in C_Program by query = c_program_id, query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionDelete(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/c_program/version/delete/${version_id}`, {}, [200]);
    }

    /**
     * @name cProgramVersionEditInformation
     * @summary edit C_Program_Version information
     * @operationId c_program_version_edit
     * @tags C_Program
     *
     * @description For update basic (name and description) information in Version of C_Program. If you want update code. You have to create new version. And after that you can delete previous version
     *
     * @param {string} version_id - version_id String query
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {ICProgramVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionEditInformation(version_id:string, body:INameAndDescription):Promise<ICProgramVersion> {
        return this.requestRestPath("PUT", `/c_program/version/edit/${version_id}`, body, [200]);
    }

    /**
     * @name cProgramVersionEditResponsePublication
     * @summary edit C_Program_Version Response publication
     * @operationId c_program_public_response
     * @tags Admin-C_Program
     *
     * @description sets Approval_state to pending
     *
     * @param {ICommunityVersionPublishResponse} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionEditResponsePublication(body:ICommunityVersionPublishResponse):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/version_for_aprove/approve_decision`, body, [200]);
    }

    /**
     * @name cProgramVersionGet
     * @summary get C_Program_Version
     * @operationId c_program_version_get
     * @tags C_Program
     *
     * @description get Version of C_Program by query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ICProgramVersion} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionGet(version_id:string):Promise<ICProgramVersion> {
        return this.requestRestPath("GET", `/c_program/version/get/${version_id}`, {}, [200]);
    }

    /**
     * @name cProgramVersionGetFileRecord
     * @summary get CProgram_Version FileRecord
     * @operationId fileRecord_get_firmware
     * @tags File, Garfield
     *
     * @param {string} version_id
     *
     * @returns {IFileContent} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionGetFileRecord(version_id:string):Promise<IFileContent> {
        return this.requestRestPath("GET", `/file/cprogram_version/${version_id}`, {}, [200]);
    }

    /**
     * @name cProgramVersionMakePublic
     * @summary make C_Program_Version public
     * @operationId c_program_version_make_public
     * @tags C_Program
     *
     * @description Make C_Program public, so other users can see it and use it. Attention! Attention! Attention! A user can publish only three programs at the stage waiting for approval.
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Bad Request
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionMakePublic(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/version/make_public/${version_id}`, {}, [200]);
    }

    /**
     * @name companiesGetAll
     * @summary get Companies All
     * @operationId customer_get_all
     * @tags Price & Invoice & Tariffs
     *
     * @description Gets all companies by logged user.
     *
     *
     * @returns {ICustomer[]} [code 200] Created successfully
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public companiesGetAll():Promise<ICustomer[]> {
        return this.requestRestPath("GET", `/company`, {}, [200]);
    }

    /**
     * @name companyCreate
     * @summary create Company
     * @operationId customer_create_company
     * @tags Price & Invoice & Tariffs
     *
     * @description Creates new Customer (type: company), you can crate new product under Customer(company) or under Customer(person)
     *
     * @param {ICustomerNew} body - Contains Json with values
     *
     * @returns {ICustomer} [code 201] Created successfully
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public companyCreate(body:ICustomerNew):Promise<ICustomer> {
        return this.requestRestPath("POST", `/company`, body, [201]);
    }

    /**
     * @name companyUpdate
     * @summary update Company
     * @operationId customer_update_company
     * @tags Price & Invoice & Tariffs
     *
     * @description Updates payment details of a company.
     *
     * @param {string} customer_id
     * @param {ICustomerNew} body - Contains Json with values
     *
     * @returns {ICustomer} [code 200] Updated successfully
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public companyUpdate(customer_id:string, body:ICustomerNew):Promise<ICustomer> {
        return this.requestRestPath("PUT", `/company/${customer_id}`, body, [200]);
    }

    /**
     * @name compilationServerCreate
     * @summary create Compilation_Server
     * @operationId compilation_server_create
     * @tags Admin-External-Server
     *
     * @description Create new Gate for Compilation_Server
     *
     * @param {ICompilationServerNew} body - Contains Json with values
     *
     * @returns {ICompilationServer} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public compilationServerCreate(body:ICompilationServerNew):Promise<ICompilationServer> {
        return this.requestRestPath("POST", `/compilation_server`, body, [201]);
    }

    /**
     * @name compilationServerEdit
     * @summary edit Compilation_Server
     * @operationId compilation_server_edit
     * @tags Admin-External-Server
     *
     * @description Edit basic information Compilation_Server
     *
     * @param {string} server_id
     * @param {ICompilationServerNew} body - Contains Json with values
     *
     * @returns {ICompilationServer} [code 200] Update successfuly
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public compilationServerEdit(server_id:string, body:ICompilationServerNew):Promise<ICompilationServer> {
        return this.requestRestPath("PUT", `/compilation_server/${server_id}`, body, [200]);
    }

    /**
     * @name compilationServerGet
     * @summary get Compilation_Server
     * @operationId compilation_server_get
     * @tags Admin-External-Server
     *
     * @description get Compilation_Servers
     *
     * @param {string} server_id
     *
     * @returns {ICompilationServer} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public compilationServerGet(server_id:string):Promise<ICompilationServer> {
        return this.requestRestPath("GET", `/compilation_server/${server_id}`, {}, [200]);
    }

    /**
     * @name compilationServersDelete
     * @summary delete Compilation_Servers
     * @operationId compilation_server_delete
     * @tags Admin-External-Server
     *
     * @description remove Compilation_Servers
     *
     * @param {string} server_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public compilationServersDelete(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation_server/${server_id}`, {}, [200]);
    }

    /**
     * @name compilationServersGetList
     * @summary get Compilation_Servers List
     * @operationId compilation_server_get_all
     * @tags Admin-External-Server
     *
     * @description get Compilation_Servers
     *
     *
     * @returns {ICompilationServer[]} [code 200] Ok Result
     *
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public compilationServersGetList():Promise<ICompilationServer[]> {
        return this.requestRestPath("GET", `/compilation_server`, {}, [200]);
    }

    /**
     * @name connectiontokenRemoveAll
     * @summary remove  Connection_token All
     * @operationId person_removeAllConnections
     * @tags Admin-Person
     *
     * @description remove all connection tokens
     *
     * @param {string} person_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public connectiontokenRemoveAll(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/person/connections/${person_id}`, {}, [200]);
    }

    /**
     * @name creditBuyForGivenProduct
     * @summary buy Credit for given product
     * @operationId product_credit
     * @tags Price & Invoice & Tariffs
     *
     * @description creates invoice - credit will be added after payment if payment method is bank transfer or if getting money from credit card is successful
     *
     * @param {string} product_id
     * @param {IProductCredit} body - Contains Json with values
     *
     * @returns {IInvoice} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public creditBuyForGivenProduct(product_id:string, body:IProductCredit):Promise<IInvoice> {
        return this.requestRestPath("PUT", `/product/credit/${product_id}`, body, [200]);
    }

    /**
     * @name deleteBug
     * @summary Bug delete
     * @operationId serverError_delete
     * @tags Admin-Report
     *
     * @param {string} bug_id - bug_id String path
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public deleteBug(bug_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/bug/${bug_id}`, {}, [200]);
    }

    /**
     * @name deleteBugAll
     * @summary Bug delete all
     * @operationId serverError_deleteAll
     * @tags Admin-Report
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public deleteBugAll():Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/bug`, {}, [200]);
    }

    /**
     * @name emailAuthenticateFromRegistration
     * @summary authenticate Email from registration
     * @operationId person_emailAuthentication
     * @tags Admin-Person
     *
     * @description sends authentication email, if user did not get the first one from the registration
     *
     * @param {string} token
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public emailAuthenticateFromRegistration(token:string):Promise<IResultOk> {
        return this.requestRestPath("GET", `/person/mail_authentication/${token}`, {}, [200]);
    }

    /**
     * @name emailSendAuthentication
     * @summary send Email authentication
     * @operationId person_authenticationSendEmail
     * @tags Person
     *
     * @description sends authentication email, if user did not get the first one from the registration
     *
     * @param {IEmailRequired} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public emailSendAuthentication(body:IEmailRequired):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person/authentication_email`, body, [200]);
    }

    /**
     * @name emailSendPasswordRecoveryEmail
     * @summary send Email password recovery email
     * @operationId person_passwordRecoverySendEmail
     * @tags Access
     *
     * @description sends email with link for changing forgotten password
     *
     * @param {IEmailRequired} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public emailSendPasswordRecoveryEmail(body:IEmailRequired):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person/password/recovery_mail`, body, [200]);
    }

    /**
     * @name employeeAdd
     * @summary add Employee
     * @operationId customer_add_employee
     * @tags Price & Invoice & Tariffs
     *
     * @description Adds employee to a company. Add them again for send new invitations
     *
     * @param {ICustomerEmployee} body - Contains Json with values
     *
     * @returns {ICustomer} [code 200] Updated successfully
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public employeeAdd(body:ICustomerEmployee):Promise<ICustomer> {
        return this.requestRestPath("POST", `/employee`, body, [200]);
    }

    /**
     * @name employeeRemove
     * @summary remove Employee
     * @operationId customer_remove_employee
     * @tags Price & Invoice & Tariffs
     *
     * @description Removes employee from a company.
     *
     * @param {string} employee_id
     *
     * @returns {IResultOk} [code 200] Removed successfully
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public employeeRemove(employee_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/employee/${employee_id}`, {}, [200]);
    }

    /**
     * @name entityValidation
     * @summary validation Entity
     * @operationId something_validateProperty
     * @tags Person
     *
     * @description for cyclical validation during registration, key contains 'email' or 'nick_name'. Or can be used for 'vat_number' as a key.
     *
     * @param {IEntityValidationIn} body - Contains Json with values
     *
     * @returns {IEntityValidationOut} [code 200] Result if it is possible to use
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public entityValidation(body:IEntityValidationIn):Promise<IEntityValidationOut> {
        return this.requestRestPath("POST", `/validate_entity`, body, [200]);
    }

    /**
     * @name facebookLogin
     * @summary login Facebook
     * @operationId Facebook
     * @tags Access, Social-Facebook
     *
     * @description For login via Facebook 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {ISocialNetworkLogin} body - Contains Json with values
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public facebookLogin(body:ISocialNetworkLogin):Promise<ISocialLogin> {
        return this.requestRestPath("POST", `/facebook`, body, [200]);
    }

    /**
     * @name garfieldCreate
     * @summary create Garfield
     * @operationId create_Garfield
     * @tags Garfield
     *
     * @description create Garfield
     *
     * @param {IGarfieldNew} body - Contains Json with values
     *
     * @returns {IGarfield} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public garfieldCreate(body:IGarfieldNew):Promise<IGarfield> {
        return this.requestRestPath("POST", `/garfiled`, body, [200]);
    }

    /**
     * @name garfieldDelete
     * @summary delete Garfield
     * @operationId remove_Garfield
     * @tags Garfield
     *
     * @description get Garfield  by ID
     *
     * @param {string} garfield_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public garfieldDelete(garfield_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/garfiled/${garfield_id}`, {}, [200]);
    }

    /**
     * @name garfieldEdit
     * @summary edit Garfield
     * @operationId edit_Garfield
     * @tags Garfield
     *
     * @description edit Garfield
     *
     * @param {string} garfield_id
     * @param {IGarfieldEdit} body - Contains Json with values
     *
     * @returns {IGarfield} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public garfieldEdit(garfield_id:string, body:IGarfieldEdit):Promise<IGarfield> {
        return this.requestRestPath("PUT", `/garfiled/${garfield_id}`, body, [200]);
    }

    /**
     * @name garfieldGet
     * @summary get Garfield
     * @operationId get_Garfield
     * @tags Garfield
     *
     * @description get Garfield  by ID
     *
     * @param {string} garfield_id
     *
     * @returns {IGarfield} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public garfieldGet(garfield_id:string):Promise<IGarfield> {
        return this.requestRestPath("GET", `/garfiled/${garfield_id}`, {}, [200]);
    }

    /**
     * @name garfieldGetList
     * @summary get Garfield List
     * @operationId get_Garfield_list
     * @tags Garfield
     *
     * @description get Garfield List
     *
     *
     * @returns {IGarfield[]} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public garfieldGetList():Promise<IGarfield[]> {
        return this.requestRestPath("GET", `/garfield`, {}, [200]);
    }

    /**
     * @name getBug
     * @summary Bug get
     * @operationId serverError_get
     * @tags Admin-Report
     *
     * @param {string} bug_id - bug_id String path
     *
     * @returns {IServerError} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public getBug(bug_id:string):Promise<IServerError> {
        return this.requestRestPath("GET", `/admin/bug/${bug_id}`, {}, [200]);
    }

    /**
     * @name getBugsAll
     * @summary Bugs get all
     * @operationId serverError_getAll
     * @tags Admin-Report
     *
     *
     * @returns {IServerError[]} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public getBugsAll():Promise<IServerError[]> {
        return this.requestRestPath("GET", `/admin/bug`, {}, [200]);
    }

    /**
     * @name gitHubLogin
     * @summary login GitHub
     * @operationId GitHub
     * @tags Access, Social-GitHub
     *
     * @description For login via GitHub 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {ISocialNetworkLogin} body - Contains Json with values
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gitHubLogin(body:ISocialNetworkLogin):Promise<ISocialLogin> {
        return this.requestRestPath("POST", `/github`, body, [200]);
    }

    /**
     * @name gridProgramCreate
     * @summary create GridProgram
     * @operationId gridProgram_create
     * @tags Grid
     *
     * @description creating new GridProgram
     *
     * @param {string} grid_project_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IGridProgram} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramCreate(grid_project_id:string, body:INameAndDescription):Promise<IGridProgram> {
        return this.requestRestPath("POST", `/grid_program/${grid_project_id}`, body, [201]);
    }

    /**
     * @name gridProgramDelete
     * @summary delete GridProgram
     * @operationId gridProgram_delete
     * @tags Grid
     *
     * @description remove GridProgram by query = grid_program_id
     *
     * @param {string} grid_program_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramDelete(grid_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid_program/${grid_program_id}`, {}, [200]);
    }

    /**
     * @name gridProgramGet
     * @summary get GridProgram
     * @operationId gridProgram_get
     * @tags Grid
     *
     * @description get GridProgram by query grid_program_id
     *
     * @param {string} grid_program_id
     *
     * @returns {IGridProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramGet(grid_program_id:string):Promise<IGridProgram> {
        return this.requestRestPath("GET", `/grid_program/${grid_program_id}`, {}, [200]);
    }

    /**
     * @name gridProgramGetByToken
     * @summary getByToken GridProgram
     * @operationId gridProgram_getByQRToken
     * @tags APP-Api
     *
     * @description get Grid_Program by token
     *
     * @param {string} instance_id
     * @param {string} program_version_id
     *
     * @returns {ITerminalConnectionSummary} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Bad Request - Probably token is not valid anymore
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultServerOffline} [code 477] External Server is offline
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramGetByToken(instance_id:string, program_version_id:string):Promise<ITerminalConnectionSummary> {
        return this.requestRestPath("GET", `/grid_program/app/token/${instance_id}/${program_version_id}`, {}, [200]);
    }

    /**
     * @name gridProgramTag
     * @summary tag GridProgram
     * @operationId gridProgram_addTags
     * @tags Grid
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IGridProgram} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramTag(body:ITags):Promise<IGridProgram> {
        return this.requestRestPath("PUT", `/grid_program/tags/add`, body, [200]);
    }

    /**
     * @name gridProgramUntag
     * @summary untag GridProgram
     * @operationId gridProgram_removeTags
     * @tags Grid
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IGridProgram} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramUntag(body:ITags):Promise<IGridProgram> {
        return this.requestRestPath("PUT", `/grid_program/tags/remove`, body, [200]);
    }

    /**
     * @name gridProgramUpdate
     * @summary update GridProgram
     * @operationId gridProgram_update
     * @tags Grid
     *
     * @description update GridProgram - in this case we are not support versions of grid_project
     *
     * @param {string} grid_program_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IGridProgram} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramUpdate(grid_program_id:string, body:INameAndDescription):Promise<IGridProgram> {
        return this.requestRestPath("PUT", `/grid_program/${grid_program_id}`, body, [200]);
    }

    /**
     * @name gridProgramVersionCreate
     * @summary Create GridProgramVersion
     * @operationId gridProgramVersion_create
     * @tags Grid
     *
     * @description creating new GridProgramVersion
     *
     * @param {string} grid_program_id
     * @param {IMProgramVersionNew} body - Contains Json with values
     *
     * @returns {IGridProgramVersion} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramVersionCreate(grid_program_id:string, body:IMProgramVersionNew):Promise<IGridProgramVersion> {
        return this.requestRestPath("POST", `/grid_program/version/${grid_program_id}`, body, [201]);
    }

    /**
     * @name gridProgramVersionDelete
     * @summary delete GridProgramVersion
     * @operationId gridProgramVersion_delete
     * @tags Grid
     *
     * @description remove GridProgramVersion
     *
     * @param {string} version_id
     *
     * @returns {IResultOk} [code 200] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramVersionDelete(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name gridProgramVersionEdit
     * @summary edit GridProgramVersion
     * @operationId gridProgramVersion_update
     * @tags Grid
     *
     * @description edit GridProgramVersion by query = version_id
     *
     * @param {string} version_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IGridProgramVersion} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramVersionEdit(version_id:string, body:INameAndDescription):Promise<IGridProgramVersion> {
        return this.requestRestPath("PUT", `/grid_program/version/${version_id}`, body, [200]);
    }

    /**
     * @name gridProgramVersionGet
     * @summary get GridProgramVersion
     * @operationId gridProgramVersion_get
     * @tags Grid
     *
     * @description get GridProgramVersion by query version_id
     *
     * @param {string} version_id
     *
     * @returns {IGridProgramVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProgramVersionGet(version_id:string):Promise<IGridProgramVersion> {
        return this.requestRestPath("GET", `/grid_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name gridProjectCreate
     * @summary Create GridProject
     * @operationId gridProject_create
     * @tags Grid
     *
     * @description GridProject is package for GridPrograms -> presupposition is that you need more control terminal for your IoT project. Different screens for family members, for employee etc.. But of course - you can used that for only one GridProgram
     *
     * @param {string} project_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IGridProject} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Some Json value Missing
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProjectCreate(project_id:string, body:INameAndDescription):Promise<IGridProject> {
        return this.requestRestPath("POST", `/grid_project/${project_id}`, body, [201]);
    }

    /**
     * @name gridProjectDelete
     * @summary delete GridProject
     * @operationId gridProject_delete
     * @tags Grid
     *
     * @description remove M_Project by query = grid_project_id
     *
     * @param {string} grid_project_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProjectDelete(grid_project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid_project/${grid_project_id}`, {}, [200]);
    }

    /**
     * @name gridProjectEdit
     * @summary edit GridProject
     * @operationId gridProject_update
     * @tags Grid
     *
     * @description edit basic information in M_Project by query = grid_project_id
     *
     * @param {string} grid_project_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IGridProject} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProjectEdit(grid_project_id:string, body:INameAndDescription):Promise<IGridProject> {
        return this.requestRestPath("PUT", `/grid_project/${grid_project_id}`, body, [200]);
    }

    /**
     * @name gridProjectGet
     * @summary get GridProject
     * @operationId gridProject_get
     * @tags Grid
     *
     * @description get GridProject by query = grid_project_id
     *
     * @param {string} grid_project_id
     *
     * @returns {IGridProject} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProjectGet(grid_project_id:string):Promise<IGridProject> {
        return this.requestRestPath("GET", `/grid_project/${grid_project_id}`, {}, [200]);
    }

    /**
     * @name gridProjectGetByFilter
     * @summary get GridProject by Filter
     * @operationId gridProject_get_filterByFilter
     * @tags Grid
     *
     * @description get GridProject by filter parameters
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)
     * @param {IGridProjectFilter} body - Contains Json with values
     *
     * @returns {IGridProjectList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProjectGetByFilter(page_number:number, body:IGridProjectFilter):Promise<IGridProjectList> {
        return this.requestRestPath("PUT", `/grid_project/filter/${page_number}`, body, [200]);
    }

    /**
     * @name gridProjectGetInterface
     * @summary getInterface GridProject
     * @operationId gridProject_getInterface
     * @tags Grid
     *
     * @description get accessible interface from M_Project
     *
     * @param {string} grid_project_id
     *
     * @returns {IMProjectInterface} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProjectGetInterface(grid_project_id:string):Promise<IMProjectInterface> {
        return this.requestRestPath("GET", `/grid_project/interface/${grid_project_id}`, {}, [200]);
    }

    /**
     * @name gridProjectTag
     * @summary tag GridProject
     * @operationId gridProject_addTags
     * @tags Grid
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IGridProject} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProjectTag(body:ITags):Promise<IGridProject> {
        return this.requestRestPath("PUT", `/grid_project/tags/add`, body, [200]);
    }

    /**
     * @name gridProjectUntag
     * @summary untag GridProject
     * @operationId gridProject_removeTags
     * @tags Grid
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IGridProject} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public gridProjectUntag(body:ITags):Promise<IGridProject> {
        return this.requestRestPath("PUT", `/grid_project/tags/remove`, body, [200]);
    }

    /**
     * @name hardwareBatchCreate
     * @summary create HardwareBatch
     * @operationId hardwareBatch_create
     * @tags HardwareType
     *
     * @description Create new Production Batch for Hardware Type
     *
     * @param {string} hardware_type_id
     * @param {IHardwareBatchNew} body - Contains Json with values
     *
     * @returns {IHardwareBatch} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareBatchCreate(hardware_type_id:string, body:IHardwareBatchNew):Promise<IHardwareBatch> {
        return this.requestRestPath("POST", `/hardware_batch/${hardware_type_id}`, body, [201]);
    }

    /**
     * @name hardwareBatchDelete
     * @summary delete HardwareBatch
     * @operationId hardwareBatch_delete
     * @tags HardwareType
     *
     * @description if you want delete Hardware Batch object by query = hardware_type_id
     *
     * @param {string} batch_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareBatchDelete(batch_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/hardware_batch/${batch_id}`, {}, [200]);
    }

    /**
     * @name hardwareBatchEdit
     * @summary edit HardwareBatch
     * @operationId hardwareBatch_edit
     * @tags HardwareType
     *
     * @description Create new Production Batch for Type Of Board
     *
     * @param {string} batch_id
     * @param {IHardwareBatchNew} body - Contains Json with values
     *
     * @returns {IHardwareBatch} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareBatchEdit(batch_id:string, body:IHardwareBatchNew):Promise<IHardwareBatch> {
        return this.requestRestPath("PUT", `/hardware_batch/${batch_id}`, body, [200]);
    }

    /**
     * @name hardwareCreateManual
     * @summary create Hardware manual
     * @operationId hardware_create_manual
     * @tags Admin-Board
     *
     * @description This Api is using only for developing mode, for registration of our Board - in future it will be used only by machine in factory or hardware themselves with "registration procedure". Hardware is not allowed to delete! Only deactivate. Classic User can only register that to own project or own to account
     *
     * @param {IBoardNewManual} body - Contains Json with values
     *
     * @returns {IHardware} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareCreateManual(body:IBoardNewManual):Promise<IHardware> {
        return this.requestRestPath("POST", `/hardware/manual_registration`, body, [201]);
    }

    /**
     * @name hardwareGetHashAdminOnly
     * @summary get Hardware hash admin only
     * @operationId hardware_get_registration_hash
     * @tags Admin-Board
     *
     * @description This Api is using only with special Admin Permission
     *
     * @param {string} full_id
     *
     * @returns {IHardwareRegistrationHash} [code 200] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareGetHashAdminOnly(full_id:string):Promise<IHardwareRegistrationHash> {
        return this.requestRestPath("GET", `/hardware/hash/${full_id}`, {}, [200]);
    }

    /**
     * @name hardwareGroupCreate
     * @summary create HardwareGroup
     * @operationId hardwareGroup_create
     * @tags HardwareGroup
     *
     * @description Create HardwareGroup
     *
     * @param {INameAndDescProjectIdRequired} body - Contains Json with values
     *
     * @returns {IHardwareGroup} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareGroupCreate(body:INameAndDescProjectIdRequired):Promise<IHardwareGroup> {
        return this.requestRestPath("POST", `/hardware_group`, body, [200]);
    }

    /**
     * @name hardwareGroupDelete
     * @summary delete HardwareGroup
     * @operationId hardwareGroup_delete
     * @tags HardwareGroup
     *
     * @description delete BoardGroup
     *
     * @param {string} group_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareGroupDelete(group_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/hardware_group/${group_id}`, {}, [200]);
    }

    /**
     * @name hardwareGroupEdit
     * @summary edit HardwareGroup
     * @operationId hardwareGroup_update
     * @tags HardwareGroup
     *
     * @description update HardwareGroup
     *
     * @param {string} group_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IHardwareGroup} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareGroupEdit(group_id:string, body:INameAndDescription):Promise<IHardwareGroup> {
        return this.requestRestPath("PUT", `/hardware_group/${group_id}`, body, [200]);
    }

    /**
     * @name hardwareGroupGet
     * @summary get HardwareGroup
     * @operationId hardwareGroup_get
     * @tags HardwareGroup
     *
     * @description get List of BoardGroup from Project
     *
     * @param {string} group_id
     *
     * @returns {IHardwareGroup} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareGroupGet(group_id:string):Promise<IHardwareGroup> {
        return this.requestRestPath("GET", `/hardware_group/individual/${group_id}`, {}, [200]);
    }

    /**
     * @name hardwareGroupGetListByFilter
     * @summary get HardwareGroup List by Filter
     * @operationId hardwareGroup_get_filter
     * @tags HardwareGroup
     *
     * @description get List of BoardGroup from Project
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)
     * @param {IHardwareGroupFilter} body - Contains Json with values
     *
     * @returns {IHardwareGroupList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareGroupGetListByFilter(page_number:number, body:IHardwareGroupFilter):Promise<IHardwareGroupList> {
        return this.requestRestPath("PUT", `/hardware_group/filter/${page_number}`, body, [200]);
    }

    /**
     * @name hardwareRegistrationTag
     * @summary tag HardwareRegistration
     * @operationId hardwareRegistration_addTags
     * @tags HardwareRegistration
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IHardware} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareRegistrationTag(body:ITags):Promise<IHardware> {
        return this.requestRestPath("PUT", `/hardware_registration/tags/add`, body, [200]);
    }

    /**
     * @name hardwareRegistrationUntag
     * @summary untag HardwareRegistration
     * @operationId hardwareRegistration_removeTags
     * @tags HardwareRegistration
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IHardware} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareRegistrationUntag(body:ITags):Promise<IHardware> {
        return this.requestRestPath("PUT", `/hardware_registration/tags/remove`, body, [200]);
    }

    /**
     * @name hardwareTypeCreate
     * @summary create HardwareType
     * @operationId hardwareType_create
     * @tags HardwareType
     *
     * @description The HardwareType is category for IoT. Like Raspberry2, Arduino-Uno etc. 
     *    
     *    We using that for compilation, sorting libraries, filters and more..
     *
     * @param {IHardwareTypeNew} body - Contains Json with values
     *
     * @returns {IHardwareType} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareTypeCreate(body:IHardwareTypeNew):Promise<IHardwareType> {
        return this.requestRestPath("POST", `/hardware_type`, body, [201]);
    }

    /**
     * @name hardwareTypeDelete
     * @summary delete HardwareType
     * @operationId hardwareType_delete
     * @tags HardwareType
     *
     * @description if you want delete HardwareType object by query = hardware_type_id
     *
     * @param {string} hardware_type_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareTypeDelete(hardware_type_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/hardware_type/${hardware_type_id}`, {}, [200]);
    }

    /**
     * @name hardwareTypeEdit
     * @summary edit HardwareType
     * @operationId hardwareType_update
     * @tags HardwareType
     *
     * @description if you want edit base HardwareType information
     *
     * @param {string} hardware_type_id
     * @param {IHardwareTypeNew} body - Contains Json with values
     *
     * @returns {IHardwareType} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareTypeEdit(hardware_type_id:string, body:IHardwareTypeNew):Promise<IHardwareType> {
        return this.requestRestPath("PUT", `/hardware_type/${hardware_type_id}`, body, [200]);
    }

    /**
     * @name hardwareTypeGet
     * @summary get HardwareType
     * @operationId hardwareType_get
     * @tags HardwareType
     *
     * @description if you want get HardwareType object by query = hardware_type_id
     *
     * @param {string} hardware_type_id
     *
     * @returns {IHardwareType} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareTypeGet(hardware_type_id:string):Promise<IHardwareType> {
        return this.requestRestPath("GET", `/hardware_type/${hardware_type_id}`, {}, [200]);
    }

    /**
     * @name hardwareTypeSetcprogramversion_as_main
     * @summary set_c_program_version_as_main HardwareType
     * @operationId c_program_markScheme
     * @tags Admin-C_Program, HardwareType
     *
     * @description set C_Program version as Main for This Type of Device. Version must be from Main or Test C Program of this version
     *
     * @param {string} version_id - version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareTypeSetcprogramversion_as_main(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/default/mark/${version_id}`, {}, [200]);
    }

    /**
     * @name hardwareTypeUploadPicture
     * @summary upload HardwareType picture
     * @operationId hardwareType_uploadPicture
     * @tags HardwareType
     *
     * @description Upload HardwareType picture
     *
     * @param {string} hardware_type_id
     * @param {IBase64File} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareTypeUploadPicture(hardware_type_id:string, body:IBase64File):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/hardware_type/picture/${hardware_type_id}`, body, [200]);
    }

    /**
     * @name hardwareTypesGetAll
     * @summary get HardwareTypes All
     * @operationId hardwareType_getAll
     * @tags HardwareType
     *
     * @description if you want get all HardwareType objects
     *
     *
     * @returns {IHardwareType[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareTypesGetAll():Promise<IHardwareType[]> {
        return this.requestRestPath("GET", `/hardware_type/all`, {}, [200]);
    }

    /**
     * @name hardwareUpdateBootloader
     * @summary update Hardware Bootloader
     * @operationId bootLoader_manualUpdate
     * @tags Bootloader
     *
     * @description List of Hardware Id for update on latest bootloader version (system used latest bootloader for type of hardware)
     *
     * @param {IBoardBootloaderUpdate} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareUpdateBootloader(body:IBoardBootloaderUpdate):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/bootloader/update_device_list`, body, [200]);
    }

    /**
     * @name hardwareUploadPicture
     * @summary uploadPicture Hardware
     * @operationId hardware_uploadPicture
     * @tags Hardware
     *
     * @description Upload Board file
     *
     * @param {string} hardware_id
     * @param {IBase64File} body - Contains Json with values
     *
     * @returns {IHardware} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public hardwareUploadPicture(hardware_id:string, body:IBase64File):Promise<IHardware> {
        return this.requestRestPath("PUT", `/hardware/picture/upload/${hardware_id}`, body, [200]);
    }

    /**
     * @name homerServerCreateAutomatically
     * @summary create Homer_Server Automatically
     * @operationId homer_server_create_automaticaly
     * @tags External-Server
     *
     * @description Create new Homer_Server - private or public
     *
     * @param {ICloudHomerServerNewAuto} body - Contains Json with values
     *
     * @returns {IHomerServer} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerCreateAutomatically(body:ICloudHomerServerNewAuto):Promise<IHomerServer> {
        return this.requestRestPath("POST", `/homer_server_automaticaly`, body, [201]);
    }

    /**
     * @name homerServerCreateManually
     * @summary create Homer_Server Manually
     * @operationId homer_server_create_manualy
     * @tags External-Server
     *
     * @description Create new Homer_Server - private or public
     *
     * @param {ICloudHomerServerNewManually} body - Contains Json with values
     *
     * @returns {IHomerServer} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerCreateManually(body:ICloudHomerServerNewManually):Promise<IHomerServer> {
        return this.requestRestPath("POST", `/homer_server_manualy`, body, [201]);
    }

    /**
     * @name homerServerDelete
     * @summary delete Homer_Server
     * @operationId homer_server_delete
     * @tags External-Server
     *
     * @description remove Compilation_Servers
     *
     * @param {string} server_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerDelete(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/homer_server/server/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServerEdit
     * @summary edit Homer_Server
     * @operationId homer_server_edit
     * @tags External-Server
     *
     * @description Edit basic information Compilation_Server
     *
     * @param {string} server_id
     * @param {ICloudHomerServerNewManually} body - Contains Json with values
     *
     * @returns {IHomerServer} [code 200] Updated successfully
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerEdit(server_id:string, body:ICloudHomerServerNewManually):Promise<IHomerServer> {
        return this.requestRestPath("PUT", `/homer_server/server/edit/${server_id}`, body, [200]);
    }

    /**
     * @name homerServerEditSetBackupServer
     * @summary edit Homer_Server Set Backup Server 
     * @operationId homer_server_set_backup_server
     * @tags Admin-External-Server
     *
     * @description Edit basic information Compilation_Server
     *
     * @param {string} server_id
     *
     * @returns {IHomerServer} [code 200] Updated successfully
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerEditSetBackupServer(server_id:string):Promise<IHomerServer> {
        return this.requestRestPath("PUT", `/homer_server/set_backup/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServerEditSetMainServer
     * @summary edit Homer_Server Set Main Server 
     * @operationId homer_server_set_main_server
     * @tags Admin-External-Server
     *
     * @description Edit basic information Compilation_Server
     *
     * @param {string} server_id
     *
     * @returns {IHomerServer} [code 200] Updated successfully
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerEditSetMainServer(server_id:string):Promise<IHomerServer> {
        return this.requestRestPath("PUT", `/homer_server/set_main/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServerGet
     * @summary get Homer_Server
     * @operationId homer_server_get
     * @tags Admin-External-Server
     *
     * @description get all Homer Servers
     *
     * @param {string} server_id
     *
     * @returns {IHomerServer} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerGet(server_id:string):Promise<IHomerServer> {
        return this.requestRestPath("GET", `/homer_server/server/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServerGetRegistrationComponents
     * @summary get Homer_Server Registration Components
     * @operationId get_registration_data
     * @tags External-Server
     *
     * @description Get All data for User registration form in Portal
     *
     *
     * @returns {IServerRegistrationFormData} [code 200] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerGetRegistrationComponents():Promise<IServerRegistrationFormData> {
        return this.requestRestPath("GET", `/homer_server_registration_data`, {}, [200]);
    }

    /**
     * @name homerServerRestart
     * @summary restart Homer_Server
     * @operationId homer_server_restart
     * @tags External-Server
     *
     * @description Restart Virtual Homer_Server machine if its supported
     *
     * @param {string} server_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerRestart(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/homer_server/action/restart/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServerShutdown
     * @summary shut_down Homer_Server
     * @operationId homer_server_power_down
     * @tags External-Server
     *
     * @description Shut Down Virtual Homer_Server if its supported
     *
     * @param {string} server_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerShutdown(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/homer_server/action/shutdown/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServerStart
     * @summary start Homer_Server
     * @operationId homer_server_power_on
     * @tags External-Server
     *
     * @description Start Virtual Homer_Server machine if its supported
     *
     * @param {string} server_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServerStart(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/homer_server/action/start/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServersGetList
     * @summary get Homer_Servers List
     * @operationId homer_server_by_filter
     * @tags Admin-External-Server
     *
     * @description get all Homer Servers
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)
     * @param {IHomerServerFilter} body - Contains Json with values
     *
     * @returns {IHomerServerList} [code 200] Ok Result
     *
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public homerServersGetList(page_number:number, body:IHomerServerFilter):Promise<IHomerServerList> {
        return this.requestRestPath("PUT", `/homer_server/${page_number}`, body, [200]);
    }

    /**
     * @name instanceCreate
     * @summary create Instance
     * @operationId instance_create
     * @tags Instance
     *
     * @param {IInstanceNew} body - Contains Json with values
     *
     * @returns {IInstance} [code 201] Successfully updated
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceCreate(body:IInstanceNew):Promise<IInstance> {
        return this.requestRestPath("POST", `/instance`, body, [201]);
    }

    /**
     * @name instanceEdit
     * @summary edit Instance
     * @operationId instance_update
     * @tags Instance
     *
     * @param {string} instance_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IInstance} [code 200] Successfully updated
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceEdit(instance_id:string, body:INameAndDescription):Promise<IInstance> {
        return this.requestRestPath("PUT", `/instance/${instance_id}`, body, [200]);
    }

    /**
     * @name instanceGet
     * @summary get Instance
     * @operationId instance_get
     * @tags Instance
     *
     * @param {string} instance_id
     *
     * @returns {IInstance} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceGet(instance_id:string):Promise<IInstance> {
        return this.requestRestPath("GET", `/instance/${instance_id}`, {}, [200]);
    }

    /**
     * @name instanceGetByFilter
     * @summary get Instance by Filter
     * @operationId get_b_program_instance_by_filter
     * @tags Instance
     *
     * @description Get List of Instances. According to permission - system return only Instance from project, where is user owner or all Instances if user have static Permission key
     *
     * @param {number} page_number
     * @param {IInstanceFilter} body - Contains Json with values
     *
     * @returns {IInstanceList} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceGetByFilter(page_number:number, body:IInstanceFilter):Promise<IInstanceList> {
        return this.requestRestPath("PUT", `/instance/filter/${page_number}`, body, [200]);
    }

    /**
     * @name instanceRemove
     * @summary remove Instance
     * @operationId instance_delete
     * @tags Instance
     *
     * @param {string} instance_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceRemove(instance_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/instance/${instance_id}`, {}, [200]);
    }

    /**
     * @name instanceShutdown
     * @summary shutdown Instance
     * @operationId instance_shutdown
     * @tags Instance
     *
     * @description stop instance of blocko and remove from cloud.
     *
     * @param {string} instance_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceShutdown(instance_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/instance/shutdown/${instance_id}`, {}, [200]);
    }

    /**
     * @name instanceSnapshotCreate
     * @summary create InstanceSnapshot
     * @operationId instanceSnapshot_create
     * @tags Instance
     *
     * @param {string} instance_id
     * @param {IInstanceSnapshotNew} body - Contains Json with values
     *
     * @returns {IInstanceSnapshot} [code 201] Successfully updated
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceSnapshotCreate(instance_id:string, body:IInstanceSnapshotNew):Promise<IInstanceSnapshot> {
        return this.requestRestPath("POST", `/instance/snapshot/${instance_id}`, body, [201]);
    }

    /**
     * @name instanceSnapshotDelete
     * @summary delete InstanceSnapshot
     * @operationId instanceSnapshot_delete
     * @tags Instance
     *
     * @description delete Instance
     *
     * @param {string} snapshot_id
     *
     * @returns {IResultOk} [code 200] Successfully deleted
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceSnapshotDelete(snapshot_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/instance/snapshot/${snapshot_id}`, {}, [200]);
    }

    /**
     * @name instanceSnapshotDeploy
     * @summary deploy InstanceSnapshot
     * @operationId instanceSnapshot_deploy
     * @tags Instance
     *
     * @description deploy instance of blocko to cloud.
     *
     * @param {IInstanceSnapshotDeploy} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully uploaded
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceSnapshotDeploy(body:IInstanceSnapshotDeploy):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/instance/snapshot/deploy`, body, [200]);
    }

    /**
     * @name instanceSnapshotEdit
     * @summary edit InstanceSnapshot
     * @operationId instanceSnapshot_udpate
     * @tags Instance
     *
     * @param {string} snapshot_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IInstanceSnapshot} [code 200] Successfully updated
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceSnapshotEdit(snapshot_id:string, body:INameAndDescription):Promise<IInstanceSnapshot> {
        return this.requestRestPath("PUT", `/instance/snapshot/update/${snapshot_id}`, body, [200]);
    }

    /**
     * @name instanceSnapshotGet
     * @summary get InstanceSnapshot
     * @operationId instanceSnapshot_get
     * @tags Instance
     *
     * @param {string} snapshot_id
     *
     * @returns {IInstanceSnapshot} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceSnapshotGet(snapshot_id:string):Promise<IInstanceSnapshot> {
        return this.requestRestPath("GET", `/instance/snapshot/get/${snapshot_id}`, {}, [200]);
    }

    /**
     * @name instanceTag
     * @summary tag Instance
     * @operationId instance_addTags
     * @tags Instance
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IInstance} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceTag(body:ITags):Promise<IInstance> {
        return this.requestRestPath("PUT", `/instance/tags/add`, body, [200]);
    }

    /**
     * @name instanceUntag
     * @summary untag Instance
     * @operationId instance_removeTags
     * @tags Instance
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IInstance} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceUntag(body:ITags):Promise<IInstance> {
        return this.requestRestPath("PUT", `/instance/tags/remove`, body, [200]);
    }

    /**
     * @name instanceUpdateGridSettings
     * @summary update Instance Grid Settings
     * @operationId instance_change_settings_grid_App
     * @tags Instance
     *
     * @param {string} snapshot_id
     * @param {ISwaggerInstanceSnapShotConfiguration} body - Contains Json with values
     *
     * @returns {IInstanceSnapshot} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public instanceUpdateGridSettings(snapshot_id:string, body:ISwaggerInstanceSnapShotConfiguration):Promise<IInstanceSnapshot> {
        return this.requestRestPath("PUT", `/instance/grid_app/${snapshot_id}`, body, [200]);
    }

    /**
     * @name invoiceDelete
     * @summary delete Invoice
     * @operationId invoice_delete
     * @tags Admin-Invoice
     *
     * @description remove Invoice only with permission
     *
     * @param {string} invoice_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public invoiceDelete(invoice_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/invoice/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceEditSetAsPaid
     * @summary edit Invoice Set As Paid
     * @operationId invoice_set_as_paid
     * @tags Admin-Invoice
     *
     * @description remove Invoice only with permission
     *
     * @param {string} invoice_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public invoiceEditSetAsPaid(invoice_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/invoice/set_pay/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceGet
     * @summary get Invoice
     * @operationId invoice_get
     * @tags Price & Invoice & Tariffs
     *
     * @description get summary information from invoice
     *
     * @param {string} invoice_id
     *
     * @returns {IInvoiceFullDetails} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public invoiceGet(invoice_id:string):Promise<IInvoiceFullDetails> {
        return this.requestRestPath("GET", `/invoice/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceGetPDFFile
     * @summary get Invoice PDF file
     * @operationId invoice_getPdf
     * @tags Price & Invoice & Tariffs
     *
     * @description get PDF invoice file
     *
     * @param {string} kind
     * @param {string} invoice_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public invoiceGetPDFFile(kind:string, invoice_id:string):Promise<IResultOk> {
        return this.requestRestPath("GET", `/invoice/pdf/${kind}/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceResend
     * @summary resend Invoice
     * @operationId invoice_resend
     * @tags Price & Invoice & Tariffs
     *
     * @description resend Invoice to specific email
     *
     * @param {string} invoice_id
     * @param {IResendEmail} body - Contains Json with values - values in Json is not requierd
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong 
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public invoiceResend(invoice_id:string, body:IResendEmail):Promise<IResultOk> {
        return this.requestRestPath("POST", `/invoice/resend/${invoice_id}`, body, [200]);
    }

    /**
     * @name invoiceSendReimbursement
     * @summary send Invoice reimbursement
     * @operationId invoice_reimbursement
     * @tags Price & Invoice & Tariffs
     *
     * @description reimbursement of an unpaid invoice - with settings from creating product before
     *
     * @param {string} invoice_id
     *
     * @returns {IInvoice} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public invoiceSendReimbursement(invoice_id:string):Promise<IInvoice> {
        return this.requestRestPath("POST", `/invoice/reimbursement/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceSendReminder
     * @summary send Invoice Reminder
     * @operationId invoice_reminder
     * @tags Admin-Invoice
     *
     * @description get PDF invoice file
     *
     * @param {string} invoice_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public invoiceSendReminder(invoice_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/invoice/send_remainder/${invoice_id}`, {}, [200]);
    }

    /**
     * @name libraryCreate
     * @summary create Library
     * @operationId library_create
     * @tags Library
     *
     * @description Create Library for C programs 
     *
     * @param {ILibraryNew} body - Contains Json with values
     *
     * @returns {ILibrary} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryCreate(body:ILibraryNew):Promise<ILibrary> {
        return this.requestRestPath("POST", `/library`, body, [201]);
    }

    /**
     * @name libraryDelete
     * @summary delete Library
     * @operationId library_delete
     * @tags Library
     *
     * @description For remove Library
     *
     * @param {string} library_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryDelete(library_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/library/${library_id}`, {}, [200]);
    }

    /**
     * @name libraryEdit
     * @summary edit Library
     * @operationId library_edit
     * @tags Library
     *
     * @description Edit Library name and description
     *
     * @param {string} library_id
     * @param {ILibraryNew} body - Contains Json with values
     *
     * @returns {ILibrary} [code 200] Successfully updated
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryEdit(library_id:string, body:ILibraryNew):Promise<ILibrary> {
        return this.requestRestPath("PUT", `/library/${library_id}`, body, [200]);
    }

    /**
     * @name libraryGet
     * @summary get Library
     * @operationId library_get
     * @tags Library
     *
     * @description if you want to get Library.
     *
     * @param {string} library_id
     *
     * @returns {ILibrary} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryGet(library_id:string):Promise<ILibrary> {
        return this.requestRestPath("GET", `/library/${library_id}`, {}, [200]);
    }

    /**
     * @name libraryGetListByFilter
     * @summary get Library List by Filter
     * @operationId library_getByFilter
     * @tags Library
     *
     * @description if you want to get Libraries filtered by specific parameters. For private Libraries under project set project_id, for all public use empty JSON
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...n. For first call, use 1
     * @param {ILibraryFilter} body - Contains Json with values
     *
     * @returns {ILibraryList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryGetListByFilter(page_number:number, body:ILibraryFilter):Promise<ILibraryList> {
        return this.requestRestPath("PUT", `/library/filter/${page_number}`, body, [200]);
    }

    /**
     * @name libraryMakeClone
     * @summary make_Clone Library
     * @operationId library_clone
     * @tags Library
     *
     * @description clone Library for private
     *
     * @param {ILibraryCopy} body - Contains Json with values
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryMakeClone(body:ILibraryCopy):Promise<ICProgram> {
        return this.requestRestPath("PUT", `/library/clone`, body, [200]);
    }

    /**
     * @name libraryTag
     * @summary tag Library
     * @operationId library_addTags
     * @tags Library
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {ILibrary} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryTag(body:ITags):Promise<ILibrary> {
        return this.requestRestPath("PUT", `/library/tags/add`, body, [200]);
    }

    /**
     * @name libraryUntag
     * @summary untag Library
     * @operationId library_removeTags
     * @tags Library
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {ILibrary} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryUntag(body:ITags):Promise<ILibrary> {
        return this.requestRestPath("PUT", `/library/tags/remove`, body, [200]);
    }

    /**
     * @name libraryVersionCreate
     * @summary create Library_Version
     * @operationId library_version_create
     * @tags Library
     *
     * @description If you want add new code to Library
     *
     * @param {string} library_id
     * @param {ILibraryVersionNew} body - Contains Json with values
     *
     * @returns {ILibraryVersion} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Some Json value Missing
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryVersionCreate(library_id:string, body:ILibraryVersionNew):Promise<ILibraryVersion> {
        return this.requestRestPath("POST", `/library/version/${library_id}`, body, [201]);
    }

    /**
     * @name libraryVersionDelete
     * @summary delete Library_Version
     * @operationId library_version_delete
     * @tags Library
     *
     * @description delete Library by query = version_id
     *
     * @param {string} version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryVersionDelete(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/library/version/${version_id}`, {}, [200]);
    }

    /**
     * @name libraryVersionEdit
     * @summary edit Library_Version
     * @operationId library_version_edit
     * @tags Library
     *
     * @description For update basic (name and description) information in Version of Library. If you want update code. You have to create new version. And after that you can delete previous version
     *
     * @param {string} version_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {ILibraryVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryVersionEdit(version_id:string, body:INameAndDescription):Promise<ILibraryVersion> {
        return this.requestRestPath("PUT", `/library/version/${version_id}`, body, [200]);
    }

    /**
     * @name libraryVersionEditResponsePublication
     * @summary edit Library_Version Response publication
     * @operationId library_public_response
     * @tags Admin-Library
     *
     * @description sets Approval_state to pending
     *
     * @param {ICommunityVersionPublishResponse} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryVersionEditResponsePublication(body:ICommunityVersionPublishResponse):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/library/version_for_aprove/approve_decision`, body, [200]);
    }

    /**
     * @name libraryVersionGet
     * @summary get Library_Version
     * @operationId library_version_get
     * @tags Library
     *
     * @description get Version of Library by query = version_id
     *
     * @param {string} version_id
     *
     * @returns {ILibraryVersion} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryVersionGet(version_id:string):Promise<ILibraryVersion> {
        return this.requestRestPath("GET", `/library/version/${version_id}`, {}, [200]);
    }

    /**
     * @name libraryVersionMakePublic
     * @summary make Library_Version public
     * @operationId library_version_make_public
     * @tags Library
     *
     * @description Make Library public, so other users can see it and use it. Attention! Attention! Attention! A user can publish only three programs at the stage waiting for approval.
     *
     * @param {string} version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Bad Request
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public libraryVersionMakePublic(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/library/version/make_public/${version_id}`, {}, [200]);
    }

    /**
     * @name notificationConfirm
     * @summary confirm Notification
     * @operationId notification_confirm
     * @tags Notifications
     *
     * @description Confirms notification
     *
     * @param {string} notification_id
     * @param {INotificationConfirm} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public notificationConfirm(notification_id:string, body:INotificationConfirm):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/notification/confirm/${notification_id}`, body, [200]);
    }

    /**
     * @name notificationDelete
     * @summary delete Notification
     * @operationId notification_delete
     * @tags Notifications
     *
     * @description remove notification by id
     *
     * @param {string} notification_id
     *
     * @returns {IResultOk} [code 200] Delete Successful
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public notificationDelete(notification_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/notification/${notification_id}`, {}, [200]);
    }

    /**
     * @name notificationGetLatest
     * @summary get Notification latest
     * @operationId notification_getByFilter
     * @tags Notifications
     *
     * @description Get list of latest user notifications. Server return maximum 25 latest objects. 
     *    
     *     For get another page (next 25 notifications) call this api with "page_number" path parameter. 
     *    
     *     May missing or you can insert Integer values from page[1,2...,n] in JsonNotification body cannot by documented through swagger. Visit wiki.byzance.cz
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...  For first call, use 1
     *
     * @returns {INotificationList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public notificationGetLatest(page_number:number):Promise<INotificationList> {
        return this.requestRestPath("GET", `/notification/list/${page_number}`, {}, [200]);
    }

    /**
     * @name notificationsGetUnconfirmed
     * @summary get Notifications unconfirmed
     * @operationId notifications_getUnconfirmed
     * @tags Notifications
     *
     * @description This API should by called right after user logs in. Sends notifications which require confirmation via websocket.
     *
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public notificationsGetUnconfirmed():Promise<IResultOk> {
        return this.requestRestPath("GET", `/notification/unconfirmed`, {}, [200]);
    }

    /**
     * @name notificationsMarkAsRead
     * @summary mark Notifications as read
     * @operationId notification_read
     * @tags Notifications
     *
     * @description Mark notifications as read. Send list with ids
     *
     * @param {INotificationRead} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully marked as read
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public notificationsMarkAsRead(body:INotificationRead):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/notification/read`, body, [200]);
    }

    /**
     * @name onTerminateDemand
     * @summary terminate on demand
     * @operationId product_terminateOnDemand
     * @tags Price & Invoice & Tariffs
     *
     * @description cancel automatic payments in Product
     *
     * @param {string} product_id
     *
     * @returns {IResultOk} [code 200] Successfully updated
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public onTerminateDemand(product_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/product/terminate_ondemand/${product_id}`, {}, [200]);
    }

    /**
     * @name permissionAddToPerson
     * @summary add Permission to Person
     * @operationId permission_person_add
     * @tags Admin-Permission
     *
     * @description If you want add permission to Person. You need permission for that or have right system Roles
     *
     * @param {string} person_id
     * @param {string} permission_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public permissionAddToPerson(person_id:string, permission_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/secure/permission/person/${person_id}/${permission_id}`, {}, [200]);
    }

    /**
     * @name permissionEdit
     * @summary edit Permission
     * @operationId permission_edit
     * @tags Admin-Permission
     *
     * @description edit permission description
     *
     * @param {string} permission_id
     * @param {IPermissionEdit} body - Contains Json with values
     *
     * @returns {IPermission[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public permissionEdit(permission_id:string, body:IPermissionEdit):Promise<IPermission[]> {
        return this.requestRestPath("PUT", `/secure/permission/${permission_id}`, body, [200]);
    }

    /**
     * @name permissionRemoveFromPerson
     * @summary remove Permission from Person
     * @operationId permission_person_remove
     * @tags Admin-Permission
     *
     * @description If you want remove permission from Person. You need permission for that or have right system Roles
     *
     * @param {string} person_id
     * @param {string} permission_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public permissionRemoveFromPerson(person_id:string, permission_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/secure/permission/person/${person_id}/${permission_id}`, {}, [200]);
    }

    /**
     * @name permissionsGetAll
     * @summary get Permissions All
     * @operationId permission_get_all
     * @tags Admin-Permission
     *
     * @description Get all user Permission. You need permission for that or have right system Roles
     *
     *
     * @returns {IPermission[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public permissionsGetAll():Promise<IPermission[]> {
        return this.requestRestPath("GET", `/secure/permission/all`, {}, [200]);
    }

    /**
     * @name personActivate
     * @summary activate Person
     * @operationId person_activate
     * @tags Admin-Person
     *
     * @description activate Person by id
     *
     * @param {string} person_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personActivate(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/activate/${person_id}`, {}, [200]);
    }

    /**
     * @name personCreate
     * @summary create Person
     * @operationId person_create
     * @tags Person
     *
     * @description create new Person with unique email and nick_name
     *
     * @param {IPersonNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personCreate(body:IPersonNew):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person`, body, [200]);
    }

    /**
     * @name personDeactivate
     * @summary deactivate Person
     * @operationId person_deactivate
     * @tags Admin-Person
     *
     * @description deactivate Person by id
     *
     * @param {string} person_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personDeactivate(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/deactivate/${person_id}`, {}, [200]);
    }

    /**
     * @name personDelete
     * @summary delete Person
     * @operationId person_delete
     * @tags Admin-Person
     *
     * @description delete Person by id
     *
     * @param {string} person_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personDelete(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/person/${person_id}`, {}, [200]);
    }

    /**
     * @name personDeleteLoggedConnections
     * @summary delete Person logged connections
     * @operationId remove_Person_Connection
     * @tags Person
     *
     * @description You know where the user is logged in. And you can log out this connection. (Terminate token)
     *
     * @param {string} connection_id
     *
     * @returns {IResultOk} [code 200] OK result
     *
     * @throws {IResultFound} [code 404] Not Found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personDeleteLoggedConnections(connection_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/person/connection/${connection_id}`, {}, [200]);
    }

    /**
     * @name personDeletePicture
     * @summary delete Person picture
     * @operationId person_removePicture
     * @tags Person
     *
     * @description Removes picture of logged person
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personDeletePicture():Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/picture/remove`, {}, [200]);
    }

    /**
     * @name personEdit
     * @summary edit Person
     * @operationId person_update
     * @tags Person
     *
     * @description Edit person basic information
     *
     * @param {string} person_id
     * @param {IPersonUpdate} body - Contains Json with values
     *
     * @returns {IPerson} [code 200] Successfully updated
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personEdit(person_id:string, body:IPersonUpdate):Promise<IPerson> {
        return this.requestRestPath("PUT", `/person/${person_id}`, body, [200]);
    }

    /**
     * @name personEditProperty
     * @summary edit Person property
     * @operationId person_changeLoginProperty
     * @tags Person
     *
     * @description Request password or email change. API does not change password or email, only sends email for authorization of the change and holds values in different object.JSON value 'property' contains only 'password' or 'email'
     *
     * @param {IPersonChangeProperty} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personEditProperty(body:IPersonChangeProperty):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person/change_property`, body, [200]);
    }

    /**
     * @name personEmailApprovingPasswordOrChange
     * @summary email Person approving password or email change
     * @operationId person_authorizePropertyChange
     * @tags Admin-Person
     *
     * @param {string} token
     * @param {IPersonChangeProperty} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personEmailApprovingPasswordOrChange(token:string, body:IPersonChangeProperty):Promise<IResultOk> {
        return this.requestRestPath("GET", `/person/authorize_change/${token}`, body, [200]);
    }

    /**
     * @name personGet
     * @summary get Person
     * @operationId person_get
     * @tags Person
     *
     * @description get Person by id
     *
     * @param {string} person_id
     *
     * @returns {IPerson} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personGet(person_id:string):Promise<IPerson> {
        return this.requestRestPath("GET", `/person/${person_id}`, {}, [200]);
    }

    /**
     * @name personGetByToken
     * @summary get Person by token
     * @operationId person_get_by_token
     * @tags Access, Person, Social-GitHub, Social-Facebook
     *
     * @description If you want login to system with social networks - you can used facebook, github or twitter api just ask for token, server responds with object where is token and redirection link. Redirect user to this link and after returning to success page that you filled in ask for token, ask again to this api and server respond with Person Object and with Roles and Permissions lists
     *
     *
     * @returns {ILoginResult} [code 200] Successfully logged
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personGetByToken():Promise<ILoginResult> {
        return this.requestRestPath("GET", `/login/person`, {}, [200]);
    }

    /**
     * @name personGetLoggedConnections
     * @summary get Person logged connections
     * @operationId person_getAllConnections
     * @tags Person
     *
     * @description get all connections, where user is logged
     *
     *
     * @returns {IAuthorizationToken[]} [code 200] OK result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not Found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personGetLoggedConnections():Promise<IAuthorizationToken[]> {
        return this.requestRestPath("GET", `/person/connection/all`, {}, [200]);
    }

    /**
     * @name personGetRolesAndPermissions
     * @summary get Person Roles and Permissions
     * @operationId system_access_get_everything
     * @tags Admin-Role, Admin-Permission, Person
     *
     * @description This api return List of Roles and List of Permission
     *
     * @param {string} person_id
     *
     * @returns {ISystemAccess} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personGetRolesAndPermissions(person_id:string):Promise<ISystemAccess> {
        return this.requestRestPath("GET", `/secure/person/system_acces/${person_id}`, {}, [200]);
    }

    /**
     * @name personRestartPassword
     * @summary restart Person password
     * @operationId person_passwordRecovery
     * @tags Access
     *
     * @description changes password if password_recovery_token is not older than 24 hours, deletes all FloatingPersonTokens
     *
     * @param {IPersonPasswordNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personRestartPassword(body:IPersonPasswordNew):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/password/recovery`, body, [200]);
    }

    /**
     * @name personUploadPicture
     * @summary upload Person picture
     * @operationId person_uploadPicture
     * @tags Person
     *
     * @description Uploads personal photo. Picture must be smaller than 800 KB and its dimensions must be between 50 and 400 pixels. If user already has a picture, it will be replaced by the new one. API requires base64 Content-Type, name of the property is 'file'.
     *
     * @param {IBase64File} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personUploadPicture(body:IBase64File):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/picture/upload`, body, [200]);
    }

    /**
     * @name personValidEmail
     * @summary valid Person email
     * @operationId person_validEmail
     * @tags Admin-Person
     *
     * @description valid Person email by id
     *
     * @param {string} person_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public personValidEmail(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/valid_email/${person_id}`, {}, [200]);
    }

    /**
     * @name printerGetOnlineState
     * @summary get_Online_State Printer
     * @operationId online_state_Printer
     * @tags Garfield
     *
     * @description get online state Printer by ID
     *
     * @param {string} garfield_id
     * @param {number} printer_id
     *
     * @returns {IPrinter} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public printerGetOnlineState(garfield_id:string, printer_id:number):Promise<IPrinter> {
        return this.requestRestPath("GET", `/printer/printer/${garfield_id}/${printer_id}`, {}, [200]);
    }

    /**
     * @name printerTestprinting
     * @summary test_printing Printer
     * @operationId print_test_Printer
     * @tags Garfield
     *
     * @description Random Generated Print test
     *
     * @param {string} garfield_id
     * @param {number} printer_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public printerTestprinting(garfield_id:string, printer_id:number):Promise<IResultOk> {
        return this.requestRestPath("POST", `/printer/test/${garfield_id}/${printer_id}`, {}, [200]);
    }

    /**
     * @name processorCreate
     * @summary create Processor
     * @operationId processor_create
     * @tags Admin-Processor
     *
     * @description If you want create new Processor. Send required json values and server respond with new object
     *
     * @param {IProcessorNew} body - Contains Json with values
     *
     * @returns {IProcessor} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public processorCreate(body:IProcessorNew):Promise<IProcessor> {
        return this.requestRestPath("POST", `/processor`, body, [201]);
    }

    /**
     * @name processorDelete
     * @summary delete Processor
     * @operationId processor_delete
     * @tags Admin-Processor
     *
     * @description If you want delete Processor by query processor_id.
     *
     * @param {string} processor_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public processorDelete(processor_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/processor/${processor_id}`, {}, [200]);
    }

    /**
     * @name processorEdit
     * @summary edit Processor
     * @operationId processor_edit
     * @tags Processor
     *
     * @description If you want update Processor.id by query = processor_id . Send required json values and server respond with update object
     *
     * @param {string} processor_id
     * @param {IProcessorNew} body - Contains Json with values
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public processorEdit(processor_id:string, body:IProcessorNew):Promise<IProcessor> {
        return this.requestRestPath("PUT", `/processor/${processor_id}`, body, [200]);
    }

    /**
     * @name processorGet
     * @summary get Processor
     * @operationId processor_get
     * @tags Processor
     *
     * @description If you get Processor by query processor_id.
     *
     * @param {string} processor_id
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public processorGet(processor_id:string):Promise<IProcessor> {
        return this.requestRestPath("GET", `/processor/${processor_id}`, {}, [200]);
    }

    /**
     * @name processorGetAll
     * @summary get Processor All
     * @operationId processor_getAll
     * @tags Processor
     *
     * @description Get list of all Processor by query
     *
     *
     * @returns {IProcessor[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public processorGetAll():Promise<IProcessor[]> {
        return this.requestRestPath("GET", `/processor`, {}, [200]);
    }

    /**
     * @name producerCreate
     * @summary create Producer
     * @operationId producer_create
     * @tags Admin-Producer
     *
     * @description if you want create new Producer. Its company owned physical hardware and we used that for filtering
     *
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IProducer} [code 201] Successfully created
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public producerCreate(body:INameAndDescription):Promise<IProducer> {
        return this.requestRestPath("POST", `/producer`, body, [201]);
    }

    /**
     * @name producerDelete
     * @summary delete Producer
     * @operationId producer_delete
     * @tags Admin-Producer
     *
     * @description if you want delete Producer
     *
     * @param {string} producer_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public producerDelete(producer_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/producer/${producer_id}`, {}, [200]);
    }

    /**
     * @name producerEdit
     * @summary edit Producer
     * @operationId producer_update
     * @tags Admin-Producer
     *
     * @description if you want edit information about Producer. Its company owned physical hardware and we used that for filtering
     *
     * @param {string} producer_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IProducer} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public producerEdit(producer_id:string, body:INameAndDescription):Promise<IProducer> {
        return this.requestRestPath("PUT", `/producer/${producer_id}`, body, [200]);
    }

    /**
     * @name producerGet
     * @summary get Producer
     * @operationId producer_get
     * @tags Producer
     *
     * @description if you want get Producer. Its company owned physical hardware and we used that for filtering
     *
     * @param {string} producer_id
     *
     * @returns {IProducer} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public producerGet(producer_id:string):Promise<IProducer> {
        return this.requestRestPath("GET", `/producer/${producer_id}`, {}, [200]);
    }

    /**
     * @name producersGetAll
     * @summary get Producers All
     * @operationId producer_getAll
     * @tags Producer
     *
     * @description if you want get list of Producers. Its list of companies owned physical hardware and we used that for filtering
     *
     *
     * @returns {IProducer[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public producersGetAll():Promise<IProducer[]> {
        return this.requestRestPath("GET", `/producer/all`, {}, [200]);
    }

    /**
     * @name productActivate
     * @summary activate Product
     * @operationId product_activate
     * @tags Price & Invoice & Tariffs
     *
     * @description Activate product Tariff and deactivate all staff around that
     *
     * @param {string} product_id
     *
     * @returns {IProduct} [code 200] Activating was successful
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productActivate(product_id:string):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/activate/${product_id}`, {}, [200]);
    }

    /**
     * @name productCreate
     * @summary create Product
     * @operationId product_create
     * @tags Price & Invoice & Tariffs
     *
     * @description It is the base object. Peak of Pyramid :). This Api is used for its creation. You can get two kind of response: 
     *    
     *    First(201):  System create new Object - Product 
     *    
     *    Second(200): The product requires payment - The server creates the object, but returns an Invoice 
     *    
     *    If the user choose credit card payment, the invoice will contain gw_url, which is a link to the payment gate, you can redirect him there. If bank transfer is chosen, server will return an Invoice, but the user will pay it independently via his bank account.
     *
     * @param {IProductNew} body - Contains Json with values
     *
     * @returns {IProduct} [code 201] Created successfully
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productCreate(body:IProductNew):Promise<IProduct> {
        return this.requestRestPath("POST", `/product`, body, [201]);
    }

    /**
     * @name productCreatePaymentDetails
     * @summary create Product payment details
     * @operationId paymentDetails_create
     * @tags Price & Invoice & Tariffs
     *
     * @description create payments details in Product
     *
     * @param {string} product_id
     * @param {IPaymentDetailsNew} body - Contains Json with values
     *
     * @returns {IPaymentDetails} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productCreatePaymentDetails(product_id:string, body:IPaymentDetailsNew):Promise<IPaymentDetails> {
        return this.requestRestPath("POST", `/product/details/${product_id}`, body, [201]);
    }

    /**
     * @name productDeactivate
     * @summary deactivate Product
     * @operationId product_deactivate
     * @tags Price & Invoice & Tariffs
     *
     * @description deactivate product Tariff and deactivate all stuff under it
     *
     * @param {string} product_id
     *
     * @returns {IProduct} [code 200] Deactivating was successful
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productDeactivate(product_id:string):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/deactivate/${product_id}`, {}, [200]);
    }

    /**
     * @name productDeleteTariff
     * @summary delete Product Tariff
     * @operationId product_delete
     * @tags Admin
     *
     * @description get PDF invoice file
     *
     * @param {string} product_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productDeleteTariff(product_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/product/${product_id}`, {}, [200]);
    }

    /**
     * @name productEditDetails
     * @summary edit Product details
     * @operationId product_update
     * @tags Price & Invoice & Tariffs
     *
     * @description edit basic details of Product
     *
     * @param {string} product_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IProduct} [code 200] Successfully updated
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productEditDetails(product_id:string, body:INameAndDescription):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/general/${product_id}`, body, [200]);
    }

    /**
     * @name productEditPaymentDetails
     * @summary edit Product payment details
     * @operationId paymentDetails_update
     * @tags Price & Invoice & Tariffs
     *
     * @description edit payments details in Product
     *
     * @param {string} payment_details_id
     * @param {IPaymentDetailsNew} body - Contains Json with values
     *
     * @returns {IPaymentDetails} [code 200] Successfully updated
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productEditPaymentDetails(payment_details_id:string, body:IPaymentDetailsNew):Promise<IPaymentDetails> {
        return this.requestRestPath("PUT", `/product/details/${payment_details_id}`, body, [200]);
    }

    /**
     * @name productExtensionActivate
     * @summary activate Product_Extension
     * @operationId productExtension_activate
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public productExtensionActivate(extension_id:string):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/product_extension/activate/${extension_id}`, {}, [200]);
    }

    /**
     * @name productExtensionCreate
     * @summary create Product_Extension
     * @operationId productExtension_create
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} product_id
     * @param {IProductExtensionNew} body - Contains Json with values
     *
     * @returns {IProductExtension} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public productExtensionCreate(product_id:string, body:IProductExtensionNew):Promise<IProductExtension> {
        return this.requestRestPath("POST", `/product_extension/${product_id}`, body, [201]);
    }

    /**
     * @name productExtensionDeactivate
     * @summary deactivate Product_Extension
     * @operationId productExtension_deactivate
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public productExtensionDeactivate(extension_id:string):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/product_extension/deactivate/${extension_id}`, {}, [200]);
    }

    /**
     * @name productExtensionDelete
     * @summary delete Product_Extension
     * @operationId productExtension_delete
     * @tags Admin-Extension
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public productExtensionDelete(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/product_extension/${extension_id}`, {}, [200]);
    }

    /**
     * @name productExtensionGet
     * @summary get Product_Extension
     * @operationId productExtension_get
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public productExtensionGet(extension_id:string):Promise<IProductExtension> {
        return this.requestRestPath("GET", `/product_extension/${extension_id}`, {}, [200]);
    }

    /**
     * @name productExtensionGetListUserOwn
     * @summary get Product_Extension List user Own
     * @operationId productExtension_getAll
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     *
     * @returns {IProductExtension[]} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public productExtensionGetListUserOwn():Promise<IProductExtension[]> {
        return this.requestRestPath("GET", `/product_extension`, {}, [200]);
    }

    /**
     * @name productExtensionUpdate
     * @summary update Product_Extension
     * @operationId productExtension_update
     * @tags Price & Invoice & Tariffs
     *
     * @description Updates extension. User can change name, description or color.
     *
     * @param {string} extension_id
     * @param {IProductExtensionEdit} body - Contains Json with values
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public productExtensionUpdate(extension_id:string, body:IProductExtensionEdit):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/product_extension/${extension_id}`, body, [200]);
    }

    /**
     * @name productGet
     * @summary get Product
     * @operationId product_get
     * @tags Price & Invoice & Tariffs
     *
     * @param {string} product_id
     *
     * @returns {IProduct} [code 200] List of users Products
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productGet(product_id:string):Promise<IProduct> {
        return this.requestRestPath("GET", `/product/${product_id}`, {}, [200]);
    }

    /**
     * @name productsGetUserCanUsed
     * @summary get Products user can used
     * @operationId product_getActive
     * @tags Price & Invoice & Tariffs
     *
     * @description get all the products that the user can use when creating new projects
     *
     *
     * @returns {IApplicableProduct[]} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productsGetUserCanUsed():Promise<IApplicableProduct[]> {
        return this.requestRestPath("GET", `/product/list/user_applicable`, {}, [200]);
    }

    /**
     * @name productsGetUserOwnList
     * @summary get Products user Own List
     * @operationId product_getAll
     * @tags Price & Invoice & Tariffs
     *
     *
     * @returns {IProduct[]} [code 200] List of users Products
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public productsGetUserOwnList():Promise<IProduct[]> {
        return this.requestRestPath("GET", `/product/all`, {}, [200]);
    }

    /**
     * @name projectActiveHW
     * @summary activeHW Project
     * @operationId project_activeHardware
     * @tags Project
     *
     * @description freze HW from Project
     *
     * @param {string} registration_id
     *
     * @returns {IHardware} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectActiveHW(registration_id:string):Promise<IHardware> {
        return this.requestRestPath("PUT", `/project/hardware/activate/${registration_id}`, {}, [200]);
    }

    /**
     * @name projectAddHW
     * @summary addHW Project
     * @operationId project_addHardware
     * @tags Project
     *
     * @description add new HW to Project, creates HardwareRegistration
     *
     * @param {IProjectAddHardware} body - Contains Json with values
     *
     * @returns {IHardware} [code 201] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectAddHW(body:IProjectAddHardware):Promise<IHardware> {
        return this.requestRestPath("PUT", `/project/hardware/add`, body, [201]);
    }

    /**
     * @name projectChangeParticipantStatus
     * @summary change Project participant status
     * @operationId project_changeParticipantStatus
     * @tags Project
     *
     * @description Changes participant status 
     *
     * @param {string} project_id
     * @param {IProjectParticipantStatus} body - Contains Json with values
     *
     * @returns {IProjectParticipant} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectChangeParticipantStatus(project_id:string, body:IProjectParticipantStatus):Promise<IProjectParticipant> {
        return this.requestRestPath("PUT", `/project/change_participant_state/${project_id}`, body, [200]);
    }

    /**
     * @name projectCreate
     * @summary create Project
     * @operationId project_create
     * @tags Project
     *
     * @description create new Project
     *
     * @param {IProjectNew} body - Contains Json with values
     *
     * @returns {IProject} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectCreate(body:IProjectNew):Promise<IProject> {
        return this.requestRestPath("POST", `/project`, body, [201]);
    }

    /**
     * @name projectDeactiveHW
     * @summary deactiveHW Project
     * @operationId project_deactiveHardware
     * @tags Project
     *
     * @description freze HW from Project
     *
     * @param {string} registration_id
     *
     * @returns {IHardware} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectDeactiveHW(registration_id:string):Promise<IHardware> {
        return this.requestRestPath("PUT", `/project/hardware/deactive/${registration_id}`, {}, [200]);
    }

    /**
     * @name projectDelete
     * @summary delete Project
     * @operationId project_delete
     * @tags Project
     *
     * @description delete Projects by project_id
     *
     * @param {string} project_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectDelete(project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/${project_id}`, {}, [200]);
    }

    /**
     * @name projectEdit
     * @summary edit Project
     * @operationId project_update
     * @tags Project
     *
     * @description edit ne Project
     *
     * @param {string} project_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectEdit(project_id:string, body:INameAndDescription):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/${project_id}`, body, [200]);
    }

    /**
     * @name projectGet
     * @summary get Project
     * @operationId project_get
     * @tags Project
     *
     * @description get Projects by project_id
     *
     * @param {string} project_id
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectGet(project_id:string):Promise<IProject> {
        return this.requestRestPath("GET", `/project/${project_id}`, {}, [200]);
    }

    /**
     * @name projectGetByLoggedPerson
     * @summary get Project by logged Person
     * @operationId project_getByUser
     * @tags Project
     *
     * @description get all Projects by logged Person
     *
     *
     * @returns {IProject[]} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectGetByLoggedPerson():Promise<IProject[]> {
        return this.requestRestPath("GET", `/project`, {}, [200]);
    }

    /**
     * @name projectRemoveHW
     * @summary removeHW Project
     * @operationId project_removeHardware
     * @tags Project
     *
     * @description removes HW from Project
     *
     * @param {string} registration_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectRemoveHW(registration_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/project/hardware/remove/${registration_id}`, {}, [200]);
    }

    /**
     * @name projectShare
     * @summary share Project
     * @operationId project_invite
     * @tags Project
     *
     * @description sends Invitation to all users in list: List<persons_mail>
     *
     * @param {string} project_id
     * @param {IInvitePerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectShare(project_id:string, body:IInvitePerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/invite/${project_id}`, body, [200]);
    }

    /**
     * @name projectTag
     * @summary tag Project
     * @operationId project_addTags
     * @tags Project
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectTag(body:ITags):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/tags/add`, body, [200]);
    }

    /**
     * @name projectUnshare
     * @summary unshare Project
     * @operationId project_removeParticipant
     * @tags Project
     *
     * @description unshare Project with all users in list: List<person_id>
     *
     * @param {string} project_id
     * @param {IInvitePerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectUnshare(project_id:string, body:IInvitePerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/remove_participant/${project_id}`, body, [200]);
    }

    /**
     * @name projectUntag
     * @summary untag Project
     * @operationId project_removeTags
     * @tags Project
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public projectUntag(body:ITags):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/tags/remove`, body, [200]);
    }

    /**
     * @name reportAdminDashboardGet
     * @summary get Report_Admin_Dashboard
     * @operationId report_admin_dashboard
     * @tags Admin-Report
     *
     * @description Special API only For PRIVATE use
     *
     *
     * @returns {IReportAdminDashboard} [code 200] Ok result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public reportAdminDashboardGet():Promise<IReportAdminDashboard> {
        return this.requestRestPath("GET", `/admin/report/dashboard`, {}, [200]);
    }

    /**
     * @name reportBug
     * @summary Bug report
     * @operationId serverError_report
     * @tags Admin-Report
     *
     * @description Reports bug to YouTrack.
     *
     * @param {string} bug_id - bug_id String path
     *
     * @returns {IServerError} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public reportBug(bug_id:string):Promise<IServerError> {
        return this.requestRestPath("PUT", `/admin/bug/report/${bug_id}`, {}, [200]);
    }

    /**
     * @name roleAddPermissions
     * @summary add Role Permissions
     * @operationId permission_add_to_role
     * @tags Admin-Permission, Admin-Role
     *
     * @description If you want add system permissions to Role. You need permission for that or have right system Roles
     *
     * @param {string} role_id
     * @param {IRoleAddPermission} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public roleAddPermissions(role_id:string, body:IRoleAddPermission):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/secure/role/permission/${role_id}`, body, [200]);
    }

    /**
     * @name roleAddPerson
     * @summary add Role Person
     * @operationId role_add_person
     * @tags Admin-Role, Admin-Person
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     * @param {string} role_id
     * @param {IInvitePerson} body - Contains Json with values
     *
     * @returns {IRole} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public roleAddPerson(role_id:string, body:IInvitePerson):Promise<IRole> {
        return this.requestRestPath("PUT", `/secure/role/person/${role_id}`, body, [200]);
    }

    /**
     * @name roleCreate
     * @summary create Role
     * @operationId role_create
     * @tags Admin-Role
     *
     * @description If you want create new Role in system. You need permission for that or have right system Roles
     *
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IRole} [code 201] Successfully created
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public roleCreate(body:INameAndDescription):Promise<IRole> {
        return this.requestRestPath("POST", `/secure/role`, body, [201]);
    }

    /**
     * @name roleDelete
     * @summary delete Role
     * @operationId role_delete
     * @tags Admin-Role
     *
     * @description If you want delete  Role from system. You need permission for that or have right system Roles
     *
     * @param {string} role_id
     *
     * @returns {IResultOk} [code 200] Successfully created
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public roleDelete(role_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/secure/role/${role_id}`, {}, [200]);
    }

    /**
     * @name roleEdit
     * @summary edit Role
     * @operationId role_edit
     * @tags Admin-Role
     *
     * @description edit description
     *
     * @param {string} role_id
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IRole} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public roleEdit(role_id:string, body:INameAndDescription):Promise<IRole> {
        return this.requestRestPath("PUT", `/secure/role/${role_id}`, body, [200]);
    }

    /**
     * @name roleGet
     * @summary get Role
     * @operationId role_get
     * @tags Admin-Role
     *
     * @description get description
     *
     * @param {string} role_id
     *
     * @returns {IRole} [code 200] Successfully created
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public roleGet(role_id:string):Promise<IRole> {
        return this.requestRestPath("GET", `/secure/role/${role_id}`, {}, [200]);
    }

    /**
     * @name roleGetAll
     * @summary get Role All
     * @operationId role_get_all
     * @tags Admin-Role
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     *
     * @returns {IRole[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public roleGetAll():Promise<IRole[]> {
        return this.requestRestPath("GET", `/secure/roles`, {}, [200]);
    }

    /**
     * @name roleRemovePermission
     * @summary remove Role Permission
     * @operationId permission_remove_from_role
     * @tags Admin-Permission, Admin-Role
     *
     * @description If you want remove system permissions from Role. You need permission for that or have right system Roles
     *
     * @param {string} permission_id
     * @param {string} role_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public roleRemovePermission(permission_id:string, role_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/secure/role/permission/${permission_id}/${role_id}`, {}, [200]);
    }

    /**
     * @name roleRemovePerson
     * @summary remove Role Person 
     * @operationId role_remove_person
     * @tags Admin-Role, Admin-Person
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     * @param {string} role_id
     * @param {string} person_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public roleRemovePerson(role_id:string, person_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/secure/role/person/${role_id}/${person_id}`, {}, [200]);
    }

    /**
     * @name serverGetUpdates
     * @summary get server updates
     * @operationId server_getUpdates
     * @tags Admin
     *
     *
     * @returns {IServerUpdates} [code 200] OK Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public serverGetUpdates():Promise<IServerUpdates> {
        return this.requestRestPath("GET", `/admin/tyrion/update`, {}, [200]);
    }

    /**
     * @name serverRemoveUpdateServerComponent
     * @summary remove Server Update Server_Component
     * @operationId server_scheduleUpdate_remove
     * @tags Admin
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public serverRemoveUpdateServerComponent():Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/tyrion/update`, {}, [200]);
    }

    /**
     * @name serverUpdateServerComponent
     * @summary update Server Server_Component
     * @operationId server_scheduleUpdate
     * @tags Admin
     *
     * @param {IServerUpdate} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public serverUpdateServerComponent(body:IServerUpdate):Promise<IResultOk> {
        return this.requestRestPath("POST", `/admin/tyrion/update`, body, [200]);
    }

    /**
     * @name simCheckRegistrationStatus
     * @summary check Sim registration status
     * @operationId gsm_check
     * @tags GSM
     *
     * @description Check SIM state for new Registration. Types of responses in JSON state value[CAN_REGISTER, NOT_EXIST, ALREADY_REGISTERED_IN_YOUR_ACCOUNT, ALREADY_REGISTERED, PERMANENTLY_DISABLED, BROKEN_DEVICE]... 
     *     PERMANENTLY_DISABLED - sim was removed by Byzance. 
     *    BROKEN_DEVICE - modul exist - but its not possible to registered that. Damaged during manufacturing. 
     *
     * @param {string} registration_hash
     * @param {string} project_id
     *
     * @returns {IEntityRegistrationStatus} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public simCheckRegistrationStatus(registration_hash:string, project_id:string):Promise<IEntityRegistrationStatus> {
        return this.requestRestPath("GET", `/gsm/check/${registration_hash}/${project_id}`, {}, [200]);
    }

    /**
     * @name simDelete
     * @summary delete Sim
     * @operationId delete_sim
     * @tags GSM-admin
     *
     * @description delete sim by id
     *
     * @param {string} sim_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public simDelete(sim_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/gsm/${sim_id}`, {}, [200]);
    }

    /**
     * @name simGet
     * @summary get Sim
     * @operationId get_sim
     * @tags GSM
     *
     * @description get Sim by id, not by msinumber
     *
     * @param {string} sim_id
     *
     * @returns {IGSM} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public simGet(sim_id:string):Promise<IGSM> {
        return this.requestRestPath("GET", `/gsm/${sim_id}`, {}, [200]);
    }

    /**
     * @name simGetCreditUsage
     * @summary get Sim credit usage
     * @operationId credit_usage
     * @tags GSM
     *
     * @param {string} sim_id
     * @param {IGSMCredit} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public simGetCreditUsage(sim_id:string, body:IGSMCredit):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/gsm/credit/${sim_id}`, body, [200]);
    }

    /**
     * @name simGetListByFilter
     * @summary get Sim List by filter
     * @operationId get_sim_by_filter
     * @tags GSM
     *
     * @param {number} page_number
     * @param {IGSMFilter} body - Contains Json with values
     *
     * @returns {IGSMList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public simGetListByFilter(page_number:number, body:IGSMFilter):Promise<IGSMList> {
        return this.requestRestPath("PUT", `/gsm/filter/${page_number}`, body, [200]);
    }

    /**
     * @name simPrintSticker
     * @summary print Sim Sticker
     * @operationId print_sim
     * @tags GSM-admin
     *
     * @description print Sticker for GSM Modul
     *
     * @param {string} sim_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public simPrintSticker(sim_id:string):Promise<IResultOk> {
        return this.requestRestPath("GET", `/admin/gsm/print-label/${sim_id}`, {}, [200]);
    }

    /**
     * @name simRegister
     * @summary register Sim
     * @operationId register_sim
     * @tags GSM
     *
     * @description register SIM to project
     *
     * @param {IGSMRegister} body - Contains Json with values
     *
     * @returns {IGSM} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public simRegister(body:IGSMRegister):Promise<IGSM> {
        return this.requestRestPath("POST", `/gsm`, body, [200]);
    }

    /**
     * @name simUnregister
     * @summary unregister Sim
     * @operationId unregister_sim
     * @tags GSM
     *
     * @description unregister SIM from project
     *
     * @param {string} sim_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public simUnregister(sim_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/gsm/gsm_project/${sim_id}`, {}, [200]);
    }

    /**
     * @name tariffActivate
     * @summary activate Tariff
     * @operationId tariff_activate
     * @tags Admin-Tariff
     *
     * @description activate Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffActivate(tariff_id:string):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/tariff/active/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffAddExtensionIncluded
     * @summary add Tariff Extension included
     * @operationId tariff_add_extension_included
     * @tags Admin-Tariff
     *
     * @param {string} tariff_id
     * @param {string} ext_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffAddExtensionIncluded(tariff_id:string, ext_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff/extensions/included/${tariff_id}/${ext_id}`, {}, [200]);
    }

    /**
     * @name tariffAddExtensionRecommended
     * @summary add Tariff Extension recommended
     * @operationId tariff_add_extension_recommended
     * @tags Admin-Tariff
     *
     * @param {string} tariff_id
     * @param {string} ext_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffAddExtensionRecommended(tariff_id:string, ext_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff/extensions/recommended/${tariff_id}/${ext_id}`, {}, [200]);
    }

    /**
     * @name tariffCreate
     * @summary create Tariff
     * @operationId tariff_create
     * @tags Admin-Tariff
     *
     * @description create new Tariff
     *
     * @param {ITariffNew} body - Contains Json with values
     *
     * @returns {ITariff} [code 201] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffCreate(body:ITariffNew):Promise<ITariff> {
        return this.requestRestPath("POST", `/admin/tariff`, body, [201]);
    }

    /**
     * @name tariffDeactivate
     * @summary deactivate Tariff
     * @operationId tariff_deactivate
     * @tags Admin-Tariff
     *
     * @description deactivate Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffDeactivate(tariff_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff/deactive/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffDelete
     * @summary delete Tariff
     * @operationId tariff_delete
     * @tags Admin-Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffDelete(tariff_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/tariff/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffEdit
     * @summary edit Tariff
     * @operationId tariff_edit
     * @tags Admin-Tariff
     *
     * @description create new Tariff
     *
     * @param {string} tariff_id
     * @param {ITariffNew} body - Contains Json with values
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffEdit(tariff_id:string, body:ITariffNew):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/tariff/edit/${tariff_id}`, body, [200]);
    }

    /**
     * @name tariffExtensionActivate
     * @summary activate Tariff_Extension
     * @operationId tariffExtension_activate
     * @tags Admin-Extension
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionActivate(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/activate/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffExtensionCreate
     * @summary create Tariff_Extension
     * @operationId tariffExtension_create
     * @tags Admin-Extension
     *
     * @param {ITariffExtensionNew} body - Contains Json with values
     *
     * @returns {ITariffExtension} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public tariffExtensionCreate(body:ITariffExtensionNew):Promise<ITariffExtension> {
        return this.requestRestPath("POST", `/admin/tariff_extension`, body, [201]);
    }

    /**
     * @name tariffExtensionDeactivate
     * @summary deactivate Tariff_Extension
     * @operationId tariffExtension_deactivate
     * @tags Admin-Extension
     *
     * @description deactivate Tariff Extension
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionDeactivate(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/deactivate/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffExtensionDelete
     * @summary delete Tariff_Extension
     * @operationId tariffExtension_delete
     * @tags Admin-Extension
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionDelete(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/tariff_extension/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffExtensionEdit
     * @summary edit Tariff_Extension
     * @operationId tariffExtension_update
     * @tags Admin-Extension
     *
     * @description create new Tariff
     *
     * @param {string} extension_id
     * @param {ITariffExtensionEdit} body - Contains Json with values
     *
     * @returns {ITariffExtension} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionEdit(extension_id:string, body:ITariffExtensionEdit):Promise<ITariffExtension> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/${extension_id}`, body, [200]);
    }

    /**
     * @name tariffExtensionGet
     * @summary Get Tariff_Extension
     * @operationId tariffExtension_get
     * @tags Price & Invoice & Tariffs
     *
     * @param {string} extension_id
     *
     * @returns {ITariffExtension} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Not found object
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public tariffExtensionGet(extension_id:string):Promise<ITariffExtension> {
        return this.requestRestPath("GET", `/admin/tariff_extension/${extension_id}`, {}, [201]);
    }

    /**
     * @name tariffExtensionOrderDown
     * @summary order TariffExtension Down
     * @operationId tariffExtension_down
     * @tags Admin-Extension
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionOrderDown(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/down/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffExtensionOrderUp
     * @summary order TariffExtension Up
     * @operationId tariffExtension_up
     * @tags Admin-Extension
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionOrderUp(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/up/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffGet
     * @summary get Tariff
     * @operationId tariff_get
     * @tags Admin-Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffGet(tariff_id:string):Promise<ITariff> {
        return this.requestRestPath("GET", `/admin/tariff/get/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffGetAllTypes
     * @summary get Tariff All types
     * @operationId tariff_getAllTypes
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     *
     * @returns {IProductExtensionType[]} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side error
     */
    public tariffGetAllTypes():Promise<IProductExtensionType[]> {
        return this.requestRestPath("GET", `/admin/tariff/types`, {}, [200]);
    }

    /**
     * @name tariffGetExtensionsAll
     * @summary get Tariff Extensions all
     * @operationId tariffExtension_getAll
     * @tags Price & Invoice & Tariffs
     *
     * @description get all Tariffs - required for every else action in system. For example: Project is created under the Product which is under some Tariff
     *
     *
     * @returns {ITariffExtension[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffGetExtensionsAll():Promise<ITariffExtension[]> {
        return this.requestRestPath("GET", `/admin/tariff_extension`, {}, [200]);
    }

    /**
     * @name tariffOrderDown
     * @summary order Tariff Down
     * @operationId tariff_down
     * @tags Admin-Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffOrderDown(tariff_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff/down/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffOrderUp
     * @summary order Tariff Up
     * @operationId tariff_up
     * @tags Admin-Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffOrderUp(tariff_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff/up/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffRemoveExtension
     * @summary remove Tariff Extension
     * @operationId tariff_remove_extension
     * @tags Admin-Tariff
     *
     * @param {string} tariff_id
     * @param {string} ext_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffRemoveExtension(tariff_id:string, ext_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/tariff/extensions/${tariff_id}/${ext_id}`, {}, [200]);
    }

    /**
     * @name tariffsGetAll
     * @summary get Tariffs all
     * @operationId tariff_getAll
     * @tags Price & Invoice & Tariffs
     *
     * @description get all Tariffs - required for every else action in system. For example: Project is created under the Product which is under some Tariff
     *
     *
     * @returns {ITariff[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public tariffsGetAll():Promise<ITariff[]> {
        return this.requestRestPath("GET", `/tariff`, {}, [200]);
    }

    /**
     * @name websocketGetAccessToken
     * @summary get Websocket Access Token
     * @operationId get_Websocket_token
     * @tags Access, WebSocket
     *
     * @description For connection to websocket, you have to connect with temporary unique token. This Api return Tokenwith a maximum lifetime of 5 seconds. After the token is deactivated. After logging in, or the connectionlost is token deactivated also. 
     *
     *
     * @returns {IWebSocketToken} [code 200] Token successfully generated
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public websocketGetAccessToken():Promise<IWebSocketToken> {
        return this.requestRestPath("GET", `/websocket/access_token`, {}, [200]);
    }

    /**
     * @name widgetActivate
     * @summary activate Widget
     * @operationId widget_activate
     * @tags Admin-Grid-Widget
     *
     * @description activate Widget
     *
     * @param {string} grid_widget_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetActivate(grid_widget_id:string):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/widget/active/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name widgetCreate
     * @summary create Widget
     * @operationId widget_create
     * @tags Widget
     *
     * @description creating new independent Widget object for Grid tools
     *
     * @param {INameAndDescProjectIdOptional} body - Contains Json with values
     *
     * @returns {IWidget} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetCreate(body:INameAndDescProjectIdOptional):Promise<IWidget> {
        return this.requestRestPath("POST", `/widget`, body, [201]);
    }

    /**
     * @name widgetDeactivate
     * @summary deactivate Widget
     * @operationId widget_deactivate
     * @tags Admin-Grid-Widget
     *
     * @description deactivate Widget
     *
     * @param {string} grid_widget_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetDeactivate(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/widget/deactive/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name widgetDelete
     * @summary delete Widget
     * @operationId widget_delete
     * @tags Widget
     *
     * @description delete Widget
     *
     * @param {string} grid_widget_id - widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetDelete(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/widget/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name widgetEdit
     * @summary edit Widget
     * @operationId widget_update
     * @tags Widget
     *
     * @description update basic information (name, and description) of the independent GridWidget
     *
     * @param {string} grid_widget_id - widget_id String path
     * @param {INameAndDescProjectIdOptional} body - Contains Json with values
     *
     * @returns {IWidget} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetEdit(grid_widget_id:string, body:INameAndDescProjectIdOptional):Promise<IWidget> {
        return this.requestRestPath("PUT", `/widget/${grid_widget_id}`, body, [200]);
    }

    /**
     * @name widgetGet
     * @summary get Widget
     * @operationId widget_get
     * @tags Widget
     *
     * @description get independent Widget object
     *
     * @param {string} grid_widget_id - widget_id String path
     *
     * @returns {IWidget} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetGet(grid_widget_id:string):Promise<IWidget> {
        return this.requestRestPath("GET", `/widget/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name widgetGetListByFilter
     * @summary get Widget List by Filter
     * @operationId widget_getByFilter
     * @tags Grid-Widget
     *
     * @description get GridWidget List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IGridWidgetFilter} body - Contains Json with values
     *
     * @returns {IGridWidgetList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetGetListByFilter(page_number:number, body:IGridWidgetFilter):Promise<IGridWidgetList> {
        return this.requestRestPath("PUT", `/widget/list/${page_number}`, body, [200]);
    }

    /**
     * @name widgetMakeClone
     * @summary make_Clone Widget
     * @operationId widget_clone
     * @tags Grid_Widget
     *
     * @description clone Grid_Widget for private
     *
     * @param {IWidgetCopy} body - Contains Json with values
     *
     * @returns {IWidget} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetMakeClone(body:IWidgetCopy):Promise<IWidget> {
        return this.requestRestPath("POST", `/widget/make_clone`, body, [200]);
    }

    /**
     * @name widgetOrderDown
     * @summary order Widget Down
     * @operationId widget_order_down
     * @tags Grid-Widget
     *
     * @description set down order
     *
     * @param {string} grid_widget_id - widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetOrderDown(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/widget/order/down/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name widgetOrderUp
     * @summary order Widget Up
     * @operationId widget_order_up
     * @tags Grid-Widget
     *
     * @description set up order
     *
     * @param {string} grid_widget_id - widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetOrderUp(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/widget/order/up/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name widgetTag
     * @summary tag Widget
     * @operationId widget_addTags
     * @tags Widget
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IWidget} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetTag(body:ITags):Promise<IWidget> {
        return this.requestRestPath("PUT", `/widget/tags/add`, body, [200]);
    }

    /**
     * @name widgetUntag
     * @summary untag Widget
     * @operationId widget_removeTags
     * @tags Widget
     *
     * @param {ITags} body - Contains Json with values
     *
     * @returns {IWidget} [code 200] Ok Result
     *
     * @throws {IResultInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetUntag(body:ITags):Promise<IWidget> {
        return this.requestRestPath("PUT", `/widget/tags/remove`, body, [200]);
    }

    /**
     * @name widgetVersionCreate
     * @summary create Widget_Version
     * @operationId widgetVersion_create
     * @tags Grid-Widget
     *
     * @description new GridWidget version
     *
     * @param {string} grid_widget_id - widget_id String path
     * @param {IGridWidgetVersionNew} body - Contains Json with values
     *
     * @returns {IWidgetVersion} [code 201] Successfully created
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetVersionCreate(grid_widget_id:string, body:IGridWidgetVersionNew):Promise<IWidgetVersion> {
        return this.requestRestPath("POST", `/widget/version/${grid_widget_id}`, body, [201]);
    }

    /**
     * @name widgetVersionDelete
     * @summary delete Widget_Version
     * @operationId widgetVersion_delete
     * @tags Grid-Widget
     *
     * @description delete GridWidget version
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetVersionDelete(grid_widget_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/widget/version/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name widgetVersionEdit
     * @summary edit Widget_Version
     * @operationId widgetVersion_edit
     * @tags Grid-Widget
     *
     * @description You can edit only basic information of the version. If you want to update the code, you have to create a new version!
     *
     * @param {string} grid_widget_version_id - version_id String path
     * @param {INameAndDescription} body - Contains Json with values
     *
     * @returns {IWidgetVersion} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetVersionEdit(grid_widget_version_id:string, body:INameAndDescription):Promise<IWidgetVersion> {
        return this.requestRestPath("PUT", `/widget/version/${grid_widget_version_id}`, body, [200]);
    }

    /**
     * @name widgetVersionEditResponsePublication
     * @summary edit Widget_Version Response publication
     * @operationId widget_public_response
     * @tags Admin-Grid-Widget
     *
     * @description sets Approval_state to pending
     *
     * @param {ICommunityVersionPublishResponse} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetVersionEditResponsePublication(body:ICommunityVersionPublishResponse):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/widget/approval`, body, [200]);
    }

    /**
     * @name widgetVersionGet
     * @summary get Widget_Version
     * @operationId widgetVersion_get
     * @tags Grid-Widget
     *
     * @description get version (content) from independent GridWidget
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IWidgetVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetVersionGet(grid_widget_version_id:string):Promise<IWidgetVersion> {
        return this.requestRestPath("GET", `/widget/version/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name widgetVersionMakePublic
     * @summary make Widget_Version public
     * @operationId widgetVersion_version_make_public
     * @tags C_Program
     *
     * @description Make C_Program public, so other users can see it and use it. Attention! Attention! Attention! A user can publish only three programs at the stage waiting for approval.
     *
     * @param {string} grid_widget_version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Bad Request
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultFound} [code 404] Object not found
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetVersionMakePublic(grid_widget_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/widget/version/make_public/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name widgetVersionSetAsMain
     * @summary set_As_Main Widget_Version
     * @operationId widgetVersion_set_main
     * @tags Admin-Grid-Widget
     *
     * @param {string} grid_widget_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetVersionSetAsMain(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/widget/version/set_main/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name widgetVersionsGet
     * @summary get Widget_Versions
     * @operationId widgetVersion_getAll
     * @tags Grid-Widget
     *
     * @description get all versions (content) from independent GridWidget
     *
     * @param {string} grid_widget_id - widget_id String path
     * @param {IGridWidgetVersionNew} body - Contains Json with values
     *
     * @returns {IWidgetVersion[]} [code 200] Ok Result
     *
     * @throws {IResultFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IResultForbidden} [code 403] Need required permission
     * @throws {IResultInternalServerError} [code 500] Server side Error
     */
    public widgetVersionsGet(grid_widget_id:string, body:IGridWidgetVersionNew):Promise<IWidgetVersion[]> {
        return this.requestRestPath("GET", `/widget/version/all/${grid_widget_id}`, body, [200]);
    }

}
