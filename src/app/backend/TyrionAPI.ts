/**************************************************************/
/*                                                            */
/*   Generated Tyrion API backend file                        */
/*   Â© 2015-2016 Becki Authors.                               */
/*                                                            */
/*   Build date: 2018-01-18 16:00:58                          */
/*   Tyrion version: 1.13.32                                  */
/*                                                            */
/*   Generated by automated script from Swagger JSON.         */
/*   Script author: Byzance                                   */
/*                                                            */
/**************************************************************/

/* tslint:disable */

import { HomerAPI } from './HomerAPI';
/**
 * @name IActualizationProcedure
 * @description: Model of ActualizationProcedure
 */
export interface IActualizationProcedure {
    /**
     * @name date_of_create
     * @type string
     * @description UNIX time in ms
     * @format date-time
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_finish
     * @type string
     * @description UNIX time in ms
     * @format date-time
     * @required
     */
    date_of_finish: string;
    /**
     * @name date_of_planing
     * @type string
     * @description UNIX time in ms
     * @format date-time
     * @required
     */
    date_of_planing: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name procedure_size_all
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    procedure_size_all: number;
    /**
     * @name procedure_size_complete
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    procedure_size_complete: number;
    /**
     * @name state
     * @type ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet")
     * @required
     */
    state: ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet");
    /**
     * @name type_of_update
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")
     * @required
     */
    type_of_update: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE");
}


/**
 * @name IActualizationProcedureTaskList
 * @description: Interface IActualizationProcedureTaskList definition
 */
export interface IActualizationProcedureTaskList {
    /**
     * @name content
     * @type ICProgramUpdatePlan[]
     * @readonly
     * @required
     */
    content: ICProgramUpdatePlan[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IActualizationProcedureFilter
 * @description: Json Model for ActualizationProcedure Filter
 */
export interface IActualizationProcedureFilter {
    /**
     * @name project_ids
     * @type string[]
     * @readonly
     * @required
     */
    project_ids: string[];
    /**
     * @name type_of_updates
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")[]
     * @readonly
     * @required
     */
    type_of_updates: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")[];
    /**
     * @name update_states
     * @type ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet")[]
     * @readonly
     * @required
     */
    update_states: ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet")[];
}


/**
 * @name IActualizationProcedureList
 * @description: Interface IActualizationProcedureList definition
 */
export interface IActualizationProcedureList {
    /**
     * @name content
     * @type IActualizationProcedureShortDetail[]
     * @readonly
     * @required
     */
    content: IActualizationProcedureShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IActualizationProcedureMake
 * @description: Json Model for ActualizationProcedure Make Procedure
 */
export interface IActualizationProcedureMake {
    /**
     * @name firmware_type
     * @type string
     * @readonly
     * @required
     */
    firmware_type: string;
    /**
     * @name hardware_group_id
     * @type string
     * @readonly
     * @required
     */
    hardware_group_id: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name time
     * @type number
     * @description If  value is null - its a command for immediately update 
     * @format int64
     * @readonly
     * @required
     */
    time: number;
    /**
     * @name timeOffset
     * @type number
     * @description If  value is null - its a command for immediately update - Default Value 0
     * @format int32
     * @readonly
     * @required
     */
    timeOffset: number;
    /**
     * @name type_of_boards_settings
     * @type IActualizationProcedureMakeTypeOfBoard[]
     * @readonly
     * @required
     */
    type_of_boards_settings: IActualizationProcedureMakeTypeOfBoard[];
}


/**
 * @name IActualizationProcedureMakeTypeOfBoard
 * @description: Json Model for ActualizationProcedure Make Procedure - TypeOfBoard
 */
export interface IActualizationProcedureMakeTypeOfBoard {
    /**
     * @name bootloader_id
     * @type string
     * @readonly
     * @required
     */
    bootloader_id: string;
    /**
     * @name c_program_version_id
     * @type string
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
}


/**
 * @name IActualizationProcedureShortDetail
 * @description: Json Model for ActualizationProcedure procedure
 */
export interface IActualizationProcedureShortDetail {
    /**
     * @name bootloader
     * @type IBootloaderUpdateProgram
     * @description Visible only if type_of_update === MANUALLY_RELEASE_MANAGER and firmware_type is FIRMWARE
     * @readonly
     * @required
     */
    bootloader: IBootloaderUpdateProgram;
    /**
     * @name date_of_create
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_finish
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    date_of_finish: string;
    /**
     * @name date_of_planing
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    date_of_planing: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name firmware_type
     * @type ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI")
     * @readonly
     * @required
     */
    firmware_type: ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI");
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name procedure_size_all
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    procedure_size_all: number;
    /**
     * @name procedure_size_complete
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    procedure_size_complete: number;
    /**
     * @name program
     * @type ICProgramUpdateProgram
     * @description Visible only if type_of_update === MANUALLY_RELEASE_MANAGER and firmware_type is BOOTLOADER
     * @readonly
     * @required
     */
    program: ICProgramUpdateProgram;
    /**
     * @name state
     * @type ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet")
     * @readonly
     * @required
     */
    state: ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet");
    /**
     * @name type_of_update
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")
     * @readonly
     * @required
     */
    type_of_update: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE");
}


/**
 * @name IApplicableProduct
 * @description: Json Model for selecting Product for registration new project
 */
export interface IApplicableProduct {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name tariff
     * @type string
     * @readonly
     * @required
     */
    tariff: string;
}


/**
 * @name IBPair
 * @description: Model of BPair
 */
export interface IBPair {
    /**
     * @name board_description
     * @type string
     * @readonly
     * @required
     */
    board_description: string;
    /**
     * @name board_id
     * @type string
     * @readonly
     * @required
     */
    board_id: string;
    /**
     * @name board_name
     * @type string
     * @readonly
     * @required
     */
    board_name: string;
    /**
     * @name c_program_description
     * @type string
     * @readonly
     * @required
     */
    c_program_description: string;
    /**
     * @name c_program_id
     * @type string
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_name
     * @type string
     * @readonly
     * @required
     */
    c_program_name: string;
    /**
     * @name c_program_version_description
     * @type string
     * @readonly
     * @required
     */
    c_program_version_description: string;
    /**
     * @name c_program_version_id
     * @type string
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @readonly
     * @required
     */
    c_program_version_name: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name IBProgram
 * @description: Model of BProgram
 */
export interface IBProgram {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name instance_details
     * @type IBProgramState
     * @readonly
     * @required
     */
    instance_details: IBProgramState;
    /**
     * @name last_update
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    last_update: number;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type IBProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    program_versions: IBProgramVersionShortDetail[];
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBProgramFilter
 * @description: Json Model for getting B_Program Filter List
 */
export interface IBProgramFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get b_programs of given project
     */
    project_id?: string;
}


/**
 * @name IBProgramList
 * @description: Individual B_Program List
 */
export interface IBProgramList {
    /**
     * @name content
     * @type IBProgramShortDetail[]
     * @readonly
     * @required
     */
    content: IBProgramShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBProgramNew
 * @description: Json Model for new B_Program
 */
export interface IBProgramNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IBProgramShortDetail
 * @description: B_Program Light (only few properties)
 */
export interface IBProgramShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBProgramState
 * @description: Json Model for B_Program state
 */
export interface IBProgramState {
    /**
     * @name instance_id
     * @type string
     * @description Id of Instance -its independent object!
     * @readonly
     * @required
     */
    instance_id: string;
    /**
     * @name instance_remote_url
     * @type string
     * @description WebSocket URL without Personal AUTH_ID for remove control and webView streaming
     * @readonly
     * @required
     */
    instance_remote_url: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
    /**
     * @name server_online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    server_online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name version_id
     * @type string
     * @description Actual version id or latest know /used in cloud
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @description Actual version id or latest know /used in cloud
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IBProgramUploadInstance
 * @description: Json Model for new Version of B_Program
 */
export interface IBProgramUploadInstance {
    /**
     * @name upload_time
     * @type number
     * @description UNIX time in millis - Date: number of milliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int64
     */
    upload_time?: number;
}


/**
 * @name IBProgramVersion
 * @description: Json Model of Version of B_Program
 */
export interface IBProgramVersion {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name group_pairs
     * @type IGroupPair[]
     * @readonly
     * @required
     */
    group_pairs: IGroupPair[];
    /**
     * @name hardware_group
     * @type IHardwareGroup[]
     * @readonly
     * @required
     */
    hardware_group: IHardwareGroup[];
    /**
     * @name m_project_program_snapshots
     * @type IMProjectSnapShotDetail[]
     * @readonly
     * @required
     */
    m_project_program_snapshots: IMProjectSnapShotDetail[];
    /**
     * @name program
     * @type string
     * @description Json/Javascript Code
     * @readonly
     * @required
     */
    program: string;
    /**
     * @name remove_permission
     * @type boolean
     * @readonly
     * @required
     */
    remove_permission: boolean;
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
}


/**
 * @name IBProgramVersionEdit
 * @description: Json Model for edit Version of B_Program
 */
export interface IBProgramVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBProgramVersionNew
 * @description: Json Model for new Version of B_Program
 */
export interface IBProgramVersionNew {
    /**
     * @name group_pairs
     * @type IGroupPair[]
     * @description Board groups
     */
    group_pairs?: IGroupPair[];
    /**
     * @name hardware_group
     * @type IHardwareGroupIN[]
     * @description Connected groups of all hardware - User can create Blocko program without hardware.
     */
    hardware_group?: IHardwareGroupIN[];
    /**
     * @name m_project_snapshots
     * @type IMProjectSnapShot[]
     * @description Connected groups of m_programs.versions under imported m_programs
     */
    m_project_snapshots?: IMProjectSnapShot[];
    /**
     * @name program
     * @type string
     * @required
     */
    program: string;
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBProgramVersionShortDetail
 * @description: B_Program Version Light (only few properties)
 */
export interface IBProgramVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name publish_status
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @readonly
     * @required
     */
    publish_status: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IBase64File
 * @description: Json Model for getting Blocko_Block Filter List
 */
export interface IBase64File {
    /**
     * @name file
     * @type string
     * @description The file is encoded in base64. If it is null - it is a command to delete a file
     */
    file?: string;
}


/**
 * @name IBlockoBlock
 * @description: Model of BlockoBlock
 */
export interface IBlockoBlock {
    /**
     * @name active
     * @type boolean
     * @description Only for Community Administrator
     */
    active?: boolean;
    /**
     * @name author_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_id: string;
    /**
     * @name author_nick_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_nick_name: string;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with Permission
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name producer_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @required
     */
    publish_type: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name type_of_block_id
     * @type string
     * @readonly
     * @required
     */
    type_of_block_id: string;
    /**
     * @name type_of_block_name
     * @type string
     * @readonly
     * @required
     */
    type_of_block_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IBlockoBlockVersionShortDetail[]
     * @readonly
     * @required
     */
    versions: IBlockoBlockVersionShortDetail[];
}


/**
 * @name IBlockoBlockVersion
 * @description: Model of BlockoBlockVersion
 */
export interface IBlockoBlockVersion {
    /**
     * @name approval_state
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @description Only if user make request for publishing
     */
    approval_state?: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name author
     * @type IPersonShortDetail
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with Permission
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name create_permission
     * @type boolean
     * @readonly
     * @required
     */
    create_permission: boolean;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockBlockoVersionEdit
 * @description: Json Model for editing BlockoVersion
 */
export interface IBlockoBlockBlockoVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockBlockoVersionNew
 * @description: Json Model for crating new version and also content of BlockoBlock Model
 */
export interface IBlockoBlockBlockoVersionNew {
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name version_description
     * @type string
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockNew
 * @description: Json Model for crating new BlockoBlock Model
 */
export interface IBlockoBlockNew {
    /**
     * @name general_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     */
    general_description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name type_of_block_id
     * @type string
     * @description Required valid type_of_block id
     * @required
     */
    type_of_block_id: string;
}


/**
 * @name IBlockoBlockPublishResponse
 * @description: Json Model for crating new BlockoBlock Publish Response Model
 */
export interface IBlockoBlockPublishResponse {
    /**
     * @name blocko_block_type_of_block_id
     * @type string
     * @description Required only if decision == true
     * @readonly
     * @required
     */
    blocko_block_type_of_block_id: string;
    /**
     * @name decision
     * @type boolean
     * @required
     */
    decision: boolean;
    /**
     * @name program_description
     * @type string
     * @required
     */
    program_description: string;
    /**
     * @name program_name
     * @type string
     * @required
     */
    program_name: string;
    /**
     * @name reason
     * @type string
     * @required
     */
    reason: string;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockVersionShortDetail
 * @description: Json Model details of Version of BlockoBlock
 */
export interface IBlockoBlockVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     * @readonly
     * @required
     */
    date_of_create: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name design_json
     * @type string
     * @readonly
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name publish_status
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @readonly
     * @required
     */
    publish_status: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
}


/**
 * @name IBlockoBlockCopy
 * @description: Json Model for copy Blocko_Block
 */
export interface IBlockoBlockCopy {
    /**
     * @name blocko_block_id
     * @type string
     * @required
     */
    blocko_block_id: string;
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    project_id: string;
    /**
     * @name type_of_blocks_id
     * @type string
     */
    type_of_blocks_id?: string;
}


/**
 * @name IBlockoBlockFilter
 * @description: Json Model for getting Blocko_Block Filter List
 */
export interface IBlockoBlockFilter {
    /**
     * @name pending_blocks
     * @type boolean
     * @description Only for Admins with permissions
     */
    pending_blocks?: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Blocks of given project
     */
    project_id?: string;
}


/**
 * @name IBlockoBlockFilterDetail
 * @description: Blocko_Block Light (only few properties)
 */
export interface IBlockoBlockFilterDetail {
    /**
     * @name blocko_block_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_description: string;
    /**
     * @name blocko_block_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_id: string;
    /**
     * @name blocko_block_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_name: string;
    /**
     * @name blocko_block_type_of_block_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_description: string;
    /**
     * @name blocko_block_type_of_block_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_id: string;
    /**
     * @name blocko_block_type_of_block_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_name: string;
    /**
     * @name blocko_block_version_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_description: string;
    /**
     * @name blocko_block_version_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_id: string;
    /**
     * @name blocko_block_version_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_name: string;
}


/**
 * @name IBlockoBlockList
 * @description: Individual Blocko Block List
 */
export interface IBlockoBlockList {
    /**
     * @name content
     * @type IBlockoBlockFilterDetail[]
     * @readonly
     * @required
     */
    content: IBlockoBlockFilterDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBlockoBlockShortDetail
 * @description: Blocko_Block Light (only few properties)
 */
export interface IBlockoBlockShortDetail {
    /**
     * @name active
     * @type boolean
     * @readonly
     * @required
     */
    active: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @description Id of Block in Blocko Group (TypeOfBlock)
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IBlockoBlockVersionShortDetail[]
     * @readonly
     * @required
     */
    versions: IBlockoBlockVersionShortDetail[];
}


/**
 * @name IBlockoTokenValidationRequest
 * @description: Json Model for validation of Token for HTTP requests
 */
export interface IBlockoTokenValidationRequest {
    /**
     * @name token
     * @type string
     * @readonly
     * @required
     */
    token: string;
    /**
     * @name type_of_token
     * @type string
     * @example PERSON_TOKEN, INSTANCE_TOKEN
     * @readonly
     * @required
     */
    type_of_token: string;
}


/**
 * @name IBlockoTokenValidationResult
 * @description: Json Model for validation of Token for HTTP requests
 */
export interface IBlockoTokenValidationResult {
    /**
     * @name available_requests
     * @type number
     * @format int64
     * @readonly
     * @required
     */
    available_requests: number;
    /**
     * @name token
     * @type string
     * @readonly
     * @required
     */
    token: string;
}


/**
 * @name IBoard
 * @description: Model of Board
 */
export interface IBoard {
    /**
     * @name actual_bootloader_id
     * @type string
     * @readonly
     * @required
     */
    actual_bootloader_id: string;
    /**
     * @name actual_bootloader_version_name
     * @type string
     * @readonly
     * @required
     */
    actual_bootloader_version_name: string;
    /**
     * @name actual_c_program_backup_description
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_description: string;
    /**
     * @name actual_c_program_backup_id
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_id: string;
    /**
     * @name actual_c_program_backup_name
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_name: string;
    /**
     * @name actual_c_program_backup_version_description
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_version_description: string;
    /**
     * @name actual_c_program_backup_version_id
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_version_id: string;
    /**
     * @name actual_c_program_backup_version_name
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_version_name: string;
    /**
     * @name actual_c_program_description
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_description: string;
    /**
     * @name actual_c_program_id
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_id: string;
    /**
     * @name actual_c_program_name
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_name: string;
    /**
     * @name actual_c_program_version_description
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_version_description: string;
    /**
     * @name actual_c_program_version_id
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_version_id: string;
    /**
     * @name actual_c_program_version_name
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_version_name: string;
    /**
     * @name actual_instance
     * @type IInstanceShortDetail
     * @description Can be null, if device is not in Instance
     * @readonly
     * @required
     */
    actual_instance: IInstanceShortDetail;
    /**
     * @name alert_list
     * @type ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[]
     * @readonly
     * @required
     */
    alert_list: ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[];
    /**
     * @name available_bootloader_id
     * @type string
     * @readonly
     * @required
     */
    available_bootloader_id: string;
    /**
     * @name available_bootloader_version_name
     * @type string
     * @readonly
     * @required
     */
    available_bootloader_version_name: string;
    /**
     * @name backup_mode
     * @type ("STATIC_BACKUP"|"AUTO_BACKUP"|"NO_BACKUP")
     */
    backup_mode?: ("STATIC_BACKUP"|"AUTO_BACKUP"|"NO_BACKUP");
    /**
     * @name bootloader_core_configuration
     * @type IDMBoardBootloaderDefaultConfig
     * @readonly
     * @required
     */
    bootloader_core_configuration: IDMBoardBootloaderDefaultConfig;
    /**
     * @name bootloader_update_in_progress_bootloader_id
     * @type string
     * @readonly
     * @required
     */
    bootloader_update_in_progress_bootloader_id: string;
    /**
     * @name database_synchronize
     * @type boolean
     * @required
     */
    database_synchronize: boolean;
    /**
     * @name date_of_user_registration
     * @type string
     * @format date-time
     * @required
     */
    date_of_user_registration: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name developer_kit
     * @type boolean
     * @required
     */
    developer_kit: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name hardware_groups
     * @type IHardwareGroupShortDetail[]
     * @readonly
     * @required
     */
    hardware_groups: IHardwareGroupShortDetail[];
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name ip_address
     * @type string
     * @readonly
     * @required
     */
    ip_address: string;
    /**
     * @name latest_online
     * @type number
     * @description Value is null, if device status is online.
     * @format int64
     * @readonly
     * @required
     */
    latest_online: number;
    /**
     * @name mac_address
     * @type string
     * @required
     */
    mac_address: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
    /**
     * @name producer_id
     * @type string
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name required_updates
     * @type ICProgramUpdatePlan[]
     * @readonly
     * @required
     */
    required_updates: ICProgramUpdatePlan[];
    /**
     * @name server
     * @type IHomerServer
     * @readonly
     * @required
     */
    server: IHomerServer;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name wifi_mac_address
     * @type string
     * @required
     */
    wifi_mac_address: string;
}


/**
 * @name IBoardGroup
 * @description: Model of Board Group
 */
export interface IBoardGroup {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name group_size
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    group_size: number;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name type_of_boards_short_detail
     * @type ITypeOfBoardShortDetail[]
     * @readonly
     * @required
     */
    type_of_boards_short_detail: ITypeOfBoardShortDetail[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBoardBackupSettings
 * @description: Interface IBoardBackupSettings definition
 */
export interface IBoardBackupSettings {
    /**
     * @name board_backup_pair_list
     * @type IBoardBackupPair[]
     * @description List of Pairs for settings of Backup on boards
     * @required
     */
    board_backup_pair_list: IBoardBackupPair[];
}


/**
 * @name IBoardBootloaderUpdate
 * @description: Interface IBoardBootloaderUpdate definition
 */
export interface IBoardBootloaderUpdate {
    /**
     * @name device_ids
     * @type string[]
     * @description Must be unique!!!, The hardware_id must have 20 hexadecimal characters!, It can combination of master devices and others
     * @required
     */
    device_ids: string[];
}


/**
 * @name IBoardCommand
 * @description: Json Model for developers commands to Hardware. For example restart, redirect etc. Please, use that, only if you know, what you are doing.
 */
export interface IBoardCommand {
    /**
     * @name board_id
     * @type string
     * @description Length must be between 0 and 255 characters.
     * @required
     */
    board_id: string;
    /**
     * @name command
     * @type ("RESTART"|"SWITCH_TO_BOOTLOADER")
     * @description Command
     * @required
     */
    command: ("RESTART"|"SWITCH_TO_BOOTLOADER");
}


/**
 * @name IBoardDeveloperParameters
 * @description: Json Model for update personal description of Board
 */
export interface IBoardDeveloperParameters {
    /**
     * @name boolean_value
     * @type boolean
     * @description only for boolean parameters
     */
    boolean_value?: boolean;
    /**
     * @name integer_value
     * @type number
     * @description only for text label parameters
     * @format int32
     */
    integer_value?: number;
    /**
     * @name parameter_type
     * @type string
     * @description Parameter names fo developer settings
     * @required
     */
    parameter_type: string;
    /**
     * @name string_value
     * @type string
     * @description only for text label parameters
     */
    string_value?: string;
}


/**
 * @name IBoardList
 * @description: Individual Board List
 */
export interface IBoardList {
    /**
     * @name content
     * @type IBoardShortDetail[]
     * @readonly
     * @required
     */
    content: IBoardShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBoardNewGarfield
 * @description: Json Model for create new Board
 */
export interface IBoardNewGarfield {
    /**
     * @name full_id
     * @type string
     * @description Must be unique!!!, The hardware_id must have 24 hexadecimal characters!
     * @required
     */
    full_id: string;
    /**
     * @name garfield_station_id
     * @type string
     * @required
     */
    garfield_station_id: string;
    /**
     * @name type_of_board_batch_id
     * @type string
     * @description Required valid type_of_post_id
     * @required
     */
    type_of_board_batch_id: string;
    /**
     * @name type_of_board_id
     * @type string
     * @description Required valid type_of_post_id
     * @required
     */
    type_of_board_id: string;
}


/**
 * @name IBoardNewManual
 * @description: Json Model for create new Board
 */
export interface IBoardNewManual {
    /**
     * @name full_id
     * @type string
     * @description Must be unique!!!, The hardware_id must have 24 hexadecimal characters!
     * @required
     */
    full_id: string;
    /**
     * @name type_of_board_id
     * @type string
     * @description Required valid type_of_post_id
     * @required
     */
    type_of_board_id: string;
}


/**
 * @name IBoardPersonalDescription
 * @description: Json Model for update personal description of Board
 */
export interface IBoardPersonalDescription {
    /**
     * @name description
     * @type string
     * @description Description
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 0 and 32 characters.
     * @required
     */
    name: string;
}


/**
 * @name IBoardRegistrationStatus
 * @description: Json Model for Status and all information about embedded Hardware
 */
export interface IBoardRegistrationStatus {
    /**
     * @name status
     * @type ("CAN_REGISTER"|"NOT_EXIST"|"ALREADY_REGISTERED_IN_YOUR_ACCOUNT"|"ALREADY_REGISTERED"|"PERMANENTLY_DISABLED"|"BROKEN_DEVICE")
     * @description CAN_REGISTER, ALREADY_REGISTERED_IN_YOUR_ACCOUNT, ALREADY_REGISTERED, PERMANENTLY_DISABLED, BROKEN_DEVICE
     * @example CAN_REGISTER
     * @readonly
     * @required
     */
    status: ("CAN_REGISTER"|"NOT_EXIST"|"ALREADY_REGISTERED_IN_YOUR_ACCOUNT"|"ALREADY_REGISTERED"|"PERMANENTLY_DISABLED"|"BROKEN_DEVICE");
}


/**
 * @name IBoardRegistrationToProject
 * @description: Interface IBoardRegistrationToProject definition
 */
export interface IBoardRegistrationToProject {
    /**
     * @name group_ids
     * @type string[]
     */
    group_ids?: string[];
    /**
     * @name hash_for_adding
     * @type string
     * @required
     */
    hash_for_adding: string;
    /**
     * @name project_id
     * @type string
     * @required
     */
    project_id: string;
}


/**
 * @name IBoardServerRedirect
 * @description: Interface IBoardServerRedirect definition
 */
export interface IBoardServerRedirect {
    /**
     * @name server_id
     * @type string
     * @description Required only if server_url & server_port is null
     */
    server_id?: string;
    /**
     * @name server_port
     * @type string
     * @description Required only if server_id is null && server_url is not null
     */
    server_port?: string;
    /**
     * @name server_url
     * @type string
     * @description Required only if server_id is null && server_port is not null 
     */
    server_url?: string;
}


/**
 * @name IBoardShortDetail
 * @description: Json Model Board - only basic information
 */
export interface IBoardShortDetail {
    /**
     * @name alert_list
     * @type ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[]
     * @readonly
     * @required
     */
    alert_list: ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name hardware_groups
     * @type IHardwareGroupShortDetail[]
     * @readonly
     * @required
     */
    hardware_groups: IHardwareGroupShortDetail[];
    /**
     * @name hash_for_adding
     * @type string
     * @description Visible only for Admins with permissions and only, if device is not registered in any project
     * @readonly
     * @required
     */
    hash_for_adding: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name last_online
     * @type number
     * @description Value is null if online_state is online
     * @format int64
     * @readonly
     * @required
     */
    last_online: number;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBoardUpdateShortDetail
 * @description: Json Model Board - only basic information
 */
export interface IBoardUpdateShortDetail {
    /**
     * @name board_id
     * @type string
     * @readonly
     * @required
     */
    board_id: string;
    /**
     * @name description
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name IBoardBackupPair
 * @description: Interface IBoardBackupPair definition
 */
export interface IBoardBackupPair {
    /**
     * @name backup_mode
     * @type boolean
     * @description True - for auto_backup. False for static backup. If static c_program_version_id is required!
     * @required
     */
    backup_mode: boolean;
    /**
     * @name board_id
     * @type string
     * @required
     */
    board_id: string;
    /**
     * @name c_program_version_id
     * @type string
     * @description Required if backup_mode is false. C_program_version_id must be compiled and for same type of Board!
     */
    c_program_version_id?: string;
}


/**
 * @name IBoardFilter
 * @description: Json Model for Filtering Boards
 */
export interface IBoardFilter {
    /**
     * @name active
     * @type string
     * @description Boolean - required in String! "true" or "false "
     */
    active?: string;
    /**
     * @name end_time
     * @type string
     * @description Unix in millis - date_of_create - end_time
     * @format date-time
     */
    end_time?: string;
    /**
     * @name processors
     * @type string[]
     * @description List of processor.id
     */
    processors?: string[];
    /**
     * @name producers
     * @type string[]
     * @description List of producer.id
     */
    producers?: string[];
    /**
     * @name projects
     * @type string[]
     * @description List of project.id
     */
    projects?: string[];
    /**
     * @name start_time
     * @type string
     * @description Unix in millis - date_of_create - start_time
     * @format date-time
     */
    start_time?: string;
    /**
     * @name type_of_board_ids
     * @type string[]
     * @description List of typeOfBoard.id
     */
    type_of_board_ids?: string[];
}


/**
 * @name IBoardForFastUploadDetail
 * @description: Json Model for board with details for fast upload
 */
export interface IBoardForFastUploadDetail {
    /**
     * @name collision
     * @type ("NO_COLLISION"|"ALREADY_IN_INSTANCE"|"PLANNED_UPDATE")
     * @readonly
     * @required
     */
    collision: ("NO_COLLISION"|"ALREADY_IN_INSTANCE"|"PLANNED_UPDATE");
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name IBoardsForBlocko
 * @description: Json Model for Blocko in Becki for accessible hardware and firmware versions
 */
export interface IBoardsForBlocko {
    /**
     * @name boards
     * @type IBoardShortDetail[]
     * @readonly
     * @required
     */
    boards: IBoardShortDetail[];
    /**
     * @name c_programs
     * @type ICProgramShortDetailForBlocko[]
     * @readonly
     * @required
     */
    c_programs: ICProgramShortDetailForBlocko[];
    /**
     * @name m_projects
     * @type IMProjectShortDetailForBlocko[]
     * @readonly
     * @required
     */
    m_projects: IMProjectShortDetailForBlocko[];
    /**
     * @name type_of_boards
     * @type ITypeOfBoard[]
     * @readonly
     * @required
     */
    type_of_boards: ITypeOfBoard[];
}


/**
 * @name IBootLoader
 * @description: Model of BootLoader
 */
export interface IBootLoader {
    /**
     * @name changing_note
     * @type string
     * @required
     */
    changing_note: string;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name file
     * @type IFileRecord
     * @required
     */
    file: IFileRecord;
    /**
     * @name file_path
     * @type string
     * @readonly
     * @required
     */
    file_path: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name main_bootloader
     * @type boolean
     * @readonly
     * @required
     */
    main_bootloader: boolean;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_identificator
     * @type string
     * @required
     */
    version_identificator: string;
}


/**
 * @name IBootLoaderCreate
 * @description: Json Model for create Bootloader
 */
export interface IBootLoaderCreate {
    /**
     * @name changing_note
     * @type string
     * @description Length must be between 8 and 2500 characters.
     * @required
     */
    changing_note: string;
    /**
     * @name description
     * @type string
     * @description Length must be between 8 and 2500 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name version_identificator
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_identificator: string;
}


/**
 * @name IBootLoaderEdit
 * @description: Json Model for edit Bootloader
 */
export interface IBootLoaderEdit {
    /**
     * @name changing_note
     * @type string
     * @description Length must be between 8 and 2500 characters.
     * @required
     */
    changing_note: string;
    /**
     * @name description
     * @type string
     * @description Length must be between 8 and 2500 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name version_identificator
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_identificator: string;
}


/**
 * @name IBootloaderUpdateProgram
 * @description: Interface IBootloaderUpdateProgram definition
 */
export interface IBootloaderUpdateProgram {
    /**
     * @name bootloader_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    bootloader_id: string;
    /**
     * @name bootloader_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    bootloader_name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name version_identificator
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    version_identificator: string;
}


/**
 * @name ICProgramUpdatePlan
 * @description: Model of CProgramUpdatePlan
 */
export interface ICProgramUpdatePlan {
    /**
     * @name actualization_procedure_id
     * @type string
     * @readonly
     * @required
     */
    actualization_procedure_id: string;
    /**
     * @name binary_file_detail
     * @type IFileRecord
     * @description Is visible only if user send own binary file ( OR state for c_program_detail)
     * @readonly
     * @required
     */
    binary_file_detail: IFileRecord;
    /**
     * @name board
     * @type IBoardShortDetail
     */
    board?: IBoardShortDetail;
    /**
     * @name board_detail
     * @type IBoardUpdateShortDetail
     * @readonly
     * @required
     */
    board_detail: IBoardUpdateShortDetail;
    /**
     * @name bootloader_detail
     * @type IBootloaderUpdateProgram
     * @description Is visible only if update is for Bootloader
     * @readonly
     * @required
     */
    bootloader_detail: IBootloaderUpdateProgram;
    /**
     * @name c_program_detail
     * @type ICProgramUpdateProgram
     * @description Is visible only if update is for Firmware or Backup
     * @readonly
     * @required
     */
    c_program_detail: ICProgramUpdateProgram;
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     * @readonly
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_finish
     * @type string
     * @description UNIX time in ms
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_finish: string;
    /**
     * @name date_of_planing
     * @type string
     * @format date-time
     * @readonly
     * @required
     */
    date_of_planing: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name error
     * @type string
     * @description Only if state is critical_error or Homer record some error
     */
    error?: string;
    /**
     * @name error_code
     * @type number
     * @description Only if state is critical_error or Homer record some error
     * @format int32
     */
    error_code?: number;
    /**
     * @name firmware_type
     * @type ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI")
     * @required
     */
    firmware_type: ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI");
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name state
     * @type ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"not_updated"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"homer_server_never_connected"|"critical_error")
     * @description Description on Model C_ProgramUpdater_State
     * @required
     */
    state: ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"not_updated"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"homer_server_never_connected"|"critical_error");
    /**
     * @name type_of_update
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")
     * @readonly
     * @required
     */
    type_of_update: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE");
}


/**
 * @name ICProgram
 * @description: Object represented C_Program in database
 */
export interface ICProgram {
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with Permission
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @description can be empty
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @description minimal length is 8 characters
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type ICProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    program_versions: ICProgramVersionShortDetail[];
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name project_name
     * @type string
     * @readonly
     * @required
     */
    project_name: string;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @required
     */
    publish_type: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ICProgramCopy
 * @description: Json Model for copy C_Program
 */
export interface ICProgramCopy {
    /**
     * @name c_program_id
     * @type string
     * @required
     */
    c_program_id: string;
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    project_id: string;
}


/**
 * @name ICProgramEdit
 * @description: Json Model for new C_Program
 */
export interface ICProgramEdit {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name ICProgramFilter
 * @description: Json Model for getting C_Program Filter List
 */
export interface ICProgramFilter {
    /**
     * @name pending_programs
     * @type boolean
     * @description Designed for Administrators for publishing decisions of Community Codes - Without permission, the value is ignored. 
     */
    pending_programs?: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get C_Programs of given project
     */
    project_id?: string;
    /**
     * @name public_programs
     * @type boolean
     * @description Show - All Public Programs which are confirmed and approved.
     */
    public_programs?: boolean;
    /**
     * @name type_of_board_ids
     * @type string[]
     * @description Return by Type Of Board - and only codes with permissions
     */
    type_of_board_ids?: string[];
}


/**
 * @name ICProgramList
 * @description: Individual C_Program List
 */
export interface ICProgramList {
    /**
     * @name content
     * @type ICProgramShortDetail[]
     * @readonly
     * @required
     */
    content: ICProgramShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ICProgramNew
 * @description: Json Model for new C_Program
 */
export interface ICProgramNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    project_id: string;
    /**
     * @name type_of_board_id
     * @type string
     * @required
     */
    type_of_board_id: string;
}


/**
 * @name ICProgramShortDetailForBlocko
 * @description: Interface ICProgramShortDetailForBlocko definition
 */
export interface ICProgramShortDetailForBlocko {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name versions
     * @type ICProgramVersionsShortDetailForBlocko[]
     * @readonly
     * @required
     */
    versions: ICProgramVersionsShortDetailForBlocko[];
}


/**
 * @name ICProgramUpdateProgram
 * @description: Interface ICProgramUpdateProgram definition
 */
export interface ICProgramUpdateProgram {
    /**
     * @name c_program_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_program_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_program_name: string;
    /**
     * @name c_program_version_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_version_name: string;
}


/**
 * @name ICProgramVersion
 * @description: Json Model for Version of C_program
 */
export interface ICProgramVersion {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name files
     * @type ILibraryRecord[]
     * @readonly
     * @required
     */
    files: ILibraryRecord[];
    /**
     * @name imported_libraries
     * @type ILibraryLibraryVersionPair[]
     * @description List imported libraries
     * @readonly
     * @required
     */
    imported_libraries: ILibraryLibraryVersionPair[];
    /**
     * @name main
     * @type string
     * @readonly
     * @required
     */
    main: string;
    /**
     * @name remove_permission
     * @type boolean
     * @readonly
     * @required
     */
    remove_permission: boolean;
    /**
     * @name status
     * @type ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"hardware_unstable"|"undefined")
     * @readonly
     * @required
     */
    status: ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"hardware_unstable"|"undefined");
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @description Value can be empty, Server cannot guarantee that. External documentation: dsafsdfsdf
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name ICProgramVersionEdit
 * @description: Json Model for edit basic information of C_program Version
 */
export interface ICProgramVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionNew
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionNew {
    /**
     * @name files
     * @type ILibraryRecord[]
     */
    files?: ILibraryRecord[];
    /**
     * @name imported_libraries
     * @type string[]
     * @description Contains IDs of imported Library versions
     */
    imported_libraries?: string[];
    /**
     * @name library_compilation_version
     * @type string
     * @description The Library Version tag_name from TypeOfBoard.supported_libraries
     */
    library_compilation_version?: string;
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionShortDetail
 * @description: Json Model for Public Version of C_program
 */
export interface ICProgramVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name download_link_bin_file
     * @type string
     * @description Link for download file in Binary (Not in Base64)
     * @readonly
     * @required
     */
    download_link_bin_file: string;
    /**
     * @name library_compilation_version
     * @type string
     * @readonly
     * @required
     */
    library_compilation_version: string;
    /**
     * @name main_mark
     * @type boolean
     * @description Only for TypeOfBoard. Mark of default Version
     * @readonly
     * @required
     */
    main_mark: boolean;
    /**
     * @name publish_status
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @readonly
     * @required
     */
    publish_status: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name status
     * @type ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"hardware_unstable"|"undefined")
     * @readonly
     * @required
     */
    status: ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"hardware_unstable"|"undefined");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionUpdate
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionUpdate {
    /**
     * @name files
     * @type ILibraryRecord[]
     * @readonly
     * @required
     */
    files: ILibraryRecord[];
    /**
     * @name imported_libraries
     * @type string[]
     * @description List ID of libraries version ID
     * @readonly
     * @required
     */
    imported_libraries: string[];
    /**
     * @name library_compilation_version
     * @type string
     * @description The Library Version tag_name from TypeOfBoard.supported_libraries
     */
    library_compilation_version?: string;
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
    /**
     * @name type_of_board_id
     * @type string
     * @description Required only if user compile code not under C++ code version (where compilation can found type_of_board)
     */
    type_of_board_id?: string;
}


/**
 * @name ICProgramVersionsShortDetailForBlocko
 * @description: Interface ICProgramVersionsShortDetailForBlocko definition
 */
export interface ICProgramVersionsShortDetailForBlocko {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
    /**
     * @name virtual_input_output
     * @type string
     * @description It can be null if server has not image of compilation restored in database
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name ICProgramShortDetail
 * @description: Json Model with details of C_program>
 */
export interface ICProgramShortDetail {
    /**
     * @name community_publishing_permission
     * @type boolean
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ICloudCompilationServerCompilationResult
 * @description: Interface ICloudCompilationServerCompilationResult definition
 */
export interface ICloudCompilationServerCompilationResult {
    /**
     * @name interface_code
     * @type string
     * @readonly
     * @required
     */
    interface_code: string;
}


/**
 * @name ICloudHomerServerNew
 * @description: Json Model for new Blocko Server
 */
export interface ICloudHomerServerNew {
    /**
     * @name grid_port
     * @type number
     * @format int32
     * @required
     */
    grid_port: number;
    /**
     * @name mqtt_port
     * @type number
     * @format int32
     * @required
     */
    mqtt_port: number;
    /**
     * @name personal_server_name
     * @type string
     * @description Personal name For Homer cloud_homer_server. Length must be between 6 and 60 characters
     * @required
     */
    personal_server_name: string;
    /**
     * @name projects_id
     * @type string[]
     * @description Optiona value - only for private server
     */
    projects_id?: string[];
    /**
     * @name server_remote_port
     * @type number
     * @format int32
     * @required
     */
    server_remote_port: number;
    /**
     * @name server_url
     * @type string
     * @required
     */
    server_url: string;
    /**
     * @name tarriff_id
     * @type string
     * @description Optiona value - only for private server
     */
    tarriff_id?: string;
    /**
     * @name web_view_port
     * @type number
     * @format int32
     * @required
     */
    web_view_port: number;
}


/**
 * @name ICommunityVersionPublishResponse
 * @description: Json Model for admin response for publishing C_Program
 */
export interface ICommunityVersionPublishResponse {
    /**
     * @name decision
     * @type boolean
     * @required
     */
    decision: boolean;
    /**
     * @name program_description
     * @type string
     * @required
     */
    program_description: string;
    /**
     * @name program_name
     * @type string
     * @required
     */
    program_name: string;
    /**
     * @name reason
     * @type string
     * @required
     */
    reason: string;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name ICompilationLibrary
 * @description: Json Model with Library Compilation
 */
export interface ICompilationLibrary {
    /**
     * @name body
     * @type string
     */
    body?: string;
    /**
     * @name created_at
     * @type string
     * @required
     */
    created_at: string;
    /**
     * @name draft
     * @type boolean
     * @required
     */
    draft: boolean;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name prerelease
     * @type boolean
     * @required
     */
    prerelease: boolean;
    /**
     * @name published_at
     * @type string
     * @required
     */
    published_at: string;
    /**
     * @name tag_name
     * @type string
     * @example v1.0.1
     * @required
     */
    tag_name: string;
}


/**
 * @name ICompilationBuildError
 * @description: Json Model for Compilation Result
 */
export interface ICompilationBuildError {
    /**
     * @name adjustedColumn
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    adjustedColumn: number;
    /**
     * @name code
     * @type string
     * @readonly
     * @required
     */
    code: string;
    /**
     * @name codeWhitespace
     * @type string
     * @readonly
     * @required
     */
    codeWhitespace: string;
    /**
     * @name column
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    column: number;
    /**
     * @name endIndex
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    endIndex: number;
    /**
     * @name filename
     * @type string
     * @readonly
     * @required
     */
    filename: string;
    /**
     * @name line
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    line: number;
    /**
     * @name startIndex
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    startIndex: number;
    /**
     * @name state
     * @type string
     * @description Value is build_error
     * @readonly
     * @required
     */
    state: string;
    /**
     * @name text
     * @type string
     * @readonly
     * @required
     */
    text: string;
    /**
     * @name type
     * @type string
     * @readonly
     * @required
     */
    type: string;
}


/**
 * @name ICompilationServer
 * @description: Model of CompilationServer
 */
export interface ICompilationServer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name personal_server_name
     * @type string
     * @required
     */
    personal_server_name: string;
    /**
     * @name server_url
     * @type string
     * @readonly
     * @required
     */
    server_url: string;
}


/**
 * @name ICompilationServerNew
 * @description: Json Model for new Compilation Server
 */
export interface ICompilationServerNew {
    /**
     * @name personal_server_name
     * @type string
     * @description Unique name For Compiler cloud_blocko_server, The name length must be between 6 and 60 characters
     * @required
     */
    personal_server_name: string;
    /**
     * @name server_url
     * @type string
     * @required
     */
    server_url: string;
}


/**
 * @name ICompilerServerPublicDetail
 * @description: Json Model for Person_Short_Detail
 */
export interface ICompilerServerPublicDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name personal_server_name
     * @type string
     * @readonly
     * @required
     */
    personal_server_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IComputer
 * @description: Interface IComputer definition
 */
export interface IComputer {
    /**
     * @name createTimestamp
     * @type string
     * @required
     */
    createTimestamp: string;
    /**
     * @name hostname
     * @type string
     * @required
     */
    hostname: string;
    /**
     * @name inet
     * @type string
     * @required
     */
    inet: string;
    /**
     * @name inet6
     * @type string
     * @required
     */
    inet6: string;
    /**
     * @name jre
     * @type string
     * @required
     */
    jre: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name state
     * @type string
     * @required
     */
    state: string;
    /**
     * @name version
     * @type string
     * @required
     */
    version: string;
}


/**
 * @name IConnectedBoardIN
 * @description: Interface IConnectedBoardIN definition
 */
export interface IConnectedBoardIN {
    /**
     * @name board_id
     * @type string
     * @required
     */
    board_id: string;
    /**
     * @name c_program_version_id
     * @type string
     * @required
     */
    c_program_version_id: string;
}


/**
 * @name ICustomer
 * @description: Model of Customer
 */
export interface ICustomer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name employees
     * @type IEmployee[]
     * @required
     */
    employees: IEmployee[];
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name payment_details
     * @type IPaymentDetails
     * @required
     */
    payment_details: IPaymentDetails;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ICustomerEmployee
 * @description: For adding employees to a company.
 */
export interface ICustomerEmployee {
    /**
     * @name customer_id
     * @type string
     * @required
     */
    customer_id: string;
    /**
     * @name mails
     * @type string[]
     * @required
     */
    mails: string[];
}


/**
 * @name ICustomerNew
 * @description: Json Model for creating new company.
 */
export interface ICustomerNew {
    /**
     * @name city
     * @type string
     * @description The city must have at least 2 characters
     * @required
     */
    city: string;
    /**
     * @name company_authorized_email
     * @type string
     * @description The company_authorized_email must have at least 4 characters
     * @required
     */
    company_authorized_email: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description The company_authorized_phone must have at least 4 characters
     * @required
     */
    company_authorized_phone: string;
    /**
     * @name company_name
     * @type string
     * @description The company_name must have at least 4 characters
     * @required
     */
    company_name: string;
    /**
     * @name company_registration_no
     * @type string
     * @description The company_registration_no must have at least 4 characters and maximum 20 characters - FOR non-EU countries, for Business account is required registration_no OR vat_number
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Required: only if account is business & from EU!!! CZ28496639 for Business account is required registration_no OR vat_number
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description The country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name invoice_email
     * @type string
     * @description Email must be valid
     * @required
     */
    invoice_email: string;
    /**
     * @name street
     * @type string
     * @description The street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: always. But The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name zip_code
     * @type string
     * @description The zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name IDMBoardBootloaderDefaultConfig
 * @description: Interface IDMBoardBootloaderDefaultConfig definition
 */
export interface IDMBoardBootloaderDefaultConfig {
    /**
     * @name autobackup
     * @type boolean
     * @readonly
     * @required
     */
    autobackup: boolean;
    /**
     * @name autojump
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    autojump: number;
    /**
     * @name blreport
     * @type boolean
     * @readonly
     * @required
     */
    blreport: boolean;
    /**
     * @name lowpanbr
     * @type boolean
     * @readonly
     * @required
     */
    lowpanbr: boolean;
    /**
     * @name netsource
     * @type string
     * @readonly
     * @required
     */
    netsource: string;
    /**
     * @name timeoffset
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    timeoffset: number;
    /**
     * @name timesync
     * @type boolean
     * @readonly
     * @required
     */
    timesync: boolean;
    /**
     * @name wdenable
     * @type boolean
     * @readonly
     * @required
     */
    wdenable: boolean;
    /**
     * @name wdtime
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    wdtime: number;
    /**
     * @name webport
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    webport: number;
    /**
     * @name webview
     * @type boolean
     * @readonly
     * @required
     */
    webview: boolean;
}


/**
 * @name IEmployee
 * @description: Model of Employee
 */
export interface IEmployee {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name person
     * @type IPersonShortDetail
     */
    person?: IPersonShortDetail;
    /**
     * @name state
     * @type ("owner"|"admin"|"member"|"invited")
     * @required
     */
    state: ("owner"|"admin"|"member"|"invited");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IEntityValidationIn
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationIn {
    /**
     * @name key
     * @type ("mail"|"nick_name"|"vat_number")
     * @description This field is required
     * @required
     */
    key: ("mail"|"nick_name"|"vat_number");
    /**
     * @name value
     * @type string
     * @description This field is required
     * @required
     */
    value: string;
}


/**
 * @name IEntityValidationOut
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationOut {
    /**
     * @name message
     * @type string
     * @description If valid = false, Json probably contains message for user
     * @example Email is used
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name valid
     * @type boolean
     * @description Entity (Email, NickName.. etc) is valid if valid = true
     * @readonly
     * @required
     */
    valid: boolean;
}


/**
 * @name IExampleShortDetail
 * @description: Json Model with details of Example C_Program>
 */
export interface IExampleShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name main
     * @type string
     * @readonly
     * @required
     */
    main: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IExternalServerSideError
 * @description: Unknown Error on external server 
 */
export interface IExternalServerSideError {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IFileRecord
 * @description: Model of FileRecord
 */
export interface IFileRecord {
    /**
     * @name file_name
     * @type string
     * @required
     */
    file_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
}


/**
 * @name IFileContent
 * @description: Json Model for file content
 */
export interface IFileContent {
    /**
     * @name file_in_base64
     * @type string
     * @required
     */
    file_in_base64: string;
}


/**
 * @name IFloatingPersonToken
 * @description: Model of FloatingPersonToken
 */
export interface IFloatingPersonToken {
    /**
     * @name access_age
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    access_age: number;
    /**
     * @name connection_id
     * @type string
     * @required
     */
    connection_id: string;
    /**
     * @name created
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name provider_key
     * @type string
     * @required
     */
    provider_key: string;
    /**
     * @name provider_user_id
     * @type string
     * @required
     */
    provider_user_id: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name return_url
     * @type string
     * @required
     */
    return_url: string;
    /**
     * @name social_token_verified
     * @type boolean
     * @required
     */
    social_token_verified: boolean;
    /**
     * @name type_of_connection
     * @type string
     * @required
     */
    type_of_connection: string;
    /**
     * @name user_agent
     * @type string
     * @required
     */
    user_agent: string;
    /**
     * @name where_logged
     * @type ("BECKI_WEBSITE"|"HOMER_SERVER"|"E_STORE")
     * @description Record, where user make login
     * @required
     */
    where_logged: ("BECKI_WEBSITE"|"HOMER_SERVER"|"E_STORE");
}


/**
 * @name IForbidden
 * @description: Permission is needed for this action.
 */
export interface IForbidden {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IGarfield
 * @description: Model of Garfield test set
 */
export interface IGarfield {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name hardware_tester_id
     * @type string
     * @required
     */
    hardware_tester_id: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name print_label_id_1
     * @type number
     * @format int32
     * @required
     */
    print_label_id_1: number;
    /**
     * @name print_label_id_2
     * @type number
     * @format int32
     * @required
     */
    print_label_id_2: number;
    /**
     * @name print_sticker_id
     * @type number
     * @format int32
     * @required
     */
    print_sticker_id: number;
    /**
     * @name producer
     * @type IProducer
     * @readonly
     * @required
     */
    producer: IProducer;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name type_of_board
     * @type ITypeOfBoard
     * @readonly
     * @required
     */
    type_of_board: ITypeOfBoard;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IGarfieldEdit
 * @description: Json Model for creating new Garfield.
 */
export interface IGarfieldEdit {
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name hardware_tester_id
     * @type string
     * @required
     */
    hardware_tester_id: string;
    /**
     * @name name
     * @type string
     * @description The street must have at least 4 characters
     * @required
     */
    name: string;
    /**
     * @name print_label_id_1
     * @type number
     * @format int32
     * @required
     */
    print_label_id_1: number;
    /**
     * @name print_label_id_2
     * @type number
     * @format int32
     * @required
     */
    print_label_id_2: number;
    /**
     * @name print_sticker_id
     * @type number
     * @format int32
     * @required
     */
    print_sticker_id: number;
}


/**
 * @name IGarfieldNew
 * @description: Json Model for creating new Garfield.
 */
export interface IGarfieldNew {
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name hardware_tester_id
     * @type string
     * @required
     */
    hardware_tester_id: string;
    /**
     * @name name
     * @type string
     * @description The street must have at least 4 characters
     * @required
     */
    name: string;
    /**
     * @name print_label_id_1
     * @type number
     * @format int32
     * @required
     */
    print_label_id_1: number;
    /**
     * @name print_label_id_2
     * @type number
     * @format int32
     * @required
     */
    print_label_id_2: number;
    /**
     * @name print_sticker_id
     * @type number
     * @format int32
     * @required
     */
    print_sticker_id: number;
    /**
     * @name producer_id
     * @type string
     * @required
     */
    producer_id: string;
    /**
     * @name type_of_board_id
     * @type string
     * @required
     */
    type_of_board_id: string;
}


/**
 * @name IGitHubReleases
 * @description: Json Model - Private for GitHub Release
 */
export interface IGitHubReleases {
    /**
     * @name assets
     * @type IGitHubReleasesAsset[]
     * @required
     */
    assets: IGitHubReleasesAsset[];
    /**
     * @name assets_url
     * @type string
     * @required
     */
    assets_url: string;
    /**
     * @name body
     * @type string
     * @required
     */
    body: string;
    /**
     * @name created_at
     * @type string
     * @required
     */
    created_at: string;
    /**
     * @name draft
     * @type boolean
     * @required
     */
    draft: boolean;
    /**
     * @name html_url
     * @type string
     * @required
     */
    html_url: string;
    /**
     * @name id
     * @type number
     * @format int32
     * @required
     */
    id: number;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name prerelease
     * @type boolean
     * @required
     */
    prerelease: boolean;
    /**
     * @name published_at
     * @type string
     * @required
     */
    published_at: string;
    /**
     * @name tag_name
     * @type string
     * @required
     */
    tag_name: string;
    /**
     * @name tarball_url
     * @type string
     * @required
     */
    tarball_url: string;
    /**
     * @name target_commitish
     * @type string
     * @required
     */
    target_commitish: string;
    /**
     * @name upload_url
     * @type string
     * @required
     */
    upload_url: string;
    /**
     * @name url
     * @type string
     * @required
     */
    url: string;
    /**
     * @name zipball_url
     * @type string
     * @required
     */
    zipball_url: string;
}


/**
 * @name IGitHubReleasesAsset
 * @description: Json Model - Private for GitHub Release Assets
 */
export interface IGitHubReleasesAsset {
    /**
     * @name browser_download_url
     * @type string
     * @required
     */
    browser_download_url: string;
    /**
     * @name content_type
     * @type string
     * @required
     */
    content_type: string;
    /**
     * @name created_at
     * @type string
     * @required
     */
    created_at: string;
    /**
     * @name download_count
     * @type number
     * @format int32
     * @required
     */
    download_count: number;
    /**
     * @name id
     * @type number
     * @format int32
     * @required
     */
    id: number;
    /**
     * @name label
     * @type string
     * @required
     */
    label: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name size
     * @type number
     * @format int32
     * @required
     */
    size: number;
    /**
     * @name state
     * @type string
     * @required
     */
    state: string;
    /**
     * @name updated_at
     * @type string
     * @required
     */
    updated_at: string;
    /**
     * @name url
     * @type string
     * @required
     */
    url: string;
}


/**
 * @name IGridWidget
 * @description: Model of GridWidget
 */
export interface IGridWidget {
    /**
     * @name active
     * @type boolean
     * @description Only for Community Administrator
     */
    active?: boolean;
    /**
     * @name author_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_id: string;
    /**
     * @name author_nick_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_nick_name: string;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with Permission
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name producer_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @required
     */
    publish_type: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name type_of_widget_id
     * @type string
     * @readonly
     * @required
     */
    type_of_widget_id: string;
    /**
     * @name type_of_widget_name
     * @type string
     * @readonly
     * @required
     */
    type_of_widget_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IGridWidgetVersionShortDetail[]
     * @readonly
     * @required
     */
    versions: IGridWidgetVersionShortDetail[];
}


/**
 * @name IGridWidgetVersion
 * @description: Model of GridWidgetVersion
 */
export interface IGridWidgetVersion {
    /**
     * @name approval_state
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @description Only if user make request for publishing
     */
    approval_state?: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name author
     * @type IPersonShortDetail
     */
    author?: IPersonShortDetail;
    /**
     * @name create_permission
     * @type boolean
     * @readonly
     * @required
     */
    create_permission: boolean;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetVersionEdit
 * @description: Json Model for editing GridWidgetVersion
 */
export interface IGridWidgetVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetVersionNew
 * @description: Json Model for crating new version and also content of GridWidget Model
 */
export interface IGridWidgetVersionNew {
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name version_description
     * @type string
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetVersionShortDetail
 * @description: Json Model for Version of GridWidgetVersion short
 */
export interface IGridWidgetVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     * @readonly
     * @required
     */
    date_of_create: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name design_json
     * @type string
     * @readonly
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name publish_status
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @readonly
     * @required
     */
    publish_status: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @description Only for main / default program - and access only for administrators
     */
    publish_type?: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
}


/**
 * @name IGridWidgetFilter
 * @description: Json Model for getting GridWidget Filter List
 */
export interface IGridWidgetFilter {
    /**
     * @name pending_widget
     * @type boolean
     * @description Only for Admins with permissions
     */
    pending_widget?: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Widgets of given project
     */
    project_id?: string;
    /**
     * @name public_programs
     * @type boolean
     * @description Show - All Public Programs which are confirmed and approved.
     */
    public_programs?: boolean;
    /**
     * @name type_of_widgets_ids
     * @type string[]
     * @description Return by Type Of Widgets - and only codes with permissions
     */
    type_of_widgets_ids?: string[];
}


/**
 * @name IGridWidgetList
 * @description: Individual GridWidget List
 */
export interface IGridWidgetList {
    /**
     * @name content
     * @type IGridWidgetShortDetail[]
     * @readonly
     * @required
     */
    content: IGridWidgetShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IGridWidgetNew
 * @description: Json Model for crating new GridWidget Model
 */
export interface IGridWidgetNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 0 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name type_of_widget_id
     * @type string
     * @description Required valid type_of_widget id
     * @required
     */
    type_of_widget_id: string;
}


/**
 * @name IGridWidgetPublishResponse
 * @description: Json Model for admin response for publishing GridWidget
 */
export interface IGridWidgetPublishResponse {
    /**
     * @name decision
     * @type boolean
     * @required
     */
    decision: boolean;
    /**
     * @name grid_widget_type_of_widget_id
     * @type string
     * @description Required only if decision == true
     * @readonly
     * @required
     */
    grid_widget_type_of_widget_id: string;
    /**
     * @name program_description
     * @type string
     * @required
     */
    program_description: string;
    /**
     * @name program_name
     * @type string
     * @required
     */
    program_name: string;
    /**
     * @name reason
     * @type string
     * @required
     */
    reason: string;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetShortDetail
 * @description: GridWidget Light (only few properties)
 */
export interface IGridWidgetShortDetail {
    /**
     * @name active
     * @type boolean
     * @readonly
     * @required
     */
    active: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IGridWidgetVersionShortDetail[]
     * @readonly
     * @required
     */
    versions: IGridWidgetVersionShortDetail[];
}


/**
 * @name IGridTerminal
 * @description: Model of Grid_Terminal
 */
export interface IGridTerminal {
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     * @required
     */
    device_name: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     * @required
     */
    device_type: string;
    /**
     * @name m_program_access
     * @type boolean
     * @required
     */
    m_program_access: boolean;
    /**
     * @name terminal_token
     * @type string
     * @example Mobile, WebBrowser
     * @readonly
     * @required
     */
    terminal_token: string;
    /**
     * @name up_to_date
     * @type boolean
     * @required
     */
    up_to_date: boolean;
    /**
     * @name user_agent
     * @type string
     * @readonly
     * @required
     */
    user_agent: string;
    /**
     * @name ws_permission
     * @type boolean
     * @required
     */
    ws_permission: boolean;
}


/**
 * @name IGridTerminalIdentf
 * @description: Json Model for Identificator
 */
export interface IGridTerminalIdentf {
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     * @required
     */
    device_name: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     * @required
     */
    device_type: string;
}


/**
 * @name IGridWidgetCopy
 * @description: Json Model for copy Grid_Widget
 */
export interface IGridWidgetCopy {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name grid_widget_id
     * @type string
     * @required
     */
    grid_widget_id: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    project_id: string;
    /**
     * @name type_of_widget_id
     * @type string
     */
    type_of_widget_id?: string;
}


/**
 * @name IGroupPair
 * @description: Interface IGroupPair definition
 */
export interface IGroupPair {
    /**
     * @name group_id
     * @type string
     * @required
     */
    group_id: string;
    /**
     * @name version_id
     * @type string
     * @required
     */
    version_id: string;
}


/**
 * @name IHardwareGroupShortDetail
 * @description: Json Model for data Hardware Group
 */
export interface IHardwareGroupShortDetail {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IHardwareGroupDeviceListEdit
 * @description: Json Model for new Hardware Group edit group of devices or group of hardware
 */
export interface IHardwareGroupDeviceListEdit {
    /**
     * @name device_synchro
     * @type IHardwareGroupDeviceListEditDevice
     */
    device_synchro?: IHardwareGroupDeviceListEditDevice;
    /**
     * @name group_synchro
     * @type IHardwareGroupDeviceListEditGroup
     */
    group_synchro?: IHardwareGroupDeviceListEditGroup;
}


/**
 * @name IHardwareGroupDeviceListEditDevice
 * @description: Json Model for new Hardware Group edit group of devices or group of hardware
 */
export interface IHardwareGroupDeviceListEditDevice {
    /**
     * @name device_id
     * @type string
     * @required
     */
    device_id: string;
    /**
     * @name group_ids
     * @type string[]
     * @required
     */
    group_ids: string[];
}


/**
 * @name IHardwareGroupDeviceListEditGroup
 * @description: Json Model for new Hardware Group edit group of devices or group of hardware
 */
export interface IHardwareGroupDeviceListEditGroup {
    /**
     * @name device_ids
     * @type string[]
     * @required
     */
    device_ids: string[];
    /**
     * @name group_id
     * @type string
     * @required
     */
    group_id: string;
}


/**
 * @name IHardwareGroupEdit
 * @description: Json Model for new Hardware Group
 */
export interface IHardwareGroupEdit {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IHardwareGroupNew
 * @description: Json Model for new Hardware Group
 */
export interface IHardwareGroupNew {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    project_id: string;
}


/**
 * @name IHardwareNewPassword
 * @description: Interface IHardwareNewPassword definition
 */
export interface IHardwareNewPassword {
    /**
     * @name mqtt_password
     * @type string
     * @readonly
     * @required
     */
    mqtt_password: string;
    /**
     * @name mqtt_username
     * @type string
     * @readonly
     * @required
     */
    mqtt_username: string;
}


/**
 * @name IHardwareNewSettingsResult
 * @description: Json Model with settings and firwmare and bootloader for Embedded hardware
 */
export interface IHardwareNewSettingsResult {
    /**
     * @name configuration
     * @type IHardwareNewSettingsResultConfiguration
     * @readonly
     * @required
     */
    configuration: IHardwareNewSettingsResultConfiguration;
    /**
     * @name full_id
     * @type string
     * @readonly
     * @required
     */
    full_id: string;
}


/**
 * @name IHardwareNewSettingsResultConfiguration
 * @description: Interface IHardwareNewSettingsResultConfiguration definition
 */
export interface IHardwareNewSettingsResultConfiguration {
    /**
     * @name autobackup
     * @type boolean
     * @readonly
     * @required
     */
    autobackup: boolean;
    /**
     * @name autojump
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    autojump: number;
    /**
     * @name backup_mqtt_hostname
     * @type string
     * @readonly
     * @required
     */
    backup_mqtt_hostname: string;
    /**
     * @name backup_mqtt_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    backup_mqtt_port: number;
    /**
     * @name blreport
     * @type boolean
     * @readonly
     * @required
     */
    blreport: boolean;
    /**
     * @name lowpanbr
     * @type boolean
     * @readonly
     * @required
     */
    lowpanbr: boolean;
    /**
     * @name mac
     * @type string
     * @readonly
     * @required
     */
    mac: string;
    /**
     * @name mqtt_password
     * @type string
     * @readonly
     * @required
     */
    mqtt_password: string;
    /**
     * @name mqtt_username
     * @type string
     * @readonly
     * @required
     */
    mqtt_username: string;
    /**
     * @name netsource
     * @type string
     * @readonly
     * @required
     */
    netsource: string;
    /**
     * @name normal_mqtt_hostname
     * @type string
     * @readonly
     * @required
     */
    normal_mqtt_hostname: string;
    /**
     * @name normal_mqtt_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    normal_mqtt_port: number;
    /**
     * @name timeoffset
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    timeoffset: number;
    /**
     * @name timesync
     * @type boolean
     * @readonly
     * @required
     */
    timesync: boolean;
    /**
     * @name wdenable
     * @type boolean
     * @readonly
     * @required
     */
    wdenable: boolean;
    /**
     * @name wdtime
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    wdtime: number;
    /**
     * @name webport
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    webport: number;
    /**
     * @name webview
     * @type boolean
     * @readonly
     * @required
     */
    webview: boolean;
}


/**
 * @name IHardwareGroup
 * @description: Interface IHardwareGroup definition
 */
export interface IHardwareGroup {
    /**
     * @name device_board_pairs
     * @type IBPair[]
     * @required
     */
    device_board_pairs: IBPair[];
    /**
     * @name main_board_pair
     * @type IBPair
     * @required
     */
    main_board_pair: IBPair;
}


/**
 * @name IHardwareGroupIN
 * @description: Interface IHardwareGroupIN definition
 */
export interface IHardwareGroupIN {
    /**
     * @name device_board_pairs
     * @type IConnectedBoardIN[]
     */
    device_board_pairs?: IConnectedBoardIN[];
    /**
     * @name main_board_pair
     * @type IConnectedBoardIN
     * @description This board must be connectible_to_internet = true! User can create new B_Program version without Main Board, but its not possible to upload that to cloud like new Instance
     * @required
     */
    main_board_pair: IConnectedBoardIN;
}


/**
 * @name IHomerInstance
 * @description: Model of HomerInstance
 */
export interface IHomerInstance {
    /**
     * @name actual_instance
     * @type IHomerInstanceRecord
     * @required
     */
    actual_instance: IHomerInstanceRecord;
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name instance_history
     * @type IHomerInstanceRecord[]
     * @required
     */
    instance_history: IHomerInstanceRecord[];
    /**
     * @name instance_remote_url
     * @type string
     * @readonly
     * @required
     */
    instance_remote_url: string;
    /**
     * @name instance_type
     * @type ("VIRTUAL"|"INDIVIDUAL")
     * @required
     */
    instance_type: ("VIRTUAL"|"INDIVIDUAL");
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
    /**
     * @name server_online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    server_online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IHomerInstanceRecord
 * @description: Model of HomerInstanceRecord
 */
export interface IHomerInstanceRecord {
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name b_program_version_description
     * @type string
     * @readonly
     * @required
     */
    b_program_version_description: string;
    /**
     * @name b_program_version_id
     * @type string
     * @readonly
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @readonly
     * @required
     */
    b_program_version_name: string;
    /**
     * @name date_of_created
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    date_of_created: string;
    /**
     * @name hardware_group
     * @type IHardwareGroup[]
     * @readonly
     * @required
     */
    hardware_group: IHardwareGroup[];
    /**
     * @name instance_record_id
     * @type string
     * @readonly
     * @required
     */
    instance_record_id: string;
    /**
     * @name m_project_snapshot
     * @type IMProjectSnapShotDetail[]
     * @readonly
     * @required
     */
    m_project_snapshot: IMProjectSnapShotDetail[];
    /**
     * @name planed_when
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    planed_when: string;
    /**
     * @name procedure_short_details
     * @type IActualizationProcedureShortDetail[]
     * @readonly
     * @required
     */
    procedure_short_details: IActualizationProcedureShortDetail[];
    /**
     * @name running_from
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    running_from: string;
    /**
     * @name running_to
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    running_to: string;
    /**
     * @name status
     * @type ("FUTURE"|"NOW"|"HISTORY")
     * @readonly
     * @required
     */
    status: ("FUTURE"|"NOW"|"HISTORY");
}


/**
 * @name IHomerServer
 * @description: Model of HomerServer
 */
export interface IHomerServer {
    /**
     * @name connection_identificator
     * @type string
     * @readonly
     * @required
     */
    connection_identificator: string;
    /**
     * @name days_in_archive
     * @type number
     * @format int32
     * @required
     */
    days_in_archive: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name grid_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    grid_port: number;
    /**
     * @name hash_certificate
     * @type string
     * @readonly
     * @required
     */
    hash_certificate: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name interactive
     * @type boolean
     * @required
     */
    interactive: boolean;
    /**
     * @name log_level
     * @type ("error"|"warn"|"info"|"debug"|"trace")
     * @required
     */
    log_level: ("error"|"warn"|"info"|"debug"|"trace");
    /**
     * @name logging
     * @type boolean
     * @required
     */
    logging: boolean;
    /**
     * @name mqtt_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    mqtt_port: number;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name personal_server_name
     * @type string
     * @readonly
     * @required
     */
    personal_server_name: string;
    /**
     * @name rest_api_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    rest_api_port: number;
    /**
     * @name server_remote_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    server_remote_port: number;
    /**
     * @name server_type
     * @type ("public_server"|"private_server"|"backup_server"|"main_server"|"test_server")
     * @required
     */
    server_type: ("public_server"|"private_server"|"backup_server"|"main_server"|"test_server");
    /**
     * @name server_url
     * @type string
     * @readonly
     * @required
     */
    server_url: string;
    /**
     * @name server_version
     * @type string
     * @readonly
     * @required
     */
    server_version: string;
    /**
     * @name time_stamp_configuration
     * @type string
     * @format date-time
     * @required
     */
    time_stamp_configuration: string;
    /**
     * @name web_view_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    web_view_port: number;
}


/**
 * @name IInstanceEdit
 * @description: Interface IInstanceEdit definition
 */
export interface IInstanceEdit {
    /**
     * @name description
     * @type string
     * @description Description
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 0 and 255 characters.
     * @required
     */
    name: string;
}


/**
 * @name IInstanceFilter
 * @description: Interface IInstanceFilter definition
 */
export interface IInstanceFilter {
    /**
     * @name instance_types
     * @type string[]
     */
    instance_types?: string[];
    /**
     * @name project_id
     * @type string
     */
    project_id?: string;
    /**
     * @name server_unique_ids
     * @type string[]
     */
    server_unique_ids?: string[];
}


/**
 * @name IInstanceGridAppSettings
 * @description: Json Model for changing parameters on Gridd App in instance
 */
export interface IInstanceGridAppSettings {
    /**
     * @name m_program_parameter_id
     * @type string
     * @required
     */
    m_program_parameter_id: string;
    /**
     * @name snapshot_settings
     * @type string
     * @required
     */
    snapshot_settings: string;
}


/**
 * @name IInstanceList
 * @description: List of instancies by Filter Query
 */
export interface IInstanceList {
    /**
     * @name content
     * @type IHomerInstance[]
     * @readonly
     * @required
     */
    content: IHomerInstance[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IInstanceShortDetail
 * @description: Instance Light (only few properties)
 */
export interface IInstanceShortDetail {
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name b_program_version_id
     * @type string
     * @readonly
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @readonly
     * @required
     */
    b_program_version_name: string;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name instance_online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    instance_online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
    /**
     * @name server_online_state
     * @type ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    server_online_state: ("not_yet_first_connected"|"shut_down"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IInternalServerError
 * @description: When server is in fault state
 */
export interface IInternalServerError {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IInvalidBody
 * @description: Provided body is not valid. Something is missing or some field input is not allowed.
 */
export interface IInvalidBody {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name exception
     * @type IJsonNode
     * @readonly
     * @required
     */
    exception: IJsonNode;
    /**
     * @name message
     * @type string
     * @description message
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IInvitePerson
 * @description: Json Model for sharing project with Persons, invite to permission group etc..
 */
export interface IInvitePerson {
    /**
     * @name persons_mail
     * @type string[]
     * @required
     */
    persons_mail: string[];
}


/**
 * @name IInvoice
 * @description: Model of Invoice
 */
export interface IInvoice {
    /**
     * @name created
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name gw_url
     * @type string
     * @description Visible only when the invoice is not paid
     */
    gw_url?: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name invoice_items
     * @type IInvoiceItem[]
     * @readonly
     * @required
     */
    invoice_items: IInvoiceItem[];
    /**
     * @name invoice_number
     * @type string
     * @readonly
     * @required
     */
    invoice_number: string;
    /**
     * @name invoice_pdf_link
     * @type string
     * @description Visible only when the invoice is available
     * @readonly
     * @required
     */
    invoice_pdf_link: string;
    /**
     * @name overdue
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    overdue: number;
    /**
     * @name paid
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    paid: number;
    /**
     * @name payment_method
     * @type string
     * @readonly
     * @required
     */
    payment_method: string;
    /**
     * @name payment_status
     * @type string
     * @readonly
     * @required
     */
    payment_status: string;
    /**
     * @name price
     * @type number
     * @format double
     * @readonly
     * @required
     */
    price: number;
    /**
     * @name proforma_pdf_link
     * @type string
     * @description Visible only when the invoice is available
     * @readonly
     * @required
     */
    proforma_pdf_link: string;
    /**
     * @name require_payment
     * @type boolean
     * @description Visible only when the invoice is not paid
     * @readonly
     * @required
     */
    require_payment: boolean;
}


/**
 * @name IInvoiceItem
 * @description: Model of InvoiceItem
 */
export interface IInvoiceItem {
    /**
     * @name currency
     * @type ("CZK"|"EUR"|"USD")
     * @required
     */
    currency: ("CZK"|"EUR"|"USD");
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name quantity
     * @type number
     * @format int64
     * @required
     */
    quantity: number;
    /**
     * @name unit_name
     * @type string
     * @required
     */
    unit_name: string;
    /**
     * @name unit_price
     * @type number
     * @format double
     */
    unit_price?: number;
    /**
     * @name unit_price_without_vat
     * @type number
     * @format double
     * @readonly
     * @required
     */
    unit_price_without_vat: number;
    /**
     * @name vat
     * @type number
     * @format int64
     * @required
     */
    vat: number;
    /**
     * @name vat_rate
     * @type string
     * @readonly
     * @required
     */
    vat_rate: string;
}


/**
 * @name IInvoiceFullDetails
 * @description: Json Model for new Producer
 */
export interface IInvoiceFullDetails {
    /**
     * @name invoice
     * @type IInvoice
     * @required
     */
    invoice: IInvoice;
    /**
     * @name invoice_items
     * @type IInvoiceItem[]
     * @required
     */
    invoice_items: IInvoiceItem[];
}


/**
 * @name IJsonNode
 * @description: Interface IJsonNode definition
 */
export interface IJsonNode {
    /**
     * @name array
     * @type boolean
     * @required
     */
    array: boolean;
    /**
     * @name bigDecimal
     * @type boolean
     * @required
     */
    bigDecimal: boolean;
    /**
     * @name bigInteger
     * @type boolean
     * @required
     */
    bigInteger: boolean;
    /**
     * @name binary
     * @type boolean
     * @required
     */
    binary: boolean;
    /**
     * @name boolean
     * @type boolean
     * @required
     */
    boolean: boolean;
    /**
     * @name containerNode
     * @type boolean
     * @required
     */
    containerNode: boolean;
    /**
     * @name double
     * @type boolean
     * @required
     */
    double: boolean;
    /**
     * @name float
     * @type boolean
     * @required
     */
    float: boolean;
    /**
     * @name floatingPointNumber
     * @type boolean
     * @required
     */
    floatingPointNumber: boolean;
    /**
     * @name int
     * @type boolean
     * @required
     */
    int: boolean;
    /**
     * @name integralNumber
     * @type boolean
     * @required
     */
    integralNumber: boolean;
    /**
     * @name long
     * @type boolean
     * @required
     */
    long: boolean;
    /**
     * @name missingNode
     * @type boolean
     * @required
     */
    missingNode: boolean;
    /**
     * @name nodeType
     * @type ("ARRAY"|"BINARY"|"BOOLEAN"|"MISSING"|"NULL"|"NUMBER"|"OBJECT"|"POJO"|"STRING")
     * @required
     */
    nodeType: ("ARRAY"|"BINARY"|"BOOLEAN"|"MISSING"|"NULL"|"NUMBER"|"OBJECT"|"POJO"|"STRING");
    /**
     * @name null
     * @type boolean
     * @required
     */
    null: boolean;
    /**
     * @name number
     * @type boolean
     * @required
     */
    number: boolean;
    /**
     * @name object
     * @type boolean
     * @required
     */
    object: boolean;
    /**
     * @name pojo
     * @type boolean
     * @required
     */
    pojo: boolean;
    /**
     * @name short
     * @type boolean
     * @required
     */
    short: boolean;
    /**
     * @name textual
     * @type boolean
     * @required
     */
    textual: boolean;
    /**
     * @name valueNode
     * @type boolean
     * @required
     */
    valueNode: boolean;
}


/**
 * @name ILibrary
 * @description: Model of Library
 */
export interface ILibrary {
    /**
     * @name community_publishing_permission
     * @type boolean
     * @description Visible only for Administrator with Permission
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name project_name
     * @type string
     * @readonly
     * @required
     */
    project_name: string;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @required
     */
    publish_type: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name type_of_boards
     * @type ITypeOfBoard[]
     * @required
     */
    type_of_boards: ITypeOfBoard[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type ILibraryVersionShortDetail[]
     */
    versions?: ILibraryVersionShortDetail[];
}


/**
 * @name ILibraryCopy
 * @description: Json Model for copy Library
 */
export interface ILibraryCopy {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name library_id
     * @type string
     * @required
     */
    library_id: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    project_id: string;
}


/**
 * @name ILibraryFilter
 * @description: Json Model for getting Library Filter List
 */
export interface ILibraryFilter {
    /**
     * @name pending_library
     * @type boolean
     * @description Designed for Administrators for publishing decisions of Community Codes - Without permission, the value is ignored. 
     */
    pending_library?: boolean;
    /**
     * @name project_id
     * @type string
     */
    project_id?: string;
    /**
     * @name public_library
     * @type boolean
     * @description Show - All Public Programs which are confirmed and approved.
     */
    public_library?: boolean;
}


/**
 * @name ILibraryLibraryVersionPair
 * @description: Json Model for Pari With Short detail of Library and Version of Library
 */
export interface ILibraryLibraryVersionPair {
    /**
     * @name library_short_detail
     * @type ILibraryShortDetail
     * @required
     */
    library_short_detail: ILibraryShortDetail;
    /**
     * @name library_version_short_detail
     * @type ILibraryVersionShortDetail
     * @required
     */
    library_version_short_detail: ILibraryVersionShortDetail;
}


/**
 * @name ILibraryList
 * @description: Individual Library List
 */
export interface ILibraryList {
    /**
     * @name content
     * @type ILibraryShortDetail[]
     * @readonly
     * @required
     */
    content: ILibraryShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ILibraryNew
 * @description: Json Model for new Library
 */
export interface ILibraryNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 8 and 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters, must be unique!
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Project ID only for private libraries. For Public, permission is required. Its Required only for Creating, For update is used previous settings. 
     * @required
     */
    project_id: string;
}


/**
 * @name ILibraryRecord
 * @description: Json Model for Library_Record
 */
export interface ILibraryRecord {
    /**
     * @name content
     * @type string
     * @required
     */
    content: string;
    /**
     * @name file_name
     * @type string
     * @required
     */
    file_name: string;
}


/**
 * @name ILibraryShortDetail
 * @description: Json Model for Library Short Detail
 */
export interface ILibraryShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_boards
     * @type ITypeOfBoardShortDetail[]
     * @readonly
     * @required
     */
    type_of_boards: ITypeOfBoardShortDetail[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ILibraryVersion
 * @description: Json Model for Library_Version
 */
export interface ILibraryVersion {
    /**
     * @name author
     * @type IPersonShortDetail
     * @description Optional value
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name examples
     * @type IExampleShortDetail[]
     * @readonly
     * @required
     */
    examples: IExampleShortDetail[];
    /**
     * @name files
     * @type ILibraryRecord[]
     * @readonly
     * @required
     */
    files: ILibraryRecord[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name ILibraryVersionNew
 * @description: Json Model for new Version of Library
 */
export interface ILibraryVersionNew {
    /**
     * @name files
     * @type ILibraryRecord[]
     */
    files?: ILibraryRecord[];
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ILibraryVersionShortDetail
 * @description: Json Model for Library_Version_Short_Detail
 */
export interface ILibraryVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @description Optional value
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name publish_status
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @readonly
     * @required
     */
    publish_status: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IListOfBoards
 * @description: Json Model with List of Board ID
 */
export interface IListOfBoards {
    /**
     * @name board_pairs
     * @type IConnectedBoardIN[]
     * @description List of Pairs for settings of Backup C_Program Version on boards
     * @required
     */
    board_pairs: IConnectedBoardIN[];
}


/**
 * @name ILogin
 * @description: Json Model for new Basic Login
 */
export interface ILogin {
    /**
     * @name mail
     * @type string
     * @required
     */
    mail: string;
    /**
     * @name password
     * @type string
     * @required
     */
    password: string;
}


/**
 * @name ILoginResult
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginResult {
    /**
     * @name permissions
     * @type string[]
     * @description List of all person permission (private and all collections from Person Roles ("SecurityRole") 
     * @readonly
     * @required
     */
    permissions: string[];
    /**
     * @name person
     * @type IPerson
     * @readonly
     * @required
     */
    person: IPerson;
    /**
     * @name roles
     * @type ISecurityRole[]
     * @description List of roles, that
     * @readonly
     * @required
     */
    roles: ISecurityRole[];
}


/**
 * @name ILoginToken
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginToken {
    /**
     * @name authToken
     * @type string
     * @description X-AUTH-TOKEN - used this token in HTML head for verifying the identities
     * @readonly
     * @required
     */
    authToken: string;
}


/**
 * @name IMProgramInstanceParameter
 * @description: Interface IMProgramInstanceParameter definition
 */
export interface IMProgramInstanceParameter {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name grid_app_url
     * @type string
     * @readonly
     * @required
     */
    grid_app_url: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name m_program_description
     * @type string
     * @readonly
     * @required
     */
    m_program_description: string;
    /**
     * @name m_program_id
     * @type string
     * @readonly
     * @required
     */
    m_program_id: string;
    /**
     * @name m_program_name
     * @type string
     * @readonly
     * @required
     */
    m_program_name: string;
    /**
     * @name snapshot_settings
     * @type ("absolutely_public"|"only_for_project_members"|"not_in_instance")
     * @readonly
     * @required
     */
    snapshot_settings: ("absolutely_public"|"only_for_project_members"|"not_in_instance");
    /**
     * @name version_object_description
     * @type string
     * @readonly
     * @required
     */
    version_object_description: string;
    /**
     * @name version_object_id
     * @type string
     * @readonly
     * @required
     */
    version_object_id: string;
    /**
     * @name version_object_name
     * @type string
     * @readonly
     * @required
     */
    version_object_name: string;
}


/**
 * @name IMProgram
 * @description: Model of M_Program
 */
export interface IMProgram {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time stamp in millis
     * @example 1458315085338
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name m_project_id
     * @type string
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type IMProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    program_versions: IMProgramVersionShortDetail[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IMProgramNew
 * @description: Json Model for new M_Program
 */
export interface IMProgramNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IMProgramShortDetailForBlocko
 * @description: Interface IMProgramShortDetailForBlocko definition
 */
export interface IMProgramShortDetailForBlocko {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name versions
     * @type IMProgramVersionsShortDetailForBlocko[]
     * @readonly
     * @required
     */
    versions: IMProgramVersionsShortDetailForBlocko[];
}


/**
 * @name IMProgramSnapShot
 * @description: Interface IMProgramSnapShot definition
 */
export interface IMProgramSnapShot {
    /**
     * @name m_program_id
     * @type string
     * @required
     */
    m_program_id: string;
    /**
     * @name version_object_id
     * @type string
     * @required
     */
    version_object_id: string;
}


/**
 * @name IMProgramVersion
 * @description: Json Model for Version of M_program
 */
export interface IMProgramVersion {
    /**
     * @name m_code
     * @type string
     * @readonly
     * @required
     */
    m_code: string;
    /**
     * @name public_mode
     * @type boolean
     * @readonly
     * @required
     */
    public_mode: boolean;
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramVersionEdit
 * @description: Json Model for edit Version of M_program
 */
export interface IMProgramVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IMProgramVersionInterface
 * @description: Json Model for Version of M_program
 */
export interface IMProgramVersionInterface {
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramVersionNew
 * @description: Json Model for new Version of M_program
 */
export interface IMProgramVersionNew {
    /**
     * @name m_code
     * @type string
     * @required
     */
    m_code: string;
    /**
     * @name public_mode
     * @type boolean
     * @description if value is true - program can be open throw the QR token (public) by everyone!
     */
    public_mode?: boolean;
    /**
     * @name version_description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
    /**
     * @name virtual_input_output
     * @type string
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramVersionShortDetail
 * @description: Json Model with details of M_Program_Version>
 */
export interface IMProgramVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name community_publishing_permission
     * @type boolean
     * @readonly
     * @required
     */
    community_publishing_permission: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name publish_status
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @readonly
     * @required
     */
    publish_status: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IMProgramVersionsShortDetailForBlocko
 * @description: Interface IMProgramVersionsShortDetailForBlocko definition
 */
export interface IMProgramVersionsShortDetailForBlocko {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramInterface
 * @description: Json Model that contain values with accessible interface of virtual_input_output under M_programs (auto_incrementing == false) or head M_Program.virtual_input_output if auto_incrementing is True
 */
export interface IMProgramInterface {
    /**
     * @name accessible_versions
     * @type IMProgramVersionInterface[]
     * @required
     */
    accessible_versions: IMProgramVersionInterface[];
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
}


/**
 * @name IMProject
 * @description: Model of M_Project
 */
export interface IMProject {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time stamp in millis
     * @example 14618543121234
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @description can be empty
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name m_programs
     * @type ISwaggerMProgramShortDetail[]
     * @required
     */
    m_programs: ISwaggerMProgramShortDetail[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IMProjectNew
 * @description: Json Model for update M_Project
 */
export interface IMProjectNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IMProjectShortDetail
 * @description: Json Model M_Project - only basic information
 */
export interface IMProjectShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name programs
     * @type ISwaggerMProgramShortDetail[]
     * @readonly
     * @required
     */
    programs: ISwaggerMProgramShortDetail[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IMProjectShortDetailForBlocko
 * @description: Interface IMProjectShortDetailForBlocko definition
 */
export interface IMProjectShortDetailForBlocko {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name m_programs
     * @type IMProgramShortDetailForBlocko[]
     * @readonly
     * @required
     */
    m_programs: IMProgramShortDetailForBlocko[];
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IMProjectSnapShot
 * @description: Interface IMProjectSnapShot definition
 */
export interface IMProjectSnapShot {
    /**
     * @name m_program_snapshots
     * @type IMProgramSnapShot[]
     * @description Connected boards
     * @required
     */
    m_program_snapshots: IMProgramSnapShot[];
    /**
     * @name m_project_id
     * @type string
     * @required
     */
    m_project_id: string;
}


/**
 * @name IMProjectSnapShotDetail
 * @description: Model of Snapshot of versions of M_Project Snapshots
 */
export interface IMProjectSnapShotDetail {
    /**
     * @name admin_permission
     * @type boolean
     * @readonly
     * @required
     */
    admin_permission: boolean;
    /**
     * @name m_program_snapshots
     * @type IMProgramInstanceParameter[]
     * @required
     */
    m_program_snapshots: IMProgramInstanceParameter[];
    /**
     * @name m_project_description
     * @type string
     * @readonly
     * @required
     */
    m_project_description: string;
    /**
     * @name m_project_id
     * @type string
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name m_project_name
     * @type string
     * @readonly
     * @required
     */
    m_project_name: string;
    /**
     * @name share_permission
     * @type boolean
     * @readonly
     * @required
     */
    share_permission: boolean;
    /**
     * @name unshare_permission
     * @type boolean
     * @readonly
     * @required
     */
    unshare_permission: boolean;
}


/**
 * @name IMProjectInterface
 * @description: Json Model that contain values with accessible interface of virtual_input_output under M_project (auto_incrementing == false) or head M_project.M_program.virtual_input_output if auto_incrementing is True
 */
export interface IMProjectInterface {
    /**
     * @name accessible_interface
     * @type IMProgramInterface[]
     * @readonly
     * @required
     */
    accessible_interface: IMProgramInterface[];
    /**
     * @name auto_incrementing
     * @type boolean
     * @readonly
     * @required
     */
    auto_incrementing: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name INotFound
 * @description: Requested entity was not found
 */
export interface INotFound {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name INotValidated
 * @description: When account is not validated.
 */
export interface INotValidated {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description message
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name INotification
 * @description: Model of Notification
 */
export interface INotification {
    /**
     * @name buttons
     * @type INotificationButton[]
     * @readonly
     * @required
     */
    buttons: INotificationButton[];
    /**
     * @name confirmation_required
     * @type boolean
     * @required
     */
    confirmation_required: boolean;
    /**
     * @name confirmed
     * @type boolean
     * @required
     */
    confirmed: boolean;
    /**
     * @name created
     * @type number
     * @description UNIX time in ms
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name message_channel
     * @type string
     * @readonly
     * @required
     */
    message_channel: string;
    /**
     * @name message_type
     * @type string
     * @readonly
     * @required
     */
    message_type: string;
    /**
     * @name notification_body
     * @type INotificationElement[]
     * @readonly
     * @required
     */
    notification_body: INotificationElement[];
    /**
     * @name notification_importance
     * @type ("low"|"normal"|"high")
     * @required
     */
    notification_importance: ("low"|"normal"|"high");
    /**
     * @name notification_level
     * @type ("info"|"success"|"warning"|"error")
     * @required
     */
    notification_level: ("info"|"success"|"warning"|"error");
    /**
     * @name notification_type
     * @type ("CHAIN_START"|"CHAIN_UPDATE"|"CHAIN_END"|"INDIVIDUAL")
     * @required
     */
    notification_type: ("CHAIN_START"|"CHAIN_UPDATE"|"CHAIN_END"|"INDIVIDUAL");
    /**
     * @name was_read
     * @type boolean
     * @required
     */
    was_read: boolean;
}


/**
 * @name INotificationButton
 * @description: Json Model for notification buttons
 */
export interface INotificationButton {
    /**
     * @name action
     * @type ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification")
     * @required
     */
    action: ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification");
    /**
     * @name bold
     * @type boolean
     * @required
     */
    bold: boolean;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name italic
     * @type boolean
     * @required
     */
    italic: boolean;
    /**
     * @name payload
     * @type string
     * @required
     */
    payload: string;
    /**
     * @name text
     * @type string
     * @required
     */
    text: string;
    /**
     * @name underline
     * @type boolean
     * @required
     */
    underline: boolean;
}


/**
 * @name INotificationConfirm
 * @description: Json Model for confirming notification
 */
export interface INotificationConfirm {
    /**
     * @name action
     * @type ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification")
     * @description Notification_action
     * @required
     */
    action: ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification");
    /**
     * @name payload
     * @type string
     * @description Notification payload
     * @required
     */
    payload: string;
}


/**
 * @name INotificationElement
 * @description: Json Model for notification body elements
 */
export interface INotificationElement {
    /**
     * @name bold
     * @type boolean
     * @required
     */
    bold: boolean;
    /**
     * @name button
     * @type boolean
     * @required
     */
    button: boolean;
    /**
     * @name color
     * @type string
     */
    color?: string;
    /**
     * @name date
     * @type string
     * @format date-time
     */
    date?: string;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name italic
     * @type boolean
     * @required
     */
    italic: boolean;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name program_id
     * @type string
     */
    program_id?: string;
    /**
     * @name project_id
     * @type string
     */
    project_id?: string;
    /**
     * @name text
     * @type string
     */
    text?: string;
    /**
     * @name type
     * @type ("link"|"object"|"text"|"date"|"newLine")
     * @required
     */
    type: ("link"|"object"|"text"|"date"|"newLine");
    /**
     * @name underline
     * @type boolean
     * @required
     */
    underline: boolean;
    /**
     * @name url
     * @type string
     */
    url?: string;
}


/**
 * @name INotificationList
 * @description: Individual Notification List
 */
export interface INotificationList {
    /**
     * @name content
     * @type INotification[]
     * @readonly
     * @required
     */
    content: INotification[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
    /**
     * @name unread_total
     * @type number
     * @description Total unread subjects
     * @format int32
     * @readonly
     * @required
     */
    unread_total: number;
}


/**
 * @name INotificationRead
 * @description: Json Model for List with ids of read notifications
 */
export interface INotificationRead {
    /**
     * @name notification_id
     * @type string[]
     * @description List of notification.id
     * @required
     */
    notification_id: string[];
}


/**
 * @name IPair
 * @description: Interface IPair definition
 */
export interface IPair {
    /**
     * @name json_identifier
     * @type string
     * @readonly
     * @required
     */
    json_identifier: string;
    /**
     * @name user_description
     * @type string
     * @readonly
     * @required
     */
    user_description: string;
}


/**
 * @name IPaymentDetailsNew
 * @description: Json Model with List of Board ID
 */
export interface IPaymentDetailsNew {
    /**
     * @name city
     * @type string
     * @description Required: alwaysThe city must have at least 4 characters
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     * @description Required: only if user want have business account
     */
    company_account?: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_name
     * @type string
     * @description Required: only if company_account = trueThe company_name must have at least 4 characters
     */
    company_name?: string;
    /**
     * @name company_registration_no
     * @type string
     * @description Required: only if company_account = trueThe company_registration_no must have at least 4 characters
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Required: only if company_account = true And VAT_number is required only for EU Customers.The VAT_number must have at least 4 characters
     * @example CZ12345678
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if company_account = trueThe company_web url must be valid 
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Required: alwaysThe country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name invoice_email
     * @type string
     * @description Required: always. Email must be valid
     * @required
     */
    invoice_email: string;
    /**
     * @name method
     * @type ("bank_transfer"|"credit_card"|"free")
     * @description Payment method.
     * @required
     */
    method: ("bank_transfer"|"credit_card"|"free");
    /**
     * @name street
     * @type string
     * @description Required: alwaysThe street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: alwaysBut The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name zip_code
     * @type string
     * @description Required: alwaysThe zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name IPaymentDetails
 * @description: Model of Payment_Details
 */
export interface IPaymentDetails {
    /**
     * @name bank_account
     * @type string
     * @description Used for billing and invoices
     */
    bank_account?: string;
    /**
     * @name city
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     * @required
     */
    company_account: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_phone?: string;
    /**
     * @name company_name
     * @type string
     * @description Only if Product is for business
     */
    company_name?: string;
    /**
     * @name company_registration_no
     * @type string
     * @description Only if Product is for business
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Only if Product is for business
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     * @description Only if Product is for business
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    country: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name full_name
     * @type string
     * @description Used for billing and invoices
     */
    full_name?: string;
    /**
     * @name id
     * @type number
     * @format int64
     * @required
     */
    id: number;
    /**
     * @name invoice_email
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    invoice_email: string;
    /**
     * @name street
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street_number: string;
    /**
     * @name zip_code
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    zip_code: string;
}


/**
 * @name IPermission
 * @description: Model of Permission
 */
export interface IPermission {
    /**
     * @name description
     * @type string
     * @description Description for "(static key)"
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name edit_person_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_person_permission: boolean;
    /**
     * @name permission_key
     * @type string
     * @description Permission key - "(static key)"
     * @readonly
     * @required
     */
    permission_key: string;
}


/**
 * @name IPermissionEdit
 * @description: Json Model for change description for Permission
 */
export interface IPermissionEdit {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
}


/**
 * @name IPersistenceContext
 * @description: Interface IPersistenceContext definition
 */
export interface IPersistenceContext {
}


/**
 * @name IPerson
 * @description: Model of Person
 */
export interface IPerson {
    /**
     * @name country
     * @type string
     * @required
     */
    country: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name full_name
     * @type string
     * @required
     */
    full_name: string;
    /**
     * @name gender
     * @type string
     * @required
     */
    gender: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name mail
     * @type string
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @required
     */
    nick_name: string;
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
}


/**
 * @name IPersonAuthentication
 * @description: Json Model for resending authentication email.
 */
export interface IPersonAuthentication {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
}


/**
 * @name IPersonChangeProperty
 * @description: Json Model for changing Person property
 */
export interface IPersonChangeProperty {
    /**
     * @name email
     * @type string
     * @description Valid mail 
     */
    email?: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     */
    password?: string;
    /**
     * @name property
     * @type string
     * @description Required property ('password' or 'email')
     * @required
     */
    property: string;
}


/**
 * @name IPersonMiddleDetail
 * @description: Json Model for Person_Short_Detail
 */
export interface IPersonMiddleDetail {
    /**
     * @name full_name
     * @type string
     * @readonly
     * @required
     */
    full_name: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name mail
     * @type string
     * @readonly
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @readonly
     * @required
     */
    nick_name: string;
}


/**
 * @name IPersonNew
 * @description: Json Model for creating new Person
 */
export interface IPersonNew {
    /**
     * @name full_name
     * @type string
     * @description The full_name is not required. Max lenght is 60 characters.
     * @required
     */
    full_name: string;
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
}


/**
 * @name IPersonPasswordNew
 * @description: Json Model for recovering person password
 */
export interface IPersonPasswordNew {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
    /**
     * @name password_recovery_token
     * @type string
     * @description Required password_recovery_token
     * @required
     */
    password_recovery_token: string;
}


/**
 * @name IPersonPasswordRecoveryEmail
 * @description: Json Model for sending password recovery email
 */
export interface IPersonPasswordRecoveryEmail {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
}


/**
 * @name IPersonShortDetail
 * @description: Json Model for Person_Short_Detail
 */
export interface IPersonShortDetail {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name mail
     * @type string
     * @readonly
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @readonly
     * @required
     */
    nick_name: string;
}


/**
 * @name IPersonUpdate
 * @description: Json Model for update Person. (For password or email, you have to used separate API)
 */
export interface IPersonUpdate {
    /**
     * @name country
     * @type string
     * @description Where does the user come from.
     */
    country?: string;
    /**
     * @name full_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     */
    full_name?: string;
    /**
     * @name gender
     * @type ("male"|"female")
     * @description Gender of the user.
     */
    gender?: ("male"|"female");
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
}


/**
 * @name IPrinter
 * @description: Interface IPrinter definition
 */
export interface IPrinter {
    /**
     * @name computer
     * @type IComputer
     * @required
     */
    computer: IComputer;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type number
     * @format int32
     * @required
     */
    id: number;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name state
     * @type string
     * @required
     */
    state: string;
}


/**
 * @name IProcessor
 * @description: Model of Processor
 */
export interface IProcessor {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name processor_code
     * @type string
     * @required
     */
    processor_code: string;
    /**
     * @name processor_name
     * @type string
     * @required
     */
    processor_name: string;
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
}


/**
 * @name IProcessorNew
 * @description: Json Model for new Processor
 */
export interface IProcessorNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name processor_code
     * @type string
     * @description The Processor Code must have at least 4 characters
     * @required
     */
    processor_code: string;
    /**
     * @name processor_name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    processor_name: string;
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
}


/**
 * @name IProducer
 * @description: Model of Producer
 */
export interface IProducer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
}


/**
 * @name IProducerNew
 * @description: Json Model for new Producer od edit Producer
 */
export interface IProducerNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 8 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters, must be unique!
     * @required
     */
    name: string;
}


/**
 * @name IProduct
 * @description: Model of Product
 */
export interface IProduct {
    /**
     * @name act_deactivate_permission
     * @type boolean
     * @readonly
     * @required
     */
    act_deactivate_permission: boolean;
    /**
     * @name active
     * @type boolean
     * @required
     */
    active: boolean;
    /**
     * @name client_billing
     * @type boolean
     * @required
     */
    client_billing: boolean;
    /**
     * @name created
     * @type string
     * @format date-time
     * @required
     */
    created: string;
    /**
     * @name customer
     * @type ICustomer
     * @required
     */
    customer: ICustomer;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name extensions
     * @type IProductExtension[]
     * @required
     */
    extensions: IProductExtension[];
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name invoices
     * @type IInvoice[]
     * @required
     */
    invoices: IInvoice[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name payment_details
     * @type IPaymentDetails
     * @required
     */
    payment_details: IPaymentDetails;
    /**
     * @name payment_method
     * @type string
     * @readonly
     * @required
     */
    payment_method: string;
    /**
     * @name remaining_credit
     * @type number
     * @format double
     * @readonly
     * @required
     */
    remaining_credit: number;
    /**
     * @name subscription_id
     * @type string
     * @required
     */
    subscription_id: string;
}


/**
 * @name IProductExtension
 * @description: Model of ProductExtension
 */
export interface IProductExtension {
    /**
     * @name act_deactivate_permission
     * @type boolean
     * @readonly
     * @required
     */
    act_deactivate_permission: boolean;
    /**
     * @name active
     * @type boolean
     * @required
     */
    active: boolean;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name config
     * @type string
     * @description only with edit permission
     * @readonly
     * @required
     */
    config: string;
    /**
     * @name created
     * @type string
     * @format date-time
     * @required
     */
    created: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name include
     * @type boolean
     * @description Only for Administration used
     * @readonly
     * @required
     */
    include: boolean;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name order_position
     * @type number
     * @format int32
     * @required
     */
    order_position: number;
    /**
     * @name price
     * @type number
     * @format double
     * @readonly
     * @required
     */
    price: number;
    /**
     * @name type
     * @type ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant")
     * @required
     */
    type: ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant");
}


/**
 * @name IProductExtensionEdit
 * @description: Json Model for updating extension of product.
 */
export interface IProductExtensionEdit {
    /**
     * @name color
     * @type string
     * @description Color
     */
    color?: string;
    /**
     * @name description
     * @type string
     * @description Description must not have more than 255 characters
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Name of extension
     */
    name?: string;
}


/**
 * @name IProductExtensionNew
 * @description: Json Model for creating new extension of product.
 */
export interface IProductExtensionNew {
    /**
     * @name color
     * @type string
     * @description Color of extension
     * @required
     */
    color: string;
    /**
     * @name config
     * @type string
     * @required
     */
    config: string;
    /**
     * @name description
     * @type string
     * @description Description must not have more than 255 characters
     */
    description?: string;
    /**
     * @name extension_type
     * @type string
     * @description Enumerated type of extension
     * @required
     */
    extension_type: string;
    /**
     * @name name
     * @type string
     * @description Name of extension
     * @required
     */
    name: string;
}


/**
 * @name IProductExtensionType
 * @description: Json Model for ProductExtension_Type
 */
export interface IProductExtensionType {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type
     * @type string
     * @readonly
     * @required
     */
    type: string;
}


/**
 * @name IProductCredit
 * @description: Json Model for buying credit for Product
 */
export interface IProductCredit {
    /**
     * @name credit
     * @type number
     * @description Double number - amount of credit to be bought.
     * @format double
     * @required
     */
    credit: number;
}


/**
 * @name IProductEdit
 * @description: Json Model for Product Edit
 */
export interface IProductEdit {
    /**
     * @name name
     * @type string
     * @description Required: always. The name length must be between 4 and 60 characters
     * @required
     */
    name: string;
}


/**
 * @name IProductNew
 * @description: Json Model if user wants to create new Product for projects
 */
export interface IProductNew {
    /**
     * @name city
     * @type string
     * @description The city must have at least 2 characters
     */
    city?: string;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if account is businessThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if account is businessThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_name
     * @type string
     * @description The company_name must have at least 2 characters
     */
    company_name?: string;
    /**
     * @name company_registration_no
     * @type string
     * @description Required: only if account is businessThe registration_no must have at least 3 characters - FOR non-EU countriesfor Business account is required registration_no OR vat_number
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Required: only if account is business & from EU!!! CZ28496639 The vat_number must have at least 3 charactersfor Business account is required registration_no OR vat_number
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if account is businessThe company_web must have at least 4 characters
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description The country must have at least 2 characters
     */
    country?: string;
    /**
     * @name customer_id
     * @type string
     * @description If null new customer is created. Customer can be company or single person.
     */
    customer_id?: string;
    /**
     * @name extension_ids
     * @type string[]
     * @description List of Ids of Extensions
     */
    extension_ids?: string[];
    /**
     * @name full_name
     * @type string
     */
    full_name?: string;
    /**
     * @name integrator_registration
     * @type boolean
     * @description If product is for someone else and you are an integrator.
     */
    integrator_registration?: boolean;
    /**
     * @name invoice_email
     * @type string
     * @description Required: always, Email must be valid
     */
    invoice_email?: string;
    /**
     * @name name
     * @type string
     * @description The name length must be between 4 and 60 characters
     * @required
     */
    name: string;
    /**
     * @name payment_method
     * @type ("bank_transfer"|"credit_card"|"free")
     * @description Allowable values =>[bank_transfer, credit_card], default: credit_card
     */
    payment_method?: ("bank_transfer"|"credit_card"|"free");
    /**
     * @name street
     * @type string
     * @description The street must have at least 4 characters
     */
    street?: string;
    /**
     * @name street_number
     * @type string
     */
    street_number?: string;
    /**
     * @name tariff_id
     * @type string
     * @description Id of a selected tariff.
     * @required
     */
    tariff_id: string;
    /**
     * @name zip_code
     * @type string
     * @description The zip_code must have at least 3 characters
     */
    zip_code?: string;
}


/**
 * @name IProject
 * @description: Model of Project
 */
export interface IProject {
    /**
     * @name active
     * @type boolean
     * @readonly
     * @required
     */
    active: boolean;
    /**
     * @name admin_permission
     * @type boolean
     * @readonly
     * @required
     */
    admin_permission: boolean;
    /**
     * @name b_programs
     * @type IBProgramShortDetail[]
     * @required
     */
    b_programs: IBProgramShortDetail[];
    /**
     * @name boards
     * @type IBoardShortDetail[]
     * @required
     */
    boards: IBoardShortDetail[];
    /**
     * @name c_programs
     * @type ICProgramShortDetail[]
     * @required
     */
    c_programs: ICProgramShortDetail[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name instancies
     * @type IInstanceShortDetail[]
     * @readonly
     * @required
     */
    instancies: IInstanceShortDetail[];
    /**
     * @name libraries
     * @type ILibraryShortDetail[]
     * @required
     */
    libraries: ILibraryShortDetail[];
    /**
     * @name m_projects
     * @type IMProjectShortDetail[]
     * @required
     */
    m_projects: IMProjectShortDetail[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name participants
     * @type IProjectParticipant[]
     * @required
     */
    participants: IProjectParticipant[];
    /**
     * @name product_id
     * @type string
     * @readonly
     * @required
     */
    product_id: string;
    /**
     * @name product_name
     * @type string
     * @readonly
     * @required
     */
    product_name: string;
    /**
     * @name share_permission
     * @type boolean
     * @readonly
     * @required
     */
    share_permission: boolean;
    /**
     * @name type_of_blocks
     * @type ITypeOfBlockShortDetail[]
     * @required
     */
    type_of_blocks: ITypeOfBlockShortDetail[];
    /**
     * @name type_of_widgets
     * @type ITypeOfWidgetShortDetail[]
     * @required
     */
    type_of_widgets: ITypeOfWidgetShortDetail[];
    /**
     * @name unshare_permission
     * @type boolean
     * @readonly
     * @required
     */
    unshare_permission: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IProjectEdit
 * @description: Json Model for Edit Project
 */
export interface IProjectEdit {
    /**
     * @name project_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    project_description: string;
    /**
     * @name project_name
     * @type string
     * @description Length must be between 8 and 60 characters, must be unique!
     * @required
     */
    project_name: string;
}


/**
 * @name IProjectNew
 * @description: Json Model for new General Project
 */
export interface IProjectNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters, must be unique!
     * @required
     */
    name: string;
    /**
     * @name product_id
     * @type string
     * @description Id of Product (Tariff) where the project will be registered
     * @required
     */
    product_id: string;
}


/**
 * @name IProjectParticipantStatus
 * @description: Json Model for changing Project_participant status
 */
export interface IProjectParticipantStatus {
    /**
     * @name person_id
     * @type string
     * @description Participant id
     * @required
     */
    person_id: string;
    /**
     * @name state
     * @type ("admin"|"member")
     * @description Status
     * @required
     */
    state: ("admin"|"member");
}


/**
 * @name IProjectShortDetail
 * @description: Json Model for specific Project DashBoard 
 */
export interface IProjectShortDetail {
    /**
     * @name active_status
     * @type boolean
     * @readonly
     * @required
     */
    active_status: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name product_id
     * @type string
     * @readonly
     * @required
     */
    product_id: string;
    /**
     * @name product_name
     * @type string
     * @readonly
     * @required
     */
    product_name: string;
    /**
     * @name project_description
     * @type string
     * @readonly
     * @required
     */
    project_description: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name project_name
     * @type string
     * @readonly
     * @required
     */
    project_name: string;
}


/**
 * @name IProjectParticipant
 * @description: Model of Project_participant
 */
export interface IProjectParticipant {
    /**
     * @name full_name
     * @type string
     * @readonly
     * @required
     */
    full_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name mail
     * @type string
     * @readonly
     * @required
     */
    mail: string;
    /**
     * @name state
     * @type ("owner"|"admin"|"member"|"invited")
     * @required
     */
    state: ("owner"|"admin"|"member"|"invited");
}


/**
 * @name IReportAdminDashboard
 * @description: Interface IReportAdminDashboard definition
 */
export interface IReportAdminDashboard {
    /**
     * @name board_registered
     * @type number
     * @format int32
     * @required
     */
    board_registered: number;
    /**
     * @name bugs_reported
     * @type number
     * @format int32
     * @required
     */
    bugs_reported: number;
    /**
     * @name compilation_server_public_created
     * @type number
     * @format int32
     * @required
     */
    compilation_server_public_created: number;
    /**
     * @name compilation_server_public_online
     * @type number
     * @format int32
     * @required
     */
    compilation_server_public_online: number;
    /**
     * @name homer_server_private_created
     * @type number
     * @format int32
     * @required
     */
    homer_server_private_created: number;
    /**
     * @name homer_server_private_online
     * @type number
     * @format int32
     * @required
     */
    homer_server_private_online: number;
    /**
     * @name homer_server_public_created
     * @type number
     * @format int32
     * @required
     */
    homer_server_public_created: number;
    /**
     * @name homer_server_public_online
     * @type number
     * @format int32
     * @required
     */
    homer_server_public_online: number;
    /**
     * @name person_registration
     * @type number
     * @format int32
     * @required
     */
    person_registration: number;
    /**
     * @name project_created
     * @type number
     * @format int32
     * @required
     */
    project_created: number;
}


/**
 * @name IResendEmail
 * @description: Json Model for change description for Permission
 */
export interface IResendEmail {
    /**
     * @name mail
     * @type string
     * @description Email is optional value! If it is empty, default invoice email will be used.
     */
    mail?: string;
}


/**
 * @name IResult
 * @description: Interface IResult definition
 */
export interface IResult {
}


/**
 * @name IResultOk
 * @description: Interface IResultOk definition
 */
export interface IResultOk {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User. Server fills the message only when it is important.
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IResultBadRequest
 * @description: When is something wrong
 */
export interface IResultBadRequest {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IRoleAddPermission
 * @description: Json Model for add list of Permission to Role
 */
export interface IRoleAddPermission {
    /**
     * @name permissions
     * @type string[]
     * @description List of permission keys
     * @required
     */
    permissions: string[];
}


/**
 * @name IRoleEdit
 * @description: Json Model for change description for Permission
 */
export interface IRoleEdit {
    /**
     * @name description
     * @type string
     * @description description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IRoleShortDetai
 * @description: Json Model for change description for Group Role Permission
 */
export interface IRoleShortDetai {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ISecurityRole
 * @description: Model of SecurityRole
 */
export interface ISecurityRole {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name person_permissions
     * @type IPermission[]
     * @required
     */
    person_permissions: IPermission[];
    /**
     * @name persons
     * @type IPersonMiddleDetail[]
     * @required
     */
    persons: IPersonMiddleDetail[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ISecurityRoleNew
 * @description: Json Model for new SecurityRole (Group)
 */
export interface ISecurityRoleNew {
    /**
     * @name description
     * @type string
     * @description Not required, But strongly recommended, Maximum length is 255 characters
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IServerOffline
 * @description: External servers (compilation, blocko cloud_blocko_server etc.) are offline
 */
export interface IServerOffline {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IServerError
 * @description: Model of ServerError
 */
export interface IServerError {
    /**
     * @name cause_message
     * @type string
     * @required
     */
    cause_message: string;
    /**
     * @name cause_stack_trace
     * @type string
     * @required
     */
    cause_stack_trace: string;
    /**
     * @name cause_type
     * @type string
     * @required
     */
    cause_type: string;
    /**
     * @name created
     * @type string
     * @format date-time
     * @required
     */
    created: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name message
     * @type string
     * @required
     */
    message: string;
    /**
     * @name person
     * @type string
     * @required
     */
    person: string;
    /**
     * @name repetition
     * @type number
     * @format int64
     * @required
     */
    repetition: number;
    /**
     * @name request
     * @type string
     * @required
     */
    request: string;
    /**
     * @name stack_trace
     * @type string
     * @required
     */
    stack_trace: string;
    /**
     * @name summary
     * @type string
     * @required
     */
    summary: string;
    /**
     * @name type
     * @type string
     * @required
     */
    type: string;
    /**
     * @name tyrion
     * @type string
     * @required
     */
    tyrion: string;
    /**
     * @name youtrack_url
     * @type string
     * @required
     */
    youtrack_url: string;
}


/**
 * @name IServerUpdate
 * @description: Json Model for scheduling server update.
 */
export interface IServerUpdate {
    /**
     * @name update_time
     * @type number
     * @description UNIX time in millis
     * @example 1466163478925
     * @format int32
     * @required
     */
    update_time: number;
    /**
     * @name version
     * @type string
     * @required
     */
    version: string;
}


/**
 * @name IServerUpdates
 * @description: Json Model with available server updates
 */
export interface IServerUpdates {
    /**
     * @name current
     * @type string
     * @required
     */
    current: string;
    /**
     * @name releases
     * @type IGitHubReleases[]
     * @required
     */
    releases: IGitHubReleases[];
}


/**
 * @name ISocialNetworkLogin
 * @description: Json Model for logi via Facebook, Github etc.
 */
export interface ISocialNetworkLogin {
    /**
     * @name redirect_url
     * @type string
     * @required
     */
    redirect_url: string;
}


/**
 * @name ISocialLogin
 * @description: Json Model for new Basic Login throw the social networks
 */
export interface ISocialLogin {
    /**
     * @name authToken
     * @type string
     * @description token, that you have to used in HTML head for verifying the identities
     * @readonly
     * @required
     */
    authToken: string;
    /**
     * @name redirect_url
     * @type string
     * @description URL that you have to redirect user
     * @readonly
     * @required
     */
    redirect_url: string;
    /**
     * @name type
     * @type ("Facebook"|"GitHub")
     * @readonly
     * @required
     */
    type: ("Facebook"|"GitHub");
}


/**
 * @name ISwaggerActualizationProcedureTaskFilter
 * @description: Json Model for ActualizationProcedureTask Filter
 */
export interface ISwaggerActualizationProcedureTaskFilter {
    /**
     * @name actualization_procedure_ids
     * @type string[]
     * @readonly
     * @required
     */
    actualization_procedure_ids: string[];
    /**
     * @name board_ids
     * @type string[]
     * @readonly
     * @required
     */
    board_ids: string[];
    /**
     * @name instance_ids
     * @type string[]
     * @readonly
     * @required
     */
    instance_ids: string[];
    /**
     * @name type_of_updates
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")[]
     * @readonly
     * @required
     */
    type_of_updates: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_RELEASE_MANAGER"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")[];
    /**
     * @name update_states
     * @type ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"not_updated"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"homer_server_never_connected"|"critical_error")[]
     * @readonly
     * @required
     */
    update_states: ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"not_updated"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"homer_server_never_connected"|"critical_error")[];
    /**
     * @name update_status
     * @type ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet")[]
     * @readonly
     * @required
     */
    update_status: ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet")[];
}


/**
 * @name ISwaggerGridWidgetVersionGridAppSource
 * @description: Interface ISwaggerGridWidgetVersionGridAppSource definition
 */
export interface ISwaggerGridWidgetVersionGridAppSource {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @readonly
     * @required
     */
    logic_json: string;
}


/**
 * @name ISwaggerMProgramShortDetail
 * @description: Interface ISwaggerMProgramShortDetail definition
 */
export interface ISwaggerMProgramShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     */
    delete_permission?: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     */
    edit_permission?: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name ISystemAccess
 * @description: Json Model for System Access>
 */
export interface ISystemAccess {
    /**
     * @name permissions
     * @type IPermission[]
     * @readonly
     * @required
     */
    permissions: IPermission[];
    /**
     * @name roles
     * @type ISecurityRole[]
     * @readonly
     * @required
     */
    roles: ISecurityRole[];
}


/**
 * @name ITariff
 * @description: Model of Tariff
 */
export interface ITariff {
    /**
     * @name active
     * @type boolean
     * @required
     */
    active: boolean;
    /**
     * @name awesome_icon
     * @type string
     * @required
     */
    awesome_icon: string;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name company_details_required
     * @type boolean
     * @required
     */
    company_details_required: boolean;
    /**
     * @name credit_for_beginning
     * @type number
     * @format int64
     */
    credit_for_beginning?: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name extensions_included
     * @type IProductExtension[]
     */
    extensions_included?: IProductExtension[];
    /**
     * @name extensions_optional
     * @type IProductExtension[]
     */
    extensions_optional?: IProductExtension[];
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name identifier
     * @type string
     * @required
     */
    identifier: string;
    /**
     * @name labels
     * @type ITariffLabel[]
     * @readonly
     * @required
     */
    labels: ITariffLabel[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name order_position
     * @type number
     * @format int32
     * @required
     */
    order_position: number;
    /**
     * @name payment_details_required
     * @type boolean
     * @required
     */
    payment_details_required: boolean;
    /**
     * @name payment_method_required
     * @type boolean
     * @required
     */
    payment_method_required: boolean;
    /**
     * @name payment_methods
     * @type IPair[]
     * @readonly
     * @required
     */
    payment_methods: IPair[];
    /**
     * @name price
     * @type number
     * @format double
     * @readonly
     * @required
     */
    price: number;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITariffExtensionEdit
 * @description: Json Model for updating extension of product.
 */
export interface ITariffExtensionEdit {
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name config
     * @type string
     * @description Json in String
     * @required
     */
    config: string;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name included
     * @type boolean
     * @required
     */
    included: boolean;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
}


/**
 * @name ITariffExtensionNew
 * @description: Json Model for updating extension of product.
 */
export interface ITariffExtensionNew {
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name config
     * @type string
     * @description Json in String
     * @required
     */
    config: string;
    /**
     * @name description
     * @type string
     * @description The name must not have more than 60 characters and minimal length is 4
     * @required
     */
    description: string;
    /**
     * @name extension_type
     * @type string
     * @description Enumerated type of extension
     * @required
     */
    extension_type: string;
    /**
     * @name included
     * @type boolean
     * @required
     */
    included: boolean;
    /**
     * @name name
     * @type string
     * @description The name must not have more than 60 characters and minimal length is 4
     * @required
     */
    name: string;
}


/**
 * @name ITariffLabel
 * @description: Json Model for getting Type_Of_Block Filter List
 */
export interface ITariffLabel {
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name icon
     * @type string
     * @required
     */
    icon: string;
}


/**
 * @name ITariffNew
 * @description: Json Model for creating new tariff.
 */
export interface ITariffNew {
    /**
     * @name awesome_icon
     * @type string
     * @required
     */
    awesome_icon: string;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name company_details_required
     * @type boolean
     * @required
     */
    company_details_required: boolean;
    /**
     * @name credit_for_beginning
     * @type number
     * @format double
     * @required
     */
    credit_for_beginning: number;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name identifier
     * @type string
     * @required
     */
    identifier: string;
    /**
     * @name labels
     * @type ITariffLabel[]
     * @required
     */
    labels: ITariffLabel[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name payment_details_required
     * @type boolean
     * @required
     */
    payment_details_required: boolean;
    /**
     * @name payment_method_required
     * @type boolean
     * @required
     */
    payment_method_required: boolean;
}


/**
 * @name ITerminalConnectionSummary
 * @description: Interface ITerminalConnectionSummary definition
 */
export interface ITerminalConnectionSummary {
    /**
     * @name grid_app_url
     * @type string
     * @description WS address -> replaces token in URL by verified token from the other APIs if its required by query
     * @readonly
     * @required
     */
    grid_app_url: string;
    /**
     * @name instance_id
     * @type string
     * @description Generated Token used for public programs, use as standard verification token
     * @readonly
     * @required
     */
    instance_id: string;
    /**
     * @name m_program
     * @type string
     * @description M Program code in String
     * @readonly
     * @required
     */
    m_program: string;
    /**
     * @name m_program_id
     * @type string
     * @description M Program code in String
     * @readonly
     * @required
     */
    m_program_id: string;
    /**
     * @name m_program_version_id
     * @type string
     * @description M Program code in String
     * @readonly
     * @required
     */
    m_program_version_id: string;
    /**
     * @name m_project_id
     * @type string
     * @description M Program code in String
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name source_code_list
     * @type ISwaggerGridWidgetVersionGridAppSource[]
     * @description Generated Token used for public programs, use as standard verification token
     * @readonly
     * @required
     */
    source_code_list: ISwaggerGridWidgetVersionGridAppSource[];
}


/**
 * @name ITypeOfBlock
 * @description: Model of TypeOfBlock
 */
export interface ITypeOfBlock {
    /**
     * @name blocko_blocks
     * @type IBlockoBlockShortDetail[]
     */
    blocko_blocks?: IBlockoBlockShortDetail[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description This value will be in Json only if TypeOfBlock is private!
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @required
     */
    publish_type: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBlockNew
 * @description: Json Model for new TypeOfBlock
 */
export interface ITypeOfBlockNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description If you want make private TypeOfBlock group. You have to have "project_id" parameter in Json., Value can be null or contains project_id
     */
    project_id?: string;
}


/**
 * @name ITypeOfBlockShortDetail
 * @description: TypeOfBlock details Json model (only few properties)
 */
export interface ITypeOfBlockShortDetail {
    /**
     * @name active
     * @type boolean
     * @description Visible only for administrator with permission
     * @readonly
     * @required
     */
    active: boolean;
    /**
     * @name blocko_blocks
     * @type IBlockoBlockShortDetail[]
     * @readonly
     * @required
     */
    blocko_blocks: IBlockoBlockShortDetail[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name order_position
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    order_position: number;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @readonly
     * @required
     */
    publish_type: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBoard
 * @description: Model of TypeOfBoard
 */
export interface ITypeOfBoard {
    /**
     * @name batchs
     * @type ITypeOfBoardBatch[]
     * @description accessible only for persons with permissions
     */
    batchs?: ITypeOfBoardBatch[];
    /**
     * @name boot_loaders
     * @type IBootLoader[]
     * @description accessible only for persons with permissions
     */
    boot_loaders?: IBootLoader[];
    /**
     * @name bootloader_edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    bootloader_edit_permission: boolean;
    /**
     * @name compiler_target_name
     * @type string
     * @required
     */
    compiler_target_name: string;
    /**
     * @name connectible_to_internet
     * @type boolean
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name default_c_program_edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    default_c_program_edit_permission: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name main_boot_loader
     * @type IBootLoader
     */
    main_boot_loader?: IBootLoader;
    /**
     * @name main_c_program
     * @type ICProgram
     */
    main_c_program?: ICProgram;
    /**
     * @name main_test_c_program
     * @type ICProgram
     * @description accessible only for persons with permissions
     * @readonly
     * @required
     */
    main_test_c_program: ICProgram;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
    /**
     * @name processor_id
     * @type string
     * @readonly
     * @required
     */
    processor_id: string;
    /**
     * @name processor_name
     * @type string
     * @readonly
     * @required
     */
    processor_name: string;
    /**
     * @name producer_id
     * @type string
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name register_new_device_permission
     * @type boolean
     * @readonly
     * @required
     */
    register_new_device_permission: boolean;
    /**
     * @name supported_libraries
     * @type ICompilationLibrary[]
     * @readonly
     * @required
     */
    supported_libraries: ICompilationLibrary[];
    /**
     * @name test_c_program_edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    test_c_program_edit_permission: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBoardBatch
 * @description: Model of Production Batch  
 */
export interface ITypeOfBoardBatch {
    /**
     * @name assembly_manufacture_id
     * @type string
     * @required
     */
    assembly_manufacture_id: string;
    /**
     * @name assembly_manufacture_name
     * @type string
     * @required
     */
    assembly_manufacture_name: string;
    /**
     * @name customer_company_made_description
     * @type string
     * @required
     */
    customer_company_made_description: string;
    /**
     * @name customer_company_name
     * @type string
     * @required
     */
    customer_company_name: string;
    /**
     * @name customer_product_name
     * @type string
     * @required
     */
    customer_product_name: string;
    /**
     * @name date_of_assembly
     * @type string
     * @required
     */
    date_of_assembly: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name ean_number
     * @type number
     * @format int64
     * @required
     */
    ean_number: number;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name latest_used_mac_address
     * @type number
     * @format int64
     */
    latest_used_mac_address?: number;
    /**
     * @name mac_address_end
     * @type number
     * @format int64
     * @required
     */
    mac_address_end: number;
    /**
     * @name mac_address_start
     * @type number
     * @format int64
     * @required
     */
    mac_address_start: number;
    /**
     * @name pcb_manufacture_id
     * @type string
     * @required
     */
    pcb_manufacture_id: string;
    /**
     * @name pcb_manufacture_name
     * @type string
     * @required
     */
    pcb_manufacture_name: string;
    /**
     * @name production_batch
     * @type string
     * @required
     */
    production_batch: string;
    /**
     * @name revision
     * @type string
     * @required
     */
    revision: string;
}


/**
 * @name ITypeOfBoardBatchNew
 * @description: Json Model for new TypeOfBoard Batch
 */
export interface ITypeOfBoardBatchNew {
    /**
     * @name assembly_manufacture_id
     * @type string
     * @required
     */
    assembly_manufacture_id: string;
    /**
     * @name assembly_manufacture_name
     * @type string
     * @required
     */
    assembly_manufacture_name: string;
    /**
     * @name customer_company_made_description
     * @type string
     * @required
     */
    customer_company_made_description: string;
    /**
     * @name customer_company_name
     * @type string
     * @required
     */
    customer_company_name: string;
    /**
     * @name customer_product_name
     * @type string
     * @required
     */
    customer_product_name: string;
    /**
     * @name date_of_assembly
     * @type string
     * @required
     */
    date_of_assembly: string;
    /**
     * @name description
     * @type string
     */
    description?: string;
    /**
     * @name ean_number
     * @type number
     * @format int64
     * @required
     */
    ean_number: number;
    /**
     * @name mac_address_end
     * @type number
     * @format int64
     * @required
     */
    mac_address_end: number;
    /**
     * @name mac_address_start
     * @type number
     * @format int64
     * @required
     */
    mac_address_start: number;
    /**
     * @name pcb_manufacture_id
     * @type string
     * @required
     */
    pcb_manufacture_id: string;
    /**
     * @name pcb_manufacture_name
     * @type string
     * @required
     */
    pcb_manufacture_name: string;
    /**
     * @name production_batch
     * @type string
     * @required
     */
    production_batch: string;
    /**
     * @name revision
     * @type string
     * @required
     */
    revision: string;
}


/**
 * @name ITypeOfBoardNew
 * @description: Json Model for new TypeOfBoard
 */
export interface ITypeOfBoardNew {
    /**
     * @name compiler_target_name
     * @type string
     * @description The description must have at least 4 characters
     * @required
     */
    compiler_target_name: string;
    /**
     * @name connectible_to_internet
     * @type boolean
     * @description If device can connect to internet
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name description
     * @type string
     * @description The description must have at least 4 characters
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters. Name must be unique across all System
     * @required
     */
    name: string;
    /**
     * @name processor_id
     * @type string
     * @description Required valid processor_id
     * @required
     */
    processor_id: string;
    /**
     * @name producer_id
     * @type string
     * @description Required valid producer_id
     * @required
     */
    producer_id: string;
}


/**
 * @name ITypeOfBoardShortDetail
 * @description: Interface ITypeOfBoardShortDetail definition
 */
export interface ITypeOfBoardShortDetail {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name ITypeOfWidget
 * @description: Model of TypeOfWidget
 */
export interface ITypeOfWidget {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name grid_widgets
     * @type IGridWidgetShortDetail[]
     */
    grid_widgets?: IGridWidgetShortDetail[];
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description This value will be in Json only if TypeOfWidget is private!
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @required
     */
    publish_type: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfWidgetNew
 * @description: Json Model for new TypeOfWidget
 */
export interface ITypeOfWidgetNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description If you want make private TypeOfWidget group. You have to have "project_id" parameter in Json., Value can be null or contains project_id
     */
    project_id?: string;
}


/**
 * @name ITypeOfWidgetShortDetail
 * @description: Json Model with details of Type of Widget>
 */
export interface ITypeOfWidgetShortDetail {
    /**
     * @name active
     * @type boolean
     * @description Visible only for administrator with permission
     * @readonly
     * @required
     */
    active: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name grid_widgets
     * @type IGridWidgetShortDetail[]
     * @readonly
     * @required
     */
    grid_widgets: IGridWidgetShortDetail[];
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name order_position
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    order_position: number;
    /**
     * @name publish_type
     * @type ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version")
     * @readonly
     * @required
     */
    publish_type: ("private_program"|"public_program"|"default_main_program"|"default_test_program"|"default_version");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBlockFilter
 * @description: Json Model for getting Type_Of_Block Filter List
 */
export interface ITypeOfBlockFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Type_Of_Blocks of given project
     */
    project_id?: string;
    /**
     * @name public_programs
     * @type boolean
     * @description Use 'true' for private Type_Of_Block or 'false' for non-private
     * @required
     */
    public_programs: boolean;
}


/**
 * @name ITypeOfBlockList
 * @description: Individual Type_Of_Block List
 */
export interface ITypeOfBlockList {
    /**
     * @name content
     * @type ITypeOfBlockShortDetail[]
     * @readonly
     * @required
     */
    content: ITypeOfBlockShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ITypeOfWidgetFilter
 * @description: Json Model for getting Type_Of_Widget Filter List
 */
export interface ITypeOfWidgetFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Type_Of_Widgets of given project
     */
    project_id?: string;
    /**
     * @name public_programs
     * @type boolean
     * @description Show - All Public Programs which are confirmed and approved.
     */
    public_programs?: boolean;
}


/**
 * @name ITypeOfWidgetList
 * @description: Individual Type_Of_Widget List
 */
export interface ITypeOfWidgetList {
    /**
     * @name content
     * @type ITypeOfWidgetShortDetail[]
     * @readonly
     * @required
     */
    content: ITypeOfWidgetShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number
     * @description Numbers of pages, which you can call
     * @format int32
     * @readonly
     * @required
     */
    pages: number;
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IUnauthorized
 * @description: Interface IUnauthorized definition
 */
export interface IUnauthorized {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Unauthorized access - please log in
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("unauthorized")
     * @description state
     * @readonly
     * @required
     */
    state: ("unauthorized");
}


/**
 * @name IVersionObject
 * @description: Model of Version_Object
 */
export interface IVersionObject {
    /**
     * @name author
     * @type IPersonShortDetail
     */
    author?: IPersonShortDetail;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @required
     */
    date_of_create: number;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IWebSocketToken
 * @description: Json Model that you will get, if login was successful
 */
export interface IWebSocketToken {
    /**
     * @name websocket_token
     * @type string
     * @description Swagger_Websocket_Token - used this token for WebSocket access. The lifetime of the token is 5 seconds. It is disposable. It can not be used twice. In the event of the expiration of the life of the disabled. 
     * @readonly
     * @required
     */
    websocket_token: string;
}




export abstract class TyrionAPI extends HomerAPI {

    protected abstract requestRestPath<T>(method:string, path:string, body:Object, success:number[]):Promise<T>;

    /**
     * @name __login
     * @summary login
     * @operationId login
     * @tags Access, Person, APP-Api
     *
     * @description Get access Token
     *
     * @param {ILogin} body - Contains Json with values
     *
     * @returns {ILoginToken} [code 200] Successfully logged
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     * @throws {INotValidated} [code 705] Account not validated
     */
    public __login(body:ILogin):Promise<ILoginToken> {
        return this.requestRestPath("POST", `/login`, body, [200]);
    }

    /**
     * @name __logout
     * @summary logout
     * @operationId logout
     * @tags Access, Person, APP-Api
     *
     * @description for logout person - that's deactivate person token 
     *
     *
     * @returns {IResultOk} [code 200] Successfully logged out
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public __logout():Promise<IResultOk> {
        return this.requestRestPath("POST", `/logout`, {}, [200]);
    }

    /**
     * @name actualizationProcedureCancel
     * @summary cancel ActualizationProcedure
     * @operationId canceled_procedure
     * @tags Actualization
     *
     * @description cancel (terminate) procedure
     *
     * @param {string} actualization_procedure_id
     *
     * @returns {IActualizationProcedure} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public actualizationProcedureCancel(actualization_procedure_id:string):Promise<IActualizationProcedure> {
        return this.requestRestPath("PUT", `/actualization_procedure/cancel/${actualization_procedure_id}`, {}, [200]);
    }

    /**
     * @name actualizationProcedureGet
     * @summary get ActualizationProcedure
     * @operationId get_Actualization_Procedure
     * @tags Actualization
     *
     * @description get Actualization Procedure by ID
     *
     * @param {string} actualization_procedure_id
     *
     * @returns {IActualizationProcedure} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public actualizationProcedureGet(actualization_procedure_id:string):Promise<IActualizationProcedure> {
        return this.requestRestPath("GET", `/actualization_procedure/object/${actualization_procedure_id}`, {}, [200]);
    }

    /**
     * @name actualizationProcedureGetByFilter
     * @summary get ActualizationProcedure by Filter
     * @operationId get_Actualization_Procedures_by_filter
     * @tags Actualization
     *
     * @description get actualization Procedure by query
     *
     * @param {number} page_number
     * @param {IActualizationProcedureFilter} body - Contains Json with values
     *
     * @returns {IActualizationProcedureList} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public actualizationProcedureGetByFilter(page_number:number, body:IActualizationProcedureFilter):Promise<IActualizationProcedureList> {
        return this.requestRestPath("PUT", `/actualization_procedure/filter/${page_number}`, body, [200]);
    }

    /**
     * @name actualizationProcedureMake
     * @summary make ActualizationProcedure
     * @operationId make_actualization_procedure
     * @tags Actualization
     *
     * @description make procedure
     *
     * @param {IActualizationProcedureMake} body - Contains Json with values
     *
     * @returns {IActualizationProcedureShortDetail} [code 201] Ok Created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public actualizationProcedureMake(body:IActualizationProcedureMake):Promise<IActualizationProcedureShortDetail> {
        return this.requestRestPath("POST", `/actualization_procedure/make`, body, [201]);
    }

    /**
     * @name actualizationTaskGet
     * @summary get ActualizationTask
     * @operationId get_Actualization_CProgramUpdatePlan
     * @tags Actualization
     *
     * @description get Actualization task by ID
     *
     * @param {string} task_id
     *
     * @returns {ICProgramUpdatePlan} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public actualizationTaskGet(task_id:string):Promise<ICProgramUpdatePlan> {
        return this.requestRestPath("PUT", `/actualization_task/object/${task_id}`, {}, [200]);
    }

    /**
     * @name actualizationTaskGetByFilter
     * @summary get ActualizationTask by Filter
     * @operationId get_Actualization_CProgramUpdatePlan_by_filter
     * @tags Actualization
     *
     * @description get actualization Tasks by query
     *
     * @param {number} page_number
     * @param {ISwaggerActualizationProcedureTaskFilter} body - Contains Json with values
     *
     * @returns {IActualizationProcedureTaskList} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public actualizationTaskGetByFilter(page_number:number, body:ISwaggerActualizationProcedureTaskFilter):Promise<IActualizationProcedureTaskList> {
        return this.requestRestPath("PUT", `/actualization_task/filter/${page_number}`, body, [200]);
    }

    /**
     * @name bProgramCreate
     * @summary create B_Program
     * @operationId bProgram_create
     * @tags B_Program
     *
     * @description create new B_Program
     *
     * @param {string} project_id - project_id String path
     * @param {IBProgramNew} body - Contains Json with values
     *
     * @returns {IBProgram} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramCreate(project_id:string, body:IBProgramNew):Promise<IBProgram> {
        return this.requestRestPath("POST", `/b_program/${project_id}`, body, [201]);
    }

    /**
     * @name bProgramDelete
     * @summary delete B_Program
     * @operationId bProgram_delete
     * @tags B_Program
     *
     * @description remove B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramDelete(b_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name bProgramEdit
     * @summary edit B_Program
     * @operationId bProgram_update
     * @tags B_Program
     *
     * @description edit basic information in B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     * @param {IBProgramNew} body - Contains Json with values
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramEdit(b_program_id:string, body:IBProgramNew):Promise<IBProgram> {
        return this.requestRestPath("PUT", `/b_program/${b_program_id}`, body, [200]);
    }

    /**
     * @name bProgramGet
     * @summary get B_Program
     * @operationId bProgram_get
     * @tags B_Program
     *
     * @description get B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramGet(b_program_id:string):Promise<IBProgram> {
        return this.requestRestPath("GET", `/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name bProgramGetAllDetailsForIntegration
     * @summary get B_Program all details for integration
     * @operationId board_allDetailsForBlocko
     * @tags Blocko, B_Program
     *
     * @description get all boards that user can integrate to Blocko program
     *
     * @param {string} project_id
     *
     * @returns {IBoardsForBlocko} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramGetAllDetailsForIntegration(project_id:string):Promise<IBoardsForBlocko> {
        return this.requestRestPath("GET", `/blocko/all_details/${project_id}`, {}, [200]);
    }

    /**
     * @name bProgramGetByFilter
     * @summary get B_Program by Filter
     * @operationId bProgram_getByFilter
     * @tags B_Program
     *
     * @description get B_Program List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBProgramFilter} body - Contains Json with values
     *
     * @returns {IBProgramList} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramGetByFilter(page_number:number, body:IBProgramFilter):Promise<IBProgramList> {
        return this.requestRestPath("PUT", `/b_program/list/${page_number}`, body, [200]);
    }

    /**
     * @name bProgramVersionCreate
     * @summary create B_Program_Version
     * @operationId bProgramVersion_create
     * @tags B_Program
     *
     * @description create new vesion in Blocko program
     *
     * @param {string} b_program_id - b_program_id String path
     * @param {IBProgramVersionNew} body - Contains Json with values
     *
     * @returns {IBProgramVersion} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramVersionCreate(b_program_id:string, body:IBProgramVersionNew):Promise<IBProgramVersion> {
        return this.requestRestPath("POST", `/b_program/version/${b_program_id}`, body, [200]);
    }

    /**
     * @name bProgramVersionDelete
     * @summary delete B_Program_Version
     * @operationId bProgramVersion_delete
     * @tags B_Program
     *
     * @description remove B_Program version object
     *
     * @param {string} version_id - version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramVersionDelete(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name bProgramVersionEdit
     * @summary edit B_Program_Version
     * @operationId bProgramVersion_update
     * @tags B_Program
     *
     * @description edit Version object
     *
     * @param {string} version_id - version_id String path
     * @param {IBProgramVersionEdit} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramVersionEdit(version_id:string, body:IBProgramVersionEdit):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/b_program/version/${version_id}`, body, [200]);
    }

    /**
     * @name bProgramVersionGet
     * @summary get B_Program_Version
     * @operationId bProgramVersion_get
     * @tags B_Program
     *
     * @description get B_Program version object
     *
     * @param {string} version_id - version_id String path
     *
     * @returns {IBProgramVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramVersionGet(version_id:string):Promise<IBProgramVersion> {
        return this.requestRestPath("GET", `/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name bProgramVersionUploadToCloud
     * @summary upload B_Program_Version to cloud
     * @operationId bProgramVersion_deploy
     * @tags B_Program
     *
     * @description upload version of B_Program to cloud. Its possible have only one version from B program in cloud. If you uploud new one - old one will be replaced
     *
     * @param {string} version_id - version_id String path
     * @param {IBProgramUploadInstance} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully uploaded
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bProgramVersionUploadToCloud(version_id:string, body:IBProgramUploadInstance):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/instance/uploadToCloud/${version_id}`, body, [200]);
    }

    /**
     * @name blockoBlockActivate
     * @summary activate BlockoBlock
     * @operationId blockoBlock_activate
     * @tags Admin-Blocko-Block
     *
     * @description activate Blocko Block
     *
     * @param {string} blocko_block_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockActivate(blocko_block_id:string):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/blockoBlock/active/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name blockoBlockCreate
     * @summary create BlockoBlock
     * @operationId blockoBlock_create
     * @tags Blocko-Block
     *
     * @description creating new independent Block object for Blocko tools
     *
     * @param {IBlockoBlockNew} body - Contains Json with values
     *
     * @returns {IBlockoBlock} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockCreate(body:IBlockoBlockNew):Promise<IBlockoBlock> {
        return this.requestRestPath("POST", `/blockoBlock`, body, [201]);
    }

    /**
     * @name blockoBlockDeactivate
     * @summary deactivate BlockoBlock
     * @operationId blockoBlock_deactivate
     * @tags Admin-Blocko-Block
     *
     * @description deactivate BlockoBlock
     *
     * @param {string} blocko_block_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockDeactivate(blocko_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/blockoBlock/deactive/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name blockoBlockDelete
     * @summary delete BlockoBlock
     * @operationId blockoBlock_delete
     * @tags Blocko-Block
     *
     * @description delete BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockDelete(blocko_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/blockoBlock/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name blockoBlockEdit
     * @summary edit BlockoBlock
     * @operationId blockoBlock_update
     * @tags Blocko-Block
     *
     * @description update basic information (name, and description) of the independent BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockNew} body - Contains Json with values
     *
     * @returns {IBlockoBlock} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockEdit(blocko_block_id:string, body:IBlockoBlockNew):Promise<IBlockoBlock> {
        return this.requestRestPath("PUT", `/blockoBlock/${blocko_block_id}`, body, [200]);
    }

    /**
     * @name blockoBlockGet
     * @summary get BlockoBlock
     * @operationId blockoBlock_get
     * @tags Blocko-Block
     *
     * @description get independent BlockoBlock object
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     *
     * @returns {IBlockoBlock} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockGet(blocko_block_id:string):Promise<IBlockoBlock> {
        return this.requestRestPath("GET", `/blockoBlock/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name blockoBlockGetByFilter
     * @summary get BlockoBlock by Filter
     * @operationId blockoBlock_getByFilter
     * @tags Blocko-Block
     *
     * @description get BlockoBlock List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBlockoBlockFilter} body - Contains Json with values
     *
     * @returns {IBlockoBlockList} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockGetByFilter(page_number:number, body:IBlockoBlockFilter):Promise<IBlockoBlockList> {
        return this.requestRestPath("PUT", `/blockoBlock/list/${page_number}`, body, [200]);
    }

    /**
     * @name blockoBlockMakeClone
     * @summary make_Clone BlockoBlock
     * @operationId blockoBlock_clone
     * @tags Blocko-Block
     *
     * @description clone Blocko Block for private
     *
     * @param {IBlockoBlockCopy} body - Contains Json with values
     *
     * @returns {IBlockoBlock} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockMakeClone(body:IBlockoBlockCopy):Promise<IBlockoBlock> {
        return this.requestRestPath("POST", `/blockoBlock/make_clone`, body, [200]);
    }

    /**
     * @name blockoBlockOrderDown
     * @summary order BlockoBlock Down
     * @operationId blockoBlock_orderDown
     * @tags Blocko-Block
     *
     * @description set up order
     *
     * @param {string} blocko_block_id - blocko_block_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockOrderDown(blocko_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/blockoBlock/order/down/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name blockoBlockOrderUp
     * @summary order BlockoBlock Up
     * @operationId blockoBlock_orderUp
     * @tags Blocko-Block
     *
     * @description set up order
     *
     * @param {string} blocko_block_id - blocko_block_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockOrderUp(blocko_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/blockoBlock/order/up/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name blockoBlockVersionCreate
     * @summary create BlockoBlock_Version
     * @operationId blockoBlockVersion_create
     * @tags Blocko-Block
     *
     * @description new BlockoBlock version
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockBlockoVersionNew} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockVersionCreate(blocko_block_id:string, body:IBlockoBlockBlockoVersionNew):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("POST", `/blockoBlock/version/${blocko_block_id}`, body, [201]);
    }

    /**
     * @name blockoBlockVersionDelete
     * @summary delete BlockoBlock_Version
     * @operationId blockoBlockVersion_delete
     * @tags Blocko-Block
     *
     * @description delete BlockoBlock version
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockVersionDelete(blocko_block_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/blockoBlock/version/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name blockoBlockVersionEdit
     * @summary edit BlockoBlock_Version
     * @operationId blockoBlockVersion_update
     * @tags Blocko-Block
     *
     * @description You can edit only basic information of the version. If you want to update the code, you have to create a new version!
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     * @param {IBlockoBlockBlockoVersionEdit} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockVersionEdit(blocko_block_version_id:string, body:IBlockoBlockBlockoVersionEdit):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("PUT", `/blockoBlock/version/${blocko_block_version_id}`, body, [200]);
    }

    /**
     * @name blockoBlockVersionEditAcceptPublication
     * @summary edit BlockoBlock_Version accept publication
     * @operationId blockoApproval
     * @tags Admin-Blocko-Block
     *
     * @description sets Approval_state to pending
     *
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockVersionEditAcceptPublication():Promise<IBlockoBlockVersion> {
        return this.requestRestPath("PUT", `/blocko/approval`, {}, [200]);
    }

    /**
     * @name blockoBlockVersionEditRefusePublication
     * @summary edit BlockoBlock_Version refuse publication
     * @operationId blockoDisapprove
     * @tags Admin-Blocko-Block
     *
     * @description sets disapproved from pending
     *
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockVersionEditRefusePublication():Promise<IResultOk> {
        return this.requestRestPath("PUT", `/blocko/disapprove`, {}, [200]);
    }

    /**
     * @name blockoBlockVersionEditResponsePublication
     * @summary edit BlockoBlock_Version Response publication
     * @operationId blockoBlock_public_response
     * @tags Admin-Blocko-Block
     *
     * @description sets Approval_state to pending
     *
     * @param {IBlockoBlockPublishResponse} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockVersionEditResponsePublication(body:IBlockoBlockPublishResponse):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/blockoBlock/approval`, body, [200]);
    }

    /**
     * @name blockoBlockVersionGet
     * @summary get BlockoBlock_Version
     * @operationId blockoBlockVersion_get
     * @tags Blocko-Block
     *
     * @description get version (content) from independent BlockoBlock
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockVersionGet(blocko_block_version_id:string):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("GET", `/blockoBlock/version/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name blockoBlockVersionMakePublic
     * @summary make BlockoBlock_Version public
     * @operationId blockoBlockVersion_makePublic
     * @tags Blocko-Block
     *
     * @description sets Approval_state to pending
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public blockoBlockVersionMakePublic(blocko_block_version_id:string):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("PUT", `/blockoBlock/version/make_public/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name blockoBlockVersionSetAsMain
     * @summary set_As_Main BlockoBlock_Version
     * @operationId blockoBlockVersion_set_main
     * @tags Admin-Blocko-Block
     *
     * @param {string} blocko_block_version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public blockoBlockVersionSetAsMain(blocko_block_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/blockoBlock/version/set_main/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name boardChangeserver
     * @summary change_server Board
     * @operationId board_redirect_to_server
     * @tags Board
     *
     * @description Redirect Board to another server (Change Server)
     *
     * @param {string} board_id
     * @param {IBoardServerRedirect} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public boardChangeserver(board_id:string, body:IBoardServerRedirect):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/board/change_server/${board_id}`, body, [200]);
    }

    /**
     * @name boardCheckRegistrationStatus
     * @summary check Board registration status
     * @operationId board_check
     * @tags Board
     *
     * @description Check Board state for new Registration. Types of responses in JSON state value[CAN_REGISTER, NOT_EXIST, ALREADY_REGISTERED_IN_YOUR_ACCOUNT, ALREADY_REGISTERED, PERMANENTLY_DISABLED, BROKEN_DEVICE]... 
     *     PERMANENTLY_DISABLED - device was removed by Byzance. 
     *    BROKEN_DEVICE - device exist - but its not possible to registered that. Damaged during manufacturing. 
     *
     * @param {string} hash_for_adding
     *
     * @returns {IBoardRegistrationStatus} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardCheckRegistrationStatus(hash_for_adding:string):Promise<IBoardRegistrationStatus> {
        return this.requestRestPath("GET", `/board/check/${hash_for_adding}`, {}, [200]);
    }

    /**
     * @name boardCommandExecution
     * @summary command Board execution
     * @operationId board_command_execution
     * @tags Board
     *
     * @description Removes picture of logged person
     *
     * @param {IBoardCommand} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardCommandExecution(body:IBoardCommand):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/board/command`, body, [200]);
    }

    /**
     * @name boardConnectWithProject
     * @summary connect Board with Project
     * @operationId board_connectProject
     * @tags Board
     *
     * @description This Api is used by Users for connection of Board with their Project
     *
     * @param {IBoardRegistrationToProject} body - Contains Json with values
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardConnectWithProject(body:IBoardRegistrationToProject):Promise<IBoard> {
        return this.requestRestPath("PUT", `/board/registration`, body, [200]);
    }

    /**
     * @name boardCreateAutomaticGarfield
     * @summary create Board automatic Garfield
     * @operationId board_create_garfield
     * @tags Admin-Board
     *
     * @description This Api is using for Board automatic registration adn Testing. Hardware is not allowed to delete! Only deactivate. Classic User can only register that to own project or own to account
     *
     * @param {IBoardNewGarfield} body - Contains Json with values
     *
     * @returns {IHardwareNewSettingsResult} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardCreateAutomaticGarfield(body:IBoardNewGarfield):Promise<IHardwareNewSettingsResult> {
        return this.requestRestPath("POST", `/board/automatic_registration`, body, [201]);
    }

    /**
     * @name boardCreateManualRegistration
     * @summary create Board manual Registration
     * @operationId board_create_manual
     * @tags Admin-Board
     *
     * @description This Api is using only for developing mode, for registration of our Board - in future it will be used only by machine in factory or boards themselves with "registration procedure". Hardware is not allowed to delete! Only deactivate. Classic User can only register that to own project or own to account
     *
     * @param {IBoardNewManual} body - Contains Json with values
     *
     * @returns {IBoard} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardCreateManualRegistration(body:IBoardNewManual):Promise<IBoard> {
        return this.requestRestPath("POST", `/board/manual_registration`, body, [201]);
    }

    /**
     * @name boardDeactivate
     * @summary deactivate Board
     * @operationId board_deactivate
     * @tags Board
     *
     * @description Permanent exclusion from the system - for some reason it is not allowed to remove the Board from database
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardDeactivate(board_id:string):Promise<IBoard> {
        return this.requestRestPath("DELETE", `/board/deactivateBoard/${board_id}`, {}, [200]);
    }

    /**
     * @name boardDeletePicture
     * @summary delete Board picture
     * @operationId board_removePicture
     * @tags Board
     *
     * @description Removes picture of logged person
     *
     * @param {string} board_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardDeletePicture(board_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/board/picture/remove/${board_id}`, {}, [200]);
    }

    /**
     * @name boardDisconnectFromProject
     * @summary disconnect Board from Project
     * @operationId board_disconnectProject
     * @tags Board
     *
     * @description This Api is used by Users for disconnection of Board from their Project, its not meaning that Board is removed from system, only disconnect and another user can registred that (connect that with different account/project etc..)
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardDisconnectFromProject(board_id:string):Promise<IBoard> {
        return this.requestRestPath("DELETE", `/board/${board_id}`, {}, [200]);
    }

    /**
     * @name boardEditDevelopersParameters
     * @summary edit Board developers parameters
     * @operationId board_update_parameters
     * @tags Board
     *
     * @description Edit Developers parameters [developer_kit, database_synchronize, web_view, web_port]
     *
     * @param {string} board_id
     * @param {IBoardDeveloperParameters} body - Contains Json with values
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardEditDevelopersParameters(board_id:string, body:IBoardDeveloperParameters):Promise<IBoard> {
        return this.requestRestPath("PUT", `/board/parameters/${board_id}`, body, [200]);
    }

    /**
     * @name boardEditPersonalDescription
     * @summary edit Board personal description
     * @operationId board_update_description
     * @tags Board
     *
     * @description Used for add descriptions by owners. "Persons" who registred "Board" to own "Projec" 
     *
     * @param {string} board_id
     * @param {IBoardPersonalDescription} body - Contains Json with values
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardEditPersonalDescription(board_id:string, body:IBoardPersonalDescription):Promise<IBoard> {
        return this.requestRestPath("PUT", `/board/userDescription/${board_id}`, body, [200]);
    }

    /**
     * @name boardGeneratemqttpassword
     * @summary generate_mqtt_password Board
     * @operationId board_generate_new_password
     * @tags Board
     *
     * @description Generate new connection password for Hardware
     *
     * @param {string} board_id
     *
     * @returns {IHardwareNewPassword} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardGeneratemqttpassword(board_id:string):Promise<IHardwareNewPassword> {
        return this.requestRestPath("PUT", `/board/mqtt_password_reset/${board_id}`, {}, [200]);
    }

    /**
     * @name boardGet
     * @summary get Board
     * @operationId board_get
     * @tags Board
     *
     * @description if you want get Board object by query = board_id. User can get only boards from project, whitch user owning or user need Permission key "Board_rea".
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardGet(board_id:string):Promise<IBoard> {
        return this.requestRestPath("GET", `/board/${board_id}`, {}, [200]);
    }

    /**
     * @name boardGroupCreate
     * @summary create BoardGroup
     * @operationId board_group_create
     * @tags BoardGroup
     *
     * @description Create Board Group
     *
     * @param {IHardwareGroupNew} body - Contains Json with values
     *
     * @returns {IBoardGroup} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public boardGroupCreate(body:IHardwareGroupNew):Promise<IBoardGroup> {
        return this.requestRestPath("POST", `/board_group`, body, [200]);
    }

    /**
     * @name boardGroupDelete
     * @summary delete BoardGroup
     * @operationId board_group_delete
     * @tags BoardGroup
     *
     * @description delete BoardGroup
     *
     * @param {string} board_group_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public boardGroupDelete(board_group_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/board_group/${board_group_id}`, {}, [200]);
    }

    /**
     * @name boardGroupEdit
     * @summary edit BoardGroup
     * @operationId board_group_update
     * @tags BoardGroup
     *
     * @description update BoardGroup
     *
     * @param {string} board_group_id
     * @param {IHardwareGroupEdit} body - Contains Json with values
     *
     * @returns {IBootLoader} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public boardGroupEdit(board_group_id:string, body:IHardwareGroupEdit):Promise<IBootLoader> {
        return this.requestRestPath("PUT", `/board_group/group/${board_group_id}`, body, [200]);
    }

    /**
     * @name boardGroupGet
     * @summary get BoardGroup
     * @operationId board_group_get
     * @tags Type-Of-Board
     *
     * @description get List of BoardGroup from Project
     *
     * @param {string} board_group_id
     *
     * @returns {IBoardGroup} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardGroupGet(board_group_id:string):Promise<IBoardGroup> {
        return this.requestRestPath("GET", `/board_group/individual/${board_group_id}`, {}, [200]);
    }

    /**
     * @name boardGroupGetListFromProject
     * @summary get_List BoardGroup From Project
     * @operationId board_group_get_list_project
     * @tags Type-Of-Board
     *
     * @description get List of BoardGroup from Project
     *
     * @param {string} project_id
     *
     * @returns {IBoardGroup[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardGroupGetListFromProject(project_id:string):Promise<IBoardGroup[]> {
        return this.requestRestPath("GET", `/board_group/project/${project_id}`, {}, [200]);
    }

    /**
     * @name boardGroupUpdateDeviceList
     * @summary update BoardGroup Device List
     * @operationId board_group_update_device_list
     * @tags BoardGroup
     *
     * @description update BoardGroup add or remove device list
     *
     * @param {IHardwareGroupDeviceListEdit} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public boardGroupUpdateDeviceList(body:IHardwareGroupDeviceListEdit):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/board_group/devices`, body, [200]);
    }

    /**
     * @name boardPrintlabel
     * @summary print_label Board
     * @operationId print_label
     * @tags Garfield
     *
     * @description Print Labels Board - Not working properly yet!
     *
     * @param {string} board_id
     *
     * @returns {IGarfield} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public boardPrintlabel(board_id:string):Promise<IGarfield> {
        return this.requestRestPath("GET", `/admin/garfiled-print-labes/${board_id}`, {}, [200]);
    }

    /**
     * @name boardSynchronizeAllWithCentralRegistrationAuthority
     * @summary synchronize Board all with central registration authority
     * @operationId synchronize_script
     * @tags Garfield
     *
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardSynchronizeAllWithCentralRegistrationAuthority():Promise<IResultOk> {
        return this.requestRestPath("GET", `/admin/garfiled-synchronize`, {}, [200]);
    }

    /**
     * @name boardUpdateBackup
     * @summary update Board Backup
     * @operationId board_updateBackup
     * @tags Board
     *
     * @param {IBoardBackupSettings} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardUpdateBackup(body:IBoardBackupSettings):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/board/backup`, body, [200]);
    }

    /**
     * @name boardUploadPicture
     * @summary upload Board picture
     * @operationId board_uploadPicture
     * @tags Board
     *
     * @description Upload Board file
     *
     * @param {string} board_id
     * @param {IBase64File} body - Contains Json with values
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public boardUploadPicture(board_id:string, body:IBase64File):Promise<IBoard> {
        return this.requestRestPath("PUT", `/board/picture/upload/${board_id}`, body, [200]);
    }

    /**
     * @name boardsGetForIdeOperation
     * @summary get Boards for Ide Operation
     * @operationId board_getForFastUpload
     * @tags Board
     *
     * @description List of boards under Project for fast upload of Firmware to Board from Web IDE
     *
     * @param {string} project_id
     *
     * @returns {IBoardForFastUploadDetail[]} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardsGetForIdeOperation(project_id:string):Promise<IBoardForFastUploadDetail[]> {
        return this.requestRestPath("GET", `/board/ide_upload_hardware/${project_id}`, {}, [200]);
    }

    /**
     * @name boardsGetWithFilterParameters
     * @summary get Boards with filter parameters
     * @operationId board_getByFilter
     * @tags Board
     *
     * @description Get List of boards. Acording by permission - system return only hardware from project, where is user owner or all boards if user have static Permission key
     *
     * @param {number} page_number
     * @param {IBoardFilter} body - Contains Json with values
     *
     * @returns {IBoardList} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public boardsGetWithFilterParameters(page_number:number, body:IBoardFilter):Promise<IBoardList> {
        return this.requestRestPath("PUT", `/board/filter/${page_number}`, body, [200]);
    }

    /**
     * @name bootloaderCreate
     * @summary create Bootloader
     * @operationId bootLoader_create
     * @tags Admin-Type-Of-Board
     *
     * @description Create picture from TypeOfBoard
     *
     * @param {string} type_of_board_id - type_of_board_id
     * @param {IBootLoaderCreate} body - Contains Json with values
     *
     * @returns {IBootLoader} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public bootloaderCreate(type_of_board_id:string, body:IBootLoaderCreate):Promise<IBootLoader> {
        return this.requestRestPath("POST", `/bootloader/${type_of_board_id}`, body, [200]);
    }

    /**
     * @name bootloaderDelete
     * @summary delete Bootloader
     * @operationId bootLoader_delete
     * @tags Admin-Type-Of-Board
     *
     * @param {string} boot_loader_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public bootloaderDelete(boot_loader_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/bootloader/${boot_loader_id}`, {}, [200]);
    }

    /**
     * @name bootloaderEdit
     * @summary edit Bootloader
     * @operationId bootLoader_update
     * @tags Admin-Type-Of-Board
     *
     * @description Create picture from TypeOfBoard
     *
     * @param {string} boot_loader_id - boot_loader_id
     * @param {IBootLoaderEdit} body - Contains Json with values
     *
     * @returns {IBootLoader} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public bootloaderEdit(boot_loader_id:string, body:IBootLoaderEdit):Promise<IBootLoader> {
        return this.requestRestPath("PUT", `/bootloader/${boot_loader_id}`, body, [200]);
    }

    /**
     * @name bootloaderEditSetAsMain
     * @summary edit Bootloader Set as Main
     * @operationId bootLoader_markAsMain
     * @tags Admin-Bootloader
     *
     * @description List of Hardware Id for update on latest bootloader version (system used latest bootloader for type of hardware)
     *
     * @param {string} boot_loader_id
     *
     * @returns {IResult|IResultOk} [code 200|201] successful operation|Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public bootloaderEditSetAsMain(boot_loader_id:string):Promise<IResult|IResultOk> {
        return this.requestRestPath("PUT", `/bootloader/mark/bootloader/${boot_loader_id}`, {}, [200,201]);
    }

    /**
     * @name bootloaderGetFileRecord
     * @summary get Bootloader FileRecord
     * @operationId fileRecord_get_bootLoader
     * @tags File, Garfield
     *
     * @param {string} bootloader_id - file_record_id String query
     *
     * @returns {IFileContent} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public bootloaderGetFileRecord(bootloader_id:string):Promise<IFileContent> {
        return this.requestRestPath("GET", `/file/bootloader/${bootloader_id}`, {}, [200]);
    }

    /**
     * @name bootloaderUploadFile
     * @summary upload Bootloader File
     * @operationId bootLoader_uploadFile
     * @tags Admin-Bootloader
     *
     * @param {string} boot_loader_id
     * @param {IBase64File} body - Contains Json with values
     *
     * @returns {IResult|IResultOk} [code 200|201] successful operation|Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public bootloaderUploadFile(boot_loader_id:string, body:IBase64File):Promise<IResult|IResultOk> {
        return this.requestRestPath("PUT", `/bootloader/file/${boot_loader_id}`, body, [200,201]);
    }

    /**
     * @name cProgramCompile
     * @summary compile C_Program
     * @operationId compile_c_program_code
     * @tags C_Program
     *
     * @description Compile code
     *
     * @param {ICProgramVersionUpdate} body - Contains Json with values
     *
     * @returns {ICloudCompilationServerCompilationResult} [code 200] Compilation successful
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {ICompilationBuildError[]} [code 422] Compilation unsuccessful
     * @throws {IServerOffline} [code 477] External server is offline
     * @throws {IExternalServerSideError} [code 478] External server side Error
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramCompile(body:ICProgramVersionUpdate):Promise<ICloudCompilationServerCompilationResult> {
        return this.requestRestPath("POST", `/c_program/version/compile`, body, [200]);
    }

    /**
     * @name cProgramCreate
     * @summary create C_Program
     * @operationId c_program_create
     * @tags C_Program
     *
     * @description If you want create new C_Program in project.id = {project_id}. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {ICProgramNew} body - Contains Json with values
     *
     * @returns {ICProgram} [code 201] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramCreate(body:ICProgramNew):Promise<ICProgram> {
        return this.requestRestPath("POST", `/c_program/create`, body, [201]);
    }

    /**
     * @name cProgramDelete
     * @summary delete C_Program
     * @operationId c_program_delete
     * @tags C_Program
     *
     * @description delete C_Program by query = c_program_id, query = version_id
     *
     * @param {string} c_program_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramDelete(c_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/c_program/${c_program_id}`, {}, [200]);
    }

    /**
     * @name cProgramEdit
     * @summary edit C_Program
     * @operationId c_program_edit
     * @tags C_Program
     *
     * @description If you want edit base information about C_Program by  query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id
     * @param {ICProgramEdit} body - Contains Json with values
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramEdit(c_program_id:string, body:ICProgramEdit):Promise<ICProgram> {
        return this.requestRestPath("PUT", `/c_program/${c_program_id}`, body, [200]);
    }

    /**
     * @name cProgramGet
     * @summary get C_Program
     * @operationId c_program_get
     * @tags C_Program
     *
     * @description get C_Program by query = c_program_id
     *
     * @param {string} c_program_id
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramGet(c_program_id:string):Promise<ICProgram> {
        return this.requestRestPath("GET", `/c_program/get/${c_program_id}`, {}, [200]);
    }

    /**
     * @name cProgramGetFile
     * @summary get C_Program File
     * @operationId cloud_file_get_c_program_compilation
     * @tags Homer-Server-API
     *
     * @description Required secure Token changed throw websocket
     *
     * @param {string} compilation_id
     *
     * @returns {any} [code 200] 
     *
     * @throws [code 303] Ok Result
     * @throws {IForbidden} [code 403] Need required permission or File is not probably right type
     * @throws {INotFound} [code 404] File by ID not found
     * @throws [code 500] Server side Error
     */
    public cProgramGetFile(compilation_id:string):Promise<any> {
        return this.requestRestPath("GET", `/cloud/homer_server/file/c_program/${compilation_id}`, {}, [200]);
    }

    /**
     * @name cProgramGetListByFilter
     * @summary get C_Program List by Filter
     * @operationId c_program_getByFilter
     * @tags C_Program
     *
     * @description get all C_Programs that belong to logged person
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)
     * @param {ICProgramFilter} body - Contains Json with values
     *
     * @returns {ICProgramList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramGetListByFilter(page_number:number, body:ICProgramFilter):Promise<ICProgramList> {
        return this.requestRestPath("PUT", `/c_program/filter/${page_number}`, body, [200]);
    }

    /**
     * @name cProgramMakeClone
     * @summary make_Clone C_Program
     * @operationId c_program_clone
     * @tags C_Program
     *
     * @description clone C_Program for private
     *
     * @param {ICProgramCopy} body - Contains Json with values
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramMakeClone(body:ICProgramCopy):Promise<ICProgram> {
        return this.requestRestPath("PUT", `/c_program/clone`, body, [200]);
    }

    /**
     * @name cProgramUploadIntoHardware
     * @summary upload C_Program into Hardware
     * @operationId uploadCompilationToBoard
     * @tags C_Program, Board, Actualization
     *
     * @description Upload compilation to list of hardware. Compilation is on Version oc C_Program. And before uplouding compilation, you must succesfuly compile required version before! Result (HTML code) will be every time 200. - Its because upload, restart, etc.. operation need more than ++30 second There is also problem / chance that Tyrion didn't find where Embedded hardware is. So you have to listening Server Sent Events (SSE) and show "future" message to the user!
     *
     * @param {IListOfBoards} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramUploadIntoHardware(body:IListOfBoards):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/version/upload`, body, [200]);
    }

    /**
     * @name cProgramVersionCreate
     * @summary create C_Program_Version
     * @operationId c_program_version_create
     * @tags C_Program
     *
     * @description If you want add new code to C_Program by query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id - version_id String query
     * @param {ICProgramVersionNew} body - Contains Json with values
     *
     * @returns {ICProgramVersion} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionCreate(c_program_id:string, body:ICProgramVersionNew):Promise<ICProgramVersion> {
        return this.requestRestPath("POST", `/c_program/version/create/${c_program_id}`, body, [201]);
    }

    /**
     * @name cProgramVersionDelete
     * @summary delete C_Program_Version
     * @operationId c_program_version_delete
     * @tags C_Program
     *
     * @description delete Version.id = version_id in C_Program by query = c_program_id, query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionDelete(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/c_program/version/delete/${version_id}`, {}, [200]);
    }

    /**
     * @name cProgramVersionEditInformation
     * @summary edit C_Program_Version information
     * @operationId c_program_version_edit
     * @tags C_Program
     *
     * @description For update basic (name and description) information in Version of C_Program. If you want update code. You have to create new version. And after that you can delete previous version
     *
     * @param {string} version_id - version_id String query
     * @param {ICProgramVersionEdit} body - Contains Json with values
     *
     * @returns {IVersionObject} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionEditInformation(version_id:string, body:ICProgramVersionEdit):Promise<IVersionObject> {
        return this.requestRestPath("PUT", `/c_program/version/edit/${version_id}`, body, [200]);
    }

    /**
     * @name cProgramVersionEditResponsePublication
     * @summary edit C_Program_Version Response publication
     * @operationId c_program_public_response
     * @tags Admin-C_Program
     *
     * @description sets Approval_state to pending
     *
     * @param {ICommunityVersionPublishResponse} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionEditResponsePublication(body:ICommunityVersionPublishResponse):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/version_for_aprove/approve_decision`, body, [200]);
    }

    /**
     * @name cProgramVersionGet
     * @summary get C_Program_Version
     * @operationId c_program_version_get
     * @tags C_Program
     *
     * @description get Version of C_Program by query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ICProgramVersion} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionGet(version_id:string):Promise<ICProgramVersion> {
        return this.requestRestPath("GET", `/c_program/version/get/${version_id}`, {}, [200]);
    }

    /**
     * @name cProgramVersionGetFileRecord
     * @summary get CProgram_Version FileRecord
     * @operationId fileRecord_get_firmware
     * @tags File, Garfield
     *
     * @param {string} version_id - file_record_id String query
     *
     * @returns {IFileContent} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionGetFileRecord(version_id:string):Promise<IFileContent> {
        return this.requestRestPath("GET", `/file/cprogram_version/${version_id}`, {}, [200]);
    }

    /**
     * @name cProgramVersionMakePublic
     * @summary make C_Program_Version public
     * @operationId c_program_version_make_public
     * @tags C_Program
     *
     * @description Make C_Program public, so other users can see it and use it. Attention! Attention! Attention! A user can publish only three programs at the stage waiting for approval.
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Bad Request
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cProgramVersionMakePublic(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/version/make_public/${version_id}`, {}, [200]);
    }

    /**
     * @name companiesGetAll
     * @summary get Companies All
     * @operationId customer_get_all
     * @tags Price & Invoice & Tariffs
     *
     * @description Gets all companies by logged user.
     *
     *
     * @returns {ICustomer[]} [code 200] Created successfully
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public companiesGetAll():Promise<ICustomer[]> {
        return this.requestRestPath("GET", `/company`, {}, [200]);
    }

    /**
     * @name companyCreate
     * @summary create Company
     * @operationId customer_create_company
     * @tags Price & Invoice & Tariffs
     *
     * @description Creates new Customer (type: company), you can crate new product under Customer(company) or under Customer(person)
     *
     * @param {ICustomerNew} body - Contains Json with values
     *
     * @returns {ICustomer} [code 201] Created successfully
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public companyCreate(body:ICustomerNew):Promise<ICustomer> {
        return this.requestRestPath("POST", `/company`, body, [201]);
    }

    /**
     * @name companyUpdate
     * @summary update Company
     * @operationId customer_update_company
     * @tags Price & Invoice & Tariffs
     *
     * @description Updates payment details of a company.
     *
     * @param {string} customer_id
     * @param {ICustomerNew} body - Contains Json with values
     *
     * @returns {ICustomer} [code 200] Updated successfully
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public companyUpdate(customer_id:string, body:ICustomerNew):Promise<ICustomer> {
        return this.requestRestPath("PUT", `/company/${customer_id}`, body, [200]);
    }

    /**
     * @name compilationServerCreate
     * @summary create Compilation_Server
     * @operationId compilation_server_create
     * @tags Admin-External-Server
     *
     * @description Create new Gate for Compilation_Server
     *
     * @param {ICompilationServerNew} body - Contains Json with values
     *
     * @returns {ICompilationServer} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public compilationServerCreate(body:ICompilationServerNew):Promise<ICompilationServer> {
        return this.requestRestPath("POST", `/compilation_server`, body, [201]);
    }

    /**
     * @name compilationServerEdit
     * @summary edit Compilation_Server
     * @operationId compilation_server_edit
     * @tags Admin-External-Server
     *
     * @description Edit basic information Compilation_Server
     *
     * @param {string} server_id
     * @param {ICompilationServerNew} body - Contains Json with values
     *
     * @returns {ICompilationServer} [code 200] Update successfuly
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public compilationServerEdit(server_id:string, body:ICompilationServerNew):Promise<ICompilationServer> {
        return this.requestRestPath("PUT", `/compilation_server/${server_id}`, body, [200]);
    }

    /**
     * @name compilationServerGet
     * @summary get Compilation_Server
     * @operationId compilation_server_get
     * @tags Admin-External-Server
     *
     * @description get Compilation_Servers
     *
     * @param {string} server_id
     *
     * @returns {ICompilationServer} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Objects not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public compilationServerGet(server_id:string):Promise<ICompilationServer> {
        return this.requestRestPath("GET", `/compilation_server/${server_id}`, {}, [200]);
    }

    /**
     * @name compilationServersDelete
     * @summary delete Compilation_Servers
     * @operationId compilation_server_delete
     * @tags Admin-External-Server
     *
     * @description remove Compilation_Servers
     *
     * @param {string} server_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Objects not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public compilationServersDelete(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation_server/${server_id}`, {}, [200]);
    }

    /**
     * @name compilationServersGetList
     * @summary get Compilation_Servers List
     * @operationId compilation_server_get_all
     * @tags Admin-External-Server
     *
     * @description get Compilation_Servers
     *
     *
     * @returns {ICompilerServerPublicDetail[]} [code 200] Ok Result
     *
     * @throws [code 500] Server side Error
     */
    public compilationServersGetList():Promise<ICompilerServerPublicDetail[]> {
        return this.requestRestPath("GET", `/compilation_server`, {}, [200]);
    }

    /**
     * @name connectiontokenRemoveAll
     * @summary remove  Connection_token All
     * @operationId person_removeAllConnections
     * @tags Admin-Person
     *
     * @description remove all connection tokens
     *
     * @param {string} person_id - person_id String query
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public connectiontokenRemoveAll(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/person/connections/${person_id}`, {}, [200]);
    }

    /**
     * @name creditBuyForGivenProduct
     * @summary buy Credit for given product
     * @operationId product_credit
     * @tags Price & Invoice & Tariffs
     *
     * @description creates invoice - credit will be added after payment if payment method is bank transfer or if getting money from credit card is successful
     *
     * @param {string} product_id
     * @param {IProductCredit} body - Contains Json with values
     *
     * @returns {IInvoice} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public creditBuyForGivenProduct(product_id:string, body:IProductCredit):Promise<IInvoice> {
        return this.requestRestPath("PUT", `/product/credit/${product_id}`, body, [200]);
    }

    /**
     * @name deleteBug
     * @summary Bug delete
     * @operationId serverError_delete
     * @tags Admin-Report
     *
     * @param {string} bug_id - bug_id String path
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteBug(bug_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/bug/${bug_id}`, {}, [200]);
    }

    /**
     * @name deleteBugAll
     * @summary Bug delete all
     * @operationId serverError_deleteAll
     * @tags Admin-Report
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteBugAll():Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/bug`, {}, [200]);
    }

    /**
     * @name emailAuthenticateFromRegistration
     * @summary authenticate Email from registration
     * @operationId person_emailAuthentication
     * @tags Admin-Person
     *
     * @description sends authentication email, if user did not get the first one from the registration
     *
     * @param {string} token
     * @param {IPersonAuthentication} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public emailAuthenticateFromRegistration(token:string, body:IPersonAuthentication):Promise<IResultOk> {
        return this.requestRestPath("GET", `/person/mail_authentication/${token}`, body, [200]);
    }

    /**
     * @name emailSendAuthentication
     * @summary send Email authentication
     * @operationId person_authenticationSendEmail
     * @tags Person
     *
     * @description sends authentication email, if user did not get the first one from the registration
     *
     * @param {IPersonAuthentication} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public emailSendAuthentication(body:IPersonAuthentication):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person/authentication_email`, body, [200]);
    }

    /**
     * @name emailSendPasswordRecoveryEmail
     * @summary send Email password recovery email
     * @operationId person_passwordRecoverySendEmail
     * @tags Access
     *
     * @description sends email with link for changing forgotten password
     *
     * @param {IPersonPasswordRecoveryEmail} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public emailSendPasswordRecoveryEmail(body:IPersonPasswordRecoveryEmail):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person/password/recovery_mail`, body, [200]);
    }

    /**
     * @name employeeAdd
     * @summary add Employee
     * @operationId customer_add_employee
     * @tags Price & Invoice & Tariffs
     *
     * @description Adds employee to a company.
     *
     * @param {ICustomerEmployee} body - Contains Json with values
     *
     * @returns {ICustomer} [code 200] Updated successfully
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public employeeAdd(body:ICustomerEmployee):Promise<ICustomer> {
        return this.requestRestPath("POST", `/employee`, body, [200]);
    }

    /**
     * @name employeeRemove
     * @summary remove Employee
     * @operationId customer_remove_employee
     * @tags Price & Invoice & Tariffs
     *
     * @description Removes employee from a company.
     *
     * @param {string} employee_id
     *
     * @returns {IResultOk} [code 200] Removed successfully
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public employeeRemove(employee_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/employee/${employee_id}`, {}, [200]);
    }

    /**
     * @name entityValidation
     * @summary validation Entity
     * @operationId something_validateProperty
     * @tags Person
     *
     * @description for cyclical validation during registration, key contains 'mail' or 'nick_name'. Or can be used for 'vat_number' as a key.
     *
     * @param {IEntityValidationIn} body - Contains Json with values
     *
     * @returns {IEntityValidationOut} [code 200] Result if it is possible to use
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public entityValidation(body:IEntityValidationIn):Promise<IEntityValidationOut> {
        return this.requestRestPath("POST", `/validate_entity`, body, [200]);
    }

    /**
     * @name facebookLogin
     * @summary login Facebook
     * @operationId Facebook
     * @tags Access, Social-Facebook
     *
     * @description For login via Facebook 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {ISocialNetworkLogin} body - Contains Json with values
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public facebookLogin(body:ISocialNetworkLogin):Promise<ISocialLogin> {
        return this.requestRestPath("POST", `/facebook`, body, [200]);
    }

    /**
     * @name garfieldCreate
     * @summary create Garfield
     * @operationId create_Garfield
     * @tags Garfield
     *
     * @description create Garfield
     *
     * @param {IGarfieldNew} body - Contains Json with values
     *
     * @returns {IGarfield} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public garfieldCreate(body:IGarfieldNew):Promise<IGarfield> {
        return this.requestRestPath("POST", `/garfiled`, body, [200]);
    }

    /**
     * @name garfieldDelete
     * @summary delete Garfield
     * @operationId remove_Garfield
     * @tags Garfield
     *
     * @description get Garfield  by ID
     *
     * @param {string} garfield_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public garfieldDelete(garfield_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/garfiled/${garfield_id}`, {}, [200]);
    }

    /**
     * @name garfieldEdit
     * @summary edit Garfield
     * @operationId edit_Garfield
     * @tags Garfield
     *
     * @description edit Garfield
     *
     * @param {string} garfield_id
     * @param {IGarfieldEdit} body - Contains Json with values
     *
     * @returns {IGarfield} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public garfieldEdit(garfield_id:string, body:IGarfieldEdit):Promise<IGarfield> {
        return this.requestRestPath("PUT", `/garfiled/${garfield_id}`, body, [200]);
    }

    /**
     * @name garfieldGet
     * @summary get Garfield
     * @operationId get_Garfield
     * @tags Garfield
     *
     * @description get Garfield  by ID
     *
     * @param {string} garfield_id
     *
     * @returns {IGarfield} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public garfieldGet(garfield_id:string):Promise<IGarfield> {
        return this.requestRestPath("GET", `/garfiled/${garfield_id}`, {}, [200]);
    }

    /**
     * @name garfieldGetList
     * @summary get Garfield List
     * @operationId get_Garfield_list
     * @tags Garfield
     *
     * @description get Garfield List
     *
     *
     * @returns {IGarfield[]} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public garfieldGetList():Promise<IGarfield[]> {
        return this.requestRestPath("GET", `/garfield`, {}, [200]);
    }

    /**
     * @name getBug
     * @summary Bug get
     * @operationId serverError_get
     * @tags Admin-Report
     *
     * @param {string} bug_id - bug_id String path
     *
     * @returns {IServerError} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getBug(bug_id:string):Promise<IServerError> {
        return this.requestRestPath("GET", `/admin/bug/${bug_id}`, {}, [200]);
    }

    /**
     * @name getBugsAll
     * @summary Bugs get all
     * @operationId serverError_getAll
     * @tags Admin-Report
     *
     *
     * @returns {IServerError[]} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getBugsAll():Promise<IServerError[]> {
        return this.requestRestPath("GET", `/admin/bug`, {}, [200]);
    }

    /**
     * @name gitHubLogin
     * @summary login GitHub
     * @operationId GitHub
     * @tags Access, Social-GitHub
     *
     * @description For login via GitHub 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {ISocialNetworkLogin} body - Contains Json with values
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public gitHubLogin(body:ISocialNetworkLogin):Promise<ISocialLogin> {
        return this.requestRestPath("POST", `/github`, body, [200]);
    }

    /**
     * @name gridWidgetActivate
     * @summary activate Grid_Widget
     * @operationId gridWidget_activate
     * @tags Admin-Grid-Widget
     *
     * @description activate Widget
     *
     * @param {string} grid_widget_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public gridWidgetActivate(grid_widget_id:string):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/grid_widget/active/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetCreate
     * @summary create Grid_Widget
     * @operationId gridWidget_create
     * @tags Grid-Widget
     *
     * @description creating new independent Widget object for Grid tools
     *
     * @param {IGridWidgetNew} body - Contains Json with values
     *
     * @returns {IGridWidget} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public gridWidgetCreate(body:IGridWidgetNew):Promise<IGridWidget> {
        return this.requestRestPath("POST", `/grid_widget`, body, [201]);
    }

    /**
     * @name gridWidgetDeactivate
     * @summary deactivate Grid_Widget
     * @operationId gridWidget_deactivate
     * @tags Admin-Grid-Widget
     *
     * @description deactivate Widget
     *
     * @param {string} grid_widget_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public gridWidgetDeactivate(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/grid_widget/deactive/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetDelete
     * @summary delete Grid_Widget
     * @operationId gridWidget_delete
     * @tags Grid-Widget
     *
     * @description delete GridWidget
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public gridWidgetDelete(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid_widget/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetEdit
     * @summary edit Grid_Widget
     * @operationId gridWidget_update
     * @tags Grid-Widget
     *
     * @description update basic information (name, and description) of the independent GridWidget
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     * @param {IGridWidgetNew} body - Contains Json with values
     *
     * @returns {IGridWidget} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public gridWidgetEdit(grid_widget_id:string, body:IGridWidgetNew):Promise<IGridWidget> {
        return this.requestRestPath("PUT", `/grid_widget/${grid_widget_id}`, body, [200]);
    }

    /**
     * @name gridWidgetGet
     * @summary get Grid_Widget
     * @operationId gridWidget_get
     * @tags Grid-Widget
     *
     * @description get independent Grid_Widget object
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IGridWidget} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public gridWidgetGet(grid_widget_id:string):Promise<IGridWidget> {
        return this.requestRestPath("GET", `/grid_widget/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetGetByFilter
     * @summary get Grid_Widget by Filter
     * @operationId gridWidget_getByFilter
     * @tags Grid-Widget
     *
     * @description get GridWidget List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IGridWidgetFilter} body - Contains Json with values
     *
     * @returns {IGridWidgetList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public gridWidgetGetByFilter(page_number:number, body:IGridWidgetFilter):Promise<IGridWidgetList> {
        return this.requestRestPath("PUT", `/grid_widget/list/${page_number}`, body, [200]);
    }

    /**
     * @name gridWidgetMakeClone
     * @summary make_Clone Grid_Widget
     * @operationId gridWidget_clone
     * @tags Grid_Widget
     *
     * @description clone Grid_Widget for private
     *
     * @param {IGridWidgetCopy} body - Contains Json with values
     *
     * @returns {IGridWidget} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public gridWidgetMakeClone(body:IGridWidgetCopy):Promise<IGridWidget> {
        return this.requestRestPath("POST", `/grid_widget/make_clone`, body, [200]);
    }

    /**
     * @name gridWidgetOrderDown
     * @summary order Grid_Widget Down
     * @operationId gridWidget_order_down
     * @tags Grid-Widget
     *
     * @description set down order
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public gridWidgetOrderDown(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/grid_widget/order/down/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetOrderUp
     * @summary order Grid_Widget Up
     * @operationId gridWidget_order_up
     * @tags Grid-Widget
     *
     * @description set up order
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public gridWidgetOrderUp(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/grid_widget/order/up/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetVersionCreate
     * @summary create Grid_Widget_Version
     * @operationId gridWidgetVersion_create
     * @tags Grid-Widget
     *
     * @description new GridWidget version
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     * @param {IGridWidgetVersionNew} body - Contains Json with values
     *
     * @returns {IGridWidgetVersion} [code 201] Successfully created
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public gridWidgetVersionCreate(grid_widget_id:string, body:IGridWidgetVersionNew):Promise<IGridWidgetVersion> {
        return this.requestRestPath("POST", `/grid_widget/version/${grid_widget_id}`, body, [201]);
    }

    /**
     * @name gridWidgetVersionDelete
     * @summary delete Grid_Widget_Version
     * @operationId gridWidgetVersion_delete
     * @tags Grid-Widget
     *
     * @description delete GridWidget version
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public gridWidgetVersionDelete(grid_widget_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid_widget/version/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetVersionEdit
     * @summary edit Grid_Widget_Version
     * @operationId gridWidgetVersion_edit
     * @tags Grid-Widget
     *
     * @description You can edit only basic information of the version. If you want to update the code, you have to create a new version!
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     * @param {IGridWidgetVersionEdit} body - Contains Json with values
     *
     * @returns {IGridWidgetVersion} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public gridWidgetVersionEdit(grid_widget_version_id:string, body:IGridWidgetVersionEdit):Promise<IGridWidgetVersion> {
        return this.requestRestPath("PUT", `/grid_widget/version/${grid_widget_version_id}`, body, [200]);
    }

    /**
     * @name gridWidgetVersionEditResponsePublication
     * @summary edit Grid_Widget_Version Response publication
     * @operationId grid_widget_public_response
     * @tags Admin-Grid-Widget
     *
     * @description sets Approval_state to pending
     *
     * @param {IGridWidgetPublishResponse} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public gridWidgetVersionEditResponsePublication(body:IGridWidgetPublishResponse):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/grid_widget/approval`, body, [200]);
    }

    /**
     * @name gridWidgetVersionGet
     * @summary get Grid_Widget_Version
     * @operationId gridWidgetVersion_get
     * @tags Grid-Widget
     *
     * @description get version (content) from independent GridWidget
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IGridWidgetVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public gridWidgetVersionGet(grid_widget_version_id:string):Promise<IGridWidgetVersion> {
        return this.requestRestPath("GET", `/grid_widget/version/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetVersionMakePublic
     * @summary make Grid_Widget_Version public
     * @operationId gridWidgetVersion_version_make_public
     * @tags C_Program
     *
     * @description Make C_Program public, so other users can see it and use it. Attention! Attention! Attention! A user can publish only three programs at the stage waiting for approval.
     *
     * @param {string} grid_widget_version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Bad Request
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public gridWidgetVersionMakePublic(grid_widget_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/grid_widget/version/make_public/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetVersionSetAsMain
     * @summary set_As_Main Grid_Widget_Version
     * @operationId gridWidgetVersion_set_main
     * @tags Admin-Grid-Widget
     *
     * @param {string} grid_widget_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public gridWidgetVersionSetAsMain(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/grid_widget/version/set_main/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name gridWidgetVersionsGet
     * @summary get Grid_Widget_Versions
     * @operationId gridWidgetVersion_getAll
     * @tags Grid-Widget
     *
     * @description get all versions (content) from independent GridWidget
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     * @param {IGridWidgetVersionNew} body - Contains Json with values
     *
     * @returns {IGridWidgetVersion[]} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public gridWidgetVersionsGet(grid_widget_id:string, body:IGridWidgetVersionNew):Promise<IGridWidgetVersion[]> {
        return this.requestRestPath("GET", `/grid_widget/version/all/${grid_widget_id}`, body, [200]);
    }

    /**
     * @name hardwareUpdateBootloader
     * @summary update Hardware Bootloader
     * @operationId bootLoader_manualUpdate
     * @tags Bootloader
     *
     * @description List of Hardware Id for update on latest bootloader version (system used latest bootloader for type of hardware)
     *
     * @param {IBoardBootloaderUpdate} body - Contains Json with values
     *
     * @returns {IResult|IResultOk} [code 200|201] successful operation|Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public hardwareUpdateBootloader(body:IBoardBootloaderUpdate):Promise<IResult|IResultOk> {
        return this.requestRestPath("PUT", `/bootloader/update_device_list`, body, [200,201]);
    }

    /**
     * @name homerServerCreate
     * @summary create Homer_Server
     * @operationId homer_server_create
     * @tags External-Server
     *
     * @description Create new Homer_Server - private or public
     *
     * @param {ICloudHomerServerNew} body - Contains Json with values
     *
     * @returns {ICloudHomerServerNew} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public homerServerCreate(body:ICloudHomerServerNew):Promise<ICloudHomerServerNew> {
        return this.requestRestPath("POST", `/homer_server`, body, [201]);
    }

    /**
     * @name homerServerDelete
     * @summary delete Homer_Server
     * @operationId homer_server_delete
     * @tags External-Server
     *
     * @description remove Compilation_Servers
     *
     * @param {string} server_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public homerServerDelete(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/homer_server/server/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServerEdit
     * @summary edit Homer_Server
     * @operationId homer_server_edit
     * @tags External-Server
     *
     * @description Edit basic information Compilation_Server
     *
     * @param {string} server_id
     * @param {ICloudHomerServerNew} body - Contains Json with values
     *
     * @returns {IHomerServer} [code 200] Updated successfully
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public homerServerEdit(server_id:string, body:ICloudHomerServerNew):Promise<IHomerServer> {
        return this.requestRestPath("PUT", `/homer_server/server/edit/${server_id}`, body, [200]);
    }

    /**
     * @name homerServerEditSetBackupServer
     * @summary edit Homer_Server Set Backup Server 
     * @operationId homer_server_set_backup_server
     * @tags Admin-External-Server
     *
     * @description Edit basic information Compilation_Server
     *
     * @param {string} server_id
     *
     * @returns {IHomerServer} [code 200] Updated successfully
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public homerServerEditSetBackupServer(server_id:string):Promise<IHomerServer> {
        return this.requestRestPath("PUT", `/homer_server/set_backup/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServerEditSetMainServer
     * @summary edit Homer_Server Set Main Server 
     * @operationId homer_server_set_main_server
     * @tags Admin-External-Server
     *
     * @description Edit basic information Compilation_Server
     *
     * @param {string} server_id
     *
     * @returns {IHomerServer} [code 200] Updated successfully
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public homerServerEditSetMainServer(server_id:string):Promise<IHomerServer> {
        return this.requestRestPath("PUT", `/homer_server/set_main/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServerGet
     * @summary get Homer_Server
     * @operationId homer_server_get
     * @tags Admin-External-Server
     *
     * @description get all Homer Servers
     *
     * @param {string} server_id
     *
     * @returns {IHomerServer} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public homerServerGet(server_id:string):Promise<IHomerServer> {
        return this.requestRestPath("GET", `/homer_server/server/${server_id}`, {}, [200]);
    }

    /**
     * @name homerServersGetList
     * @summary get Homer_Servers List
     * @operationId homer_server_get_all
     * @tags Admin-External-Server
     *
     * @description get all Homer Servers
     *
     *
     * @returns {IHomerServer[]} [code 200] Ok Result
     *
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public homerServersGetList():Promise<IHomerServer[]> {
        return this.requestRestPath("GET", `/homer_server/all`, {}, [200]);
    }

    /**
     * @name instanceEdit
     * @summary edit Instance
     * @operationId instance_edit
     * @tags Instance
     *
     * @param {string} instance_id - instance_id String path
     * @param {IInstanceEdit} body - Contains Json with values
     *
     * @returns {IHomerInstance} [code 200] Successfully updated
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public instanceEdit(instance_id:string, body:IInstanceEdit):Promise<IHomerInstance> {
        return this.requestRestPath("PUT", `/instance/edit/${instance_id}`, body, [200]);
    }

    /**
     * @name instanceGet
     * @summary get Instance
     * @operationId get_b_program_instance
     * @tags Instance
     *
     * @description get unique instance under Blocko program (now its 1:1) we are not supporting multi-instance schema yet
     *
     * @param {string} instance_id
     *
     * @returns {IHomerInstance} [code 200] Successfully uploaded
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public instanceGet(instance_id:string):Promise<IHomerInstance> {
        return this.requestRestPath("GET", `/instance/get/${instance_id}`, {}, [200]);
    }

    /**
     * @name instanceGetByFilter
     * @summary get Instance by Filter
     * @operationId get_b_program_instance_by_filter
     * @tags Instance
     *
     * @description Get List of Instances. According to permission - system return only Instance from project, where is user owner or all Instances if user have static Permission key
     *
     * @param {number} page_number
     * @param {IInstanceFilter} body - Contains Json with values
     *
     * @returns {IInstanceList} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public instanceGetByFilter(page_number:number, body:IInstanceFilter):Promise<IInstanceList> {
        return this.requestRestPath("PUT", `/instance/filter/${page_number}`, body, [200]);
    }

    /**
     * @name instanceRecordGet
     * @summary get Instance_Record
     * @operationId get_b_program_instance_record
     * @tags Instance
     *
     * @description get unique instance under Blocko program (now its 1:1) we are not supporting multi-instance schema yet
     *
     * @param {string} instance_record_id
     *
     * @returns {IHomerInstanceRecord} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public instanceRecordGet(instance_record_id:string):Promise<IHomerInstanceRecord> {
        return this.requestRestPath("GET", `/instance_record/get/${instance_record_id}`, {}, [200]);
    }

    /**
     * @name instanceSetStartOrShutDown
     * @summary set Instance start or shutDown
     * @operationId instance_start_or_shut_down
     * @tags Instance
     *
     * @description If instance is not running this Command uploud instance to cloud and starter all procedures. If instance is online, stis Command shutdown instance immidietly with all procedures.
     *
     * @param {string} instance_id
     *
     * @returns {IResultOk} [code 200] Successfully removed
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public instanceSetStartOrShutDown(instance_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/instance/start_or_shut_down/${instance_id}`, {}, [200]);
    }

    /**
     * @name instanceUpdateGridSettings
     * @summary update Instance Grid Settings
     * @operationId instance_change_settings_grid_App
     * @tags Instance
     *
     * @param {IInstanceGridAppSettings} body - Contains Json with values
     *
     * @returns {IMProgramInstanceParameter} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public instanceUpdateGridSettings(body:IInstanceGridAppSettings):Promise<IMProgramInstanceParameter> {
        return this.requestRestPath("PUT", `/instance/grid_app`, body, [200]);
    }

    /**
     * @name instancesGetListByProject
     * @summary get Instances List by Project
     * @operationId get_b_program_instance_under_project
     * @tags Instance
     *
     * @description get list of instance_ids details under project id
     *
     * @param {string} project_id
     *
     * @returns {IInstanceShortDetail[]} [code 200] Successfully uploaded
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public instancesGetListByProject(project_id:string):Promise<IInstanceShortDetail[]> {
        return this.requestRestPath("GET", `/instance/project/${project_id}`, {}, [200]);
    }

    /**
     * @name invoiceDelete
     * @summary delete Invoice
     * @operationId invoice_delete
     * @tags Admin-Invoice
     *
     * @description remove Invoice only with permission
     *
     * @param {string} invoice_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public invoiceDelete(invoice_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/invoice/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceEditSetAsPaid
     * @summary edit Invoice Set As Paid
     * @operationId invoice_set_as_paid
     * @tags Admin-Invoice
     *
     * @description remove Invoice only with permission
     *
     * @param {string} invoice_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public invoiceEditSetAsPaid(invoice_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/invoice/set_pay/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceGet
     * @summary get Invoice
     * @operationId invoice_get
     * @tags Price & Invoice & Tariffs
     *
     * @description get summary information from invoice
     *
     * @param {string} invoice_id
     *
     * @returns {IInvoiceFullDetails} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public invoiceGet(invoice_id:string):Promise<IInvoiceFullDetails> {
        return this.requestRestPath("GET", `/invoice/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceGetPDFFile
     * @summary get Invoice PDF file
     * @operationId invoice_getPdf
     * @tags Price & Invoice & Tariffs
     *
     * @description get PDF invoice file
     *
     * @param {string} kind
     * @param {string} invoice_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public invoiceGetPDFFile(kind:string, invoice_id:string):Promise<IResultOk> {
        return this.requestRestPath("GET", `/invoice/pdf/${kind}/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceResend
     * @summary resend Invoice
     * @operationId invoice_resend
     * @tags Price & Invoice & Tariffs
     *
     * @description resend Invoice to specific email
     *
     * @param {string} invoice_id
     * @param {IResendEmail} body - Contains Json with values - values in Json is not requierd
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong 
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public invoiceResend(invoice_id:string, body:IResendEmail):Promise<IResultOk> {
        return this.requestRestPath("POST", `/invoice/resend/${invoice_id}`, body, [200]);
    }

    /**
     * @name invoiceSendReimbursement
     * @summary send Invoice reimbursement
     * @operationId invoice_reimbursement
     * @tags Price & Invoice & Tariffs
     *
     * @description reimbursement of an unpaid invoice - with settings from creating product before
     *
     * @param {string} invoice_id
     *
     * @returns {IInvoice} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public invoiceSendReimbursement(invoice_id:string):Promise<IInvoice> {
        return this.requestRestPath("POST", `/invoice/reimbursement/${invoice_id}`, {}, [200]);
    }

    /**
     * @name invoiceSendReminder
     * @summary send Invoice Reminder
     * @operationId invoice_reminder
     * @tags Admin-Invoice
     *
     * @description get PDF invoice file
     *
     * @param {string} invoice_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public invoiceSendReminder(invoice_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/invoice/send_remainder/${invoice_id}`, {}, [200]);
    }

    /**
     * @name libraryCreate
     * @summary create Library
     * @operationId library_create
     * @tags Library
     *
     * @description Create Library for C programs 
     *
     * @param {ILibraryNew} body - Contains Json with values
     *
     * @returns {ILibrary} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public libraryCreate(body:ILibraryNew):Promise<ILibrary> {
        return this.requestRestPath("POST", `/library`, body, [201]);
    }

    /**
     * @name libraryDelete
     * @summary delete Library
     * @operationId library_delete
     * @tags Library
     *
     * @description For remove Library
     *
     * @param {string} library_id - library_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public libraryDelete(library_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/library/${library_id}`, {}, [200]);
    }

    /**
     * @name libraryEdit
     * @summary edit Library
     * @operationId library_edit
     * @tags Library
     *
     * @description Edit Library name and description
     *
     * @param {string} library_id - library_id String query
     * @param {ILibraryNew} body - Contains Json with values
     *
     * @returns {ILibrary} [code 200] Successfully updated
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public libraryEdit(library_id:string, body:ILibraryNew):Promise<ILibrary> {
        return this.requestRestPath("PUT", `/library/${library_id}`, body, [200]);
    }

    /**
     * @name libraryGet
     * @summary get Library
     * @operationId library_get
     * @tags Library
     *
     * @description if you want to get Library.
     *
     * @param {string} library_id - library_id String query
     *
     * @returns {ILibrary} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public libraryGet(library_id:string):Promise<ILibrary> {
        return this.requestRestPath("GET", `/library/${library_id}`, {}, [200]);
    }

    /**
     * @name libraryGetShortListByFilter
     * @summary get Library Short List by filter
     * @operationId library_getByFilter
     * @tags Library
     *
     * @description if you want to get Libraries filtered by specific parameters. For private Libraries under project set project_id, for all public use empty JSON
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...n. For first call, use 1
     * @param {ILibraryFilter} body - Contains Json with values
     *
     * @returns {ILibraryList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public libraryGetShortListByFilter(page_number:number, body:ILibraryFilter):Promise<ILibraryList> {
        return this.requestRestPath("PUT", `/library/filter/${page_number}`, body, [200]);
    }

    /**
     * @name libraryMakeClone
     * @summary make_Clone Library
     * @operationId library_clone
     * @tags Library
     *
     * @description clone Library for private
     *
     * @param {ILibraryCopy} body - Contains Json with values
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public libraryMakeClone(body:ILibraryCopy):Promise<ICProgram> {
        return this.requestRestPath("PUT", `/library/clone`, body, [200]);
    }

    /**
     * @name libraryVersionCreate
     * @summary create Library_Version
     * @operationId library_version_create
     * @tags Library
     *
     * @description If you want add new code to Library
     *
     * @param {string} library_id - library_id String query
     * @param {ILibraryVersionNew} body - Contains Json with values
     *
     * @returns {ILibraryVersion} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public libraryVersionCreate(library_id:string, body:ILibraryVersionNew):Promise<ILibraryVersion> {
        return this.requestRestPath("POST", `/library/version/${library_id}`, body, [201]);
    }

    /**
     * @name libraryVersionDelete
     * @summary delete Library_Version
     * @operationId library_version_delete
     * @tags Library
     *
     * @description delete Library by query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public libraryVersionDelete(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/library/version/${version_id}`, {}, [200]);
    }

    /**
     * @name libraryVersionEdit
     * @summary edit Library_Version
     * @operationId library_version_edit
     * @tags Library
     *
     * @description For update basic (name and description) information in Version of Library. If you want update code. You have to create new version. And after that you can delete previous version
     *
     * @param {string} version_id - version_id String query
     * @param {ICProgramVersionEdit} body - Contains Json with values
     *
     * @returns {ILibraryVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public libraryVersionEdit(version_id:string, body:ICProgramVersionEdit):Promise<ILibraryVersion> {
        return this.requestRestPath("PUT", `/library/version/${version_id}`, body, [200]);
    }

    /**
     * @name libraryVersionEditResponsePublication
     * @summary edit Library_Version Response publication
     * @operationId library_public_response
     * @tags Admin-Library
     *
     * @description sets Approval_state to pending
     *
     * @param {ICommunityVersionPublishResponse} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public libraryVersionEditResponsePublication(body:ICommunityVersionPublishResponse):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/library/version_for_aprove/approve_decision`, body, [200]);
    }

    /**
     * @name libraryVersionGet
     * @summary get Library_Version
     * @operationId library_version_get
     * @tags Library
     *
     * @description get Version of Library by query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ILibraryVersion} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public libraryVersionGet(version_id:string):Promise<ILibraryVersion> {
        return this.requestRestPath("GET", `/library/version/${version_id}`, {}, [200]);
    }

    /**
     * @name libraryVersionMakePublic
     * @summary make Library_Version public
     * @operationId library_version_make_public
     * @tags Library
     *
     * @description Make Library public, so other users can see it and use it. Attention! Attention! Attention! A user can publish only three programs at the stage waiting for approval.
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Bad Request
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public libraryVersionMakePublic(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/library/version/make_public/${version_id}`, {}, [200]);
    }

    /**
     * @name mProgramCreate
     * @summary Create M_Program
     * @operationId new_M_Program
     * @tags M_Program
     *
     * @description creating new M_Program
     *
     * @param {string} m_project_id - m_project_id
     * @param {IMProgramNew} body - Contains Json with values
     *
     * @returns {IMProgram} [code 201] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProgramCreate(m_project_id:string, body:IMProgramNew):Promise<IMProgram> {
        return this.requestRestPath("POST", `/m_program/${m_project_id}`, body, [201]);
    }

    /**
     * @name mProgramDelete
     * @summary delete M_Program
     * @operationId remove_M_Program
     * @tags M_Program
     *
     * @description remove M_Program by quarry = m_program_id
     *
     * @param {string} m_progrm_id - m_program_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProgramDelete(m_progrm_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/m_program/${m_progrm_id}`, {}, [200]);
    }

    /**
     * @name mProgramEdit
     * @summary edit M_Program
     * @operationId edit_M_Program
     * @tags M_Program
     *
     * @description update m_project - in this case we are not support versions of m_project
     *
     * @param {string} m_progrm_id - m_program_id String query
     * @param {IMProgramNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProgramEdit(m_progrm_id:string, body:IMProgramNew):Promise<IMProject> {
        return this.requestRestPath("PUT", `/m_program/${m_progrm_id}`, body, [200]);
    }

    /**
     * @name mProgramGet
     * @summary get M_Program
     * @operationId get_M_Program
     * @tags M_Program
     *
     * @description get M_Program by quarry m_program_id
     *
     * @param {string} m_progrm_id - m_program_id String query
     *
     * @returns {IMProgram} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProgramGet(m_progrm_id:string):Promise<IMProgram> {
        return this.requestRestPath("GET", `/m_program/${m_progrm_id}`, {}, [200]);
    }

    /**
     * @name mProgramGetByGeneratedToken
     * @summary get M_Program by generated token
     * @operationId get_M_Program_byQR_Token_forMobile
     * @tags APP-Api
     *
     * @description get M_Program by token
     *
     * @param {string} qr_token
     *
     * @returns {ITerminalConnectionSummary} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Bad Request - Probably token is not valid anymore
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IServerOffline} [code 477] External Server is offline
     * @throws [code 500] Server side Error
     */
    public mProgramGetByGeneratedToken(qr_token:string):Promise<ITerminalConnectionSummary> {
        return this.requestRestPath("GET", `/m_program/app/token/${qr_token}`, {}, [200]);
    }

    /**
     * @name mProgramVersionCreate
     * @summary Create M_Program_Version
     * @operationId new_M_Program_version
     * @tags M_Program
     *
     * @description creating new Version M_Program
     *
     * @param {string} m_program_id - m_program_id
     * @param {IMProgramVersionNew} body - Contains Json with values
     *
     * @returns {IMProgramVersion} [code 201] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProgramVersionCreate(m_program_id:string, body:IMProgramVersionNew):Promise<IMProgramVersion> {
        return this.requestRestPath("POST", `/m_program/version/${m_program_id}`, body, [201]);
    }

    /**
     * @name mProgramVersionDelete
     * @summary delete M_Program_Version
     * @operationId remove_M_Program_version
     * @tags M_Program
     *
     * @description remove version of M_Program
     *
     * @param {string} m_program_version_id - m_program_version_id
     *
     * @returns {IResultOk|IResult} [code 200|201] Successfully created|successful operation
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProgramVersionDelete(m_program_version_id:string):Promise<IResultOk|IResult> {
        return this.requestRestPath("DELETE", `/m_program/version/${m_program_version_id}`, {}, [200,201]);
    }

    /**
     * @name mProgramVersionEdit
     * @summary edit M_Program_Version
     * @operationId edit_M_Program_version
     * @tags M_Program
     *
     * @description edit M_Program_Version by quarry = m_program_version_id
     *
     * @param {string} m_program_version_id - m_program_version_id String query
     * @param {IMProgramVersionEdit} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProgramVersionEdit(m_program_version_id:string, body:IMProgramVersionEdit):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/m_program/version/${m_program_version_id}`, body, [200]);
    }

    /**
     * @name mProgramVersionGet
     * @summary get M_Program_Version
     * @operationId get_M_Program_version
     * @tags M_Program
     *
     * @description get M_Program_Version by quarry m_program_version_id
     *
     * @param {string} m_program_version_id - m_program_version_id String query
     *
     * @returns {IMProgramVersion} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProgramVersionGet(m_program_version_id:string):Promise<IMProgramVersion> {
        return this.requestRestPath("GET", `/m_program/version/${m_program_version_id}`, {}, [200]);
    }

    /**
     * @name mProjectCreate
     * @summary Create M_Project
     * @operationId new_M_Project
     * @tags M_Program
     *
     * @description M_Project is package for M_Programs -> presupposition is that you need more control terminal for your IoT project. Different screens for family members, for employee etc.. But of course - you can used that for only one M_program
     *
     * @param {string} project_id
     * @param {IMProjectNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Some Json value Missing
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProjectCreate(project_id:string, body:IMProjectNew):Promise<IMProject> {
        return this.requestRestPath("POST", `/m_project/${project_id}`, body, [201]);
    }

    /**
     * @name mProjectDelete
     * @summary delete M_Project
     * @operationId remove_M_Project
     * @tags M_Program
     *
     * @description remove M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProjectDelete(m_project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/m_project/${m_project_id}`, {}, [200]);
    }

    /**
     * @name mProjectEdit
     * @summary edit M_Project
     * @operationId edit_M_Project
     * @tags M_Program
     *
     * @description edit basic information in M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     * @param {IMProjectNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProjectEdit(m_project_id:string, body:IMProjectNew):Promise<IMProject> {
        return this.requestRestPath("PUT", `/m_project/${m_project_id}`, body, [200]);
    }

    /**
     * @name mProjectGet
     * @summary get M_Project
     * @operationId get_M_Project
     * @tags M_Program
     *
     * @description get M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProjectGet(m_project_id:string):Promise<IMProject> {
        return this.requestRestPath("GET", `/m_project/${m_project_id}`, {}, [200]);
    }

    /**
     * @name mProjectGetAccessibleInterface
     * @summary get M_Project Accessible interface
     * @operationId get_M_Project_Interface_collection
     * @tags M_Program
     *
     * @description get accessible interface from M_Project
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IMProjectInterface} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public mProjectGetAccessibleInterface(m_project_id:string):Promise<IMProjectInterface> {
        return this.requestRestPath("GET", `/m_project/interface_collection/${m_project_id}`, {}, [200]);
    }

    /**
     * @name notificationConfirm
     * @summary confirm Notification
     * @operationId notification_confirm
     * @tags Notifications
     *
     * @description Confirms notification
     *
     * @param {string} notification_id - notification_id String path
     * @param {INotificationConfirm} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public notificationConfirm(notification_id:string, body:INotificationConfirm):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/notification/confirm/${notification_id}`, body, [200]);
    }

    /**
     * @name notificationDelete
     * @summary delete Notification
     * @operationId notification_delete
     * @tags Notifications
     *
     * @description remove notification by id
     *
     * @param {string} notification_id - notification_id String path
     *
     * @returns {IResultOk} [code 200] Delete Successful
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public notificationDelete(notification_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/notification/${notification_id}`, {}, [200]);
    }

    /**
     * @name notificationGetLatest
     * @summary get Notification latest
     * @operationId notification_getByFilter
     * @tags Notifications
     *
     * @description Get list of latest user notifications. Server return maximum 25 latest objects. 
     *    
     *     For get another page (next 25 notifications) call this api with "page_number" path parameter. 
     *    
     *     May missing or you can insert Integer values from page[1,2...,n] in JsonNotification body cannot by documented through swagger. Visit wiki.byzance.cz
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...  For first call, use 1
     *
     * @returns {INotificationList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public notificationGetLatest(page_number:number):Promise<INotificationList> {
        return this.requestRestPath("GET", `/notification/list/${page_number}`, {}, [200]);
    }

    /**
     * @name notificationsGetUnconfirmed
     * @summary get Notifications unconfirmed
     * @operationId notifications_getUnconfirmed
     * @tags Notifications
     *
     * @description This API should by called right after user logs in. Sends notifications which require confirmation via websocket.
     *
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public notificationsGetUnconfirmed():Promise<IResultOk> {
        return this.requestRestPath("GET", `/notification/unconfirmed`, {}, [200]);
    }

    /**
     * @name notificationsMarkAsRead
     * @summary mark Notifications as read
     * @operationId notification_read
     * @tags Notifications
     *
     * @description Mark notifications as read. Send list with ids
     *
     * @param {INotificationRead} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully marked as read
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public notificationsMarkAsRead(body:INotificationRead):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/notification/read`, body, [200]);
    }

    /**
     * @name onTerminateDemand
     * @summary terminate on demand
     * @operationId product_terminateOnDemand
     * @tags Price & Invoice & Tariffs
     *
     * @description cancel automatic payments in Product
     *
     * @param {string} product_id
     *
     * @returns {IResultOk} [code 200] Successfully updated
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public onTerminateDemand(product_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/product/terminate_ondemand/${product_id}`, {}, [200]);
    }

    /**
     * @name permissionAddToPerson
     * @summary add Permission to Person
     * @operationId permission_person_add
     * @tags Admin-Permission
     *
     * @description If you want add permission to Person. You need permission for that or have right system Roles
     *
     * @param {string} person_id
     * @param {string} permission_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public permissionAddToPerson(person_id:string, permission_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/secure/permission/person/${person_id}/${permission_id}`, {}, [200]);
    }

    /**
     * @name permissionEdit
     * @summary edit Permission
     * @operationId permission_edit
     * @tags Admin-Permission
     *
     * @description edit permission description
     *
     * @param {string} permission_id
     * @param {IPermissionEdit} body - Contains Json with values
     *
     * @returns {IPermission[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public permissionEdit(permission_id:string, body:IPermissionEdit):Promise<IPermission[]> {
        return this.requestRestPath("PUT", `/secure/permission/${permission_id}`, body, [200]);
    }

    /**
     * @name permissionRemoveFromPerson
     * @summary remove Permission from Person
     * @operationId permission_person_remove
     * @tags Admin-Permission
     *
     * @description If you want remove permission from Person. You need permission for that or have right system Roles
     *
     * @param {string} person_id
     * @param {string} permission_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public permissionRemoveFromPerson(person_id:string, permission_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/secure/permission/person/${person_id}/${permission_id}`, {}, [200]);
    }

    /**
     * @name permissionsGetAll
     * @summary get Permissions All
     * @operationId permission_get_all
     * @tags Admin-Permission
     *
     * @description Get all user Permission. You need permission for that or have right system Roles
     *
     *
     * @returns {IPermission[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public permissionsGetAll():Promise<IPermission[]> {
        return this.requestRestPath("GET", `/secure/permission/all`, {}, [200]);
    }

    /**
     * @name personActivate
     * @summary activate Person
     * @operationId person_activate
     * @tags Admin-Person
     *
     * @description activate Person by id
     *
     * @param {string} person_id - person_id String query
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personActivate(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/activate/${person_id}`, {}, [200]);
    }

    /**
     * @name personCreate
     * @summary create Person
     * @operationId person_create
     * @tags Person
     *
     * @description create new Person with unique email and nick_name
     *
     * @param {IPersonNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personCreate(body:IPersonNew):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person`, body, [200]);
    }

    /**
     * @name personDeactivate
     * @summary deactivate Person
     * @operationId person_deactivate
     * @tags Admin-Person
     *
     * @description deactivate Person by id
     *
     * @param {string} person_id - person_id String query
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personDeactivate(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/deactivate/${person_id}`, {}, [200]);
    }

    /**
     * @name personDelete
     * @summary delete Person
     * @operationId person_delete
     * @tags Admin-Person
     *
     * @description delete Person by id
     *
     * @param {string} person_id - person_id String query
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personDelete(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/person/${person_id}`, {}, [200]);
    }

    /**
     * @name personDeleteLoggedConnections
     * @summary delete Person logged connections
     * @operationId remove_Person_Connection
     * @tags Person
     *
     * @description You know where the user is logged in. And you can log out this connection. (Terminate token)
     *
     * @param {string} connection_id - connection_id String query
     *
     * @returns {IResultOk} [code 200] OK result
     *
     * @throws {INotFound} [code 404] Not Found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personDeleteLoggedConnections(connection_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/person/connection/${connection_id}`, {}, [200]);
    }

    /**
     * @name personDeletePicture
     * @summary delete Person picture
     * @operationId person_removePicture
     * @tags Person
     *
     * @description Removes picture of logged person
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personDeletePicture():Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/picture/remove`, {}, [200]);
    }

    /**
     * @name personEdit
     * @summary edit Person
     * @operationId person_update
     * @tags Person
     *
     * @description Edit person basic information
     *
     * @param {string} person_id - person_id String query
     * @param {IPersonUpdate} body - Contains Json with values
     *
     * @returns {IPerson} [code 200] Successfully updated
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personEdit(person_id:string, body:IPersonUpdate):Promise<IPerson> {
        return this.requestRestPath("PUT", `/person/${person_id}`, body, [200]);
    }

    /**
     * @name personEditProperty
     * @summary edit Person property
     * @operationId person_changeLoginProperty
     * @tags Person
     *
     * @description Request password or email change. API does not change password or email, only sends email for authorization of the change and holds values in different object.JSON value 'property' contains only 'password' or 'email'
     *
     * @param {IPersonChangeProperty} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personEditProperty(body:IPersonChangeProperty):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person/change_property`, body, [200]);
    }

    /**
     * @name personEmailApprovingPasswordOrChange
     * @summary email Person approving password or email change
     * @operationId person_authorizePropertyChange
     * @tags Admin-Person
     *
     * @param {string} token
     * @param {IPersonChangeProperty} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personEmailApprovingPasswordOrChange(token:string, body:IPersonChangeProperty):Promise<IResultOk> {
        return this.requestRestPath("GET", `/person/authorize_change/${token}`, body, [200]);
    }

    /**
     * @name personGet
     * @summary get Person
     * @operationId person_get
     * @tags Person
     *
     * @description get Person by id
     *
     * @param {string} person_id - person_id String query
     *
     * @returns {IPerson} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personGet(person_id:string):Promise<IPerson> {
        return this.requestRestPath("GET", `/person/${person_id}`, {}, [200]);
    }

    /**
     * @name personGetByToken
     * @summary get Person by token
     * @operationId person_get_by_token
     * @tags Access, Person, Social-GitHub, Social-Facebook
     *
     * @description If you want login to system with social networks - you can used facebook, github or twitter api just ask for token, server responds with object where is token and redirection link. Redirect user to this link and after returning to success page that you filled in ask for token, ask again to this api and server respond with Person Object and with Roles and Permissions lists
     *
     *
     * @returns {ILoginResult} [code 200] Successfully logged
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personGetByToken():Promise<ILoginResult> {
        return this.requestRestPath("GET", `/login/person`, {}, [200]);
    }

    /**
     * @name personGetLoggedConnections
     * @summary get Person logged connections
     * @operationId person_getAllConnections
     * @tags Person
     *
     * @description get all connections, where user is logged
     *
     *
     * @returns {IFloatingPersonToken[]} [code 200] OK result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not Found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personGetLoggedConnections():Promise<IFloatingPersonToken[]> {
        return this.requestRestPath("GET", `/person/connection/all`, {}, [200]);
    }

    /**
     * @name personGetRolesAndPermissions
     * @summary get Person Roles and Permissions
     * @operationId system_access_get_everything
     * @tags Admin-Role, Admin-Permission, Person
     *
     * @description This api return List of Roles and List of Permission
     *
     * @param {string} person_id
     *
     * @returns {ISystemAccess} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public personGetRolesAndPermissions(person_id:string):Promise<ISystemAccess> {
        return this.requestRestPath("GET", `/secure/person/system_acces/${person_id}`, {}, [200]);
    }

    /**
     * @name personRestartPassword
     * @summary restart Person password
     * @operationId person_passwordRecovery
     * @tags Access
     *
     * @description changes password if password_recovery_token is not older than 24 hours, deletes all FloatingPersonTokens
     *
     * @param {IPersonPasswordNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personRestartPassword(body:IPersonPasswordNew):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/password/recovery`, body, [200]);
    }

    /**
     * @name personUploadPicture
     * @summary upload Person picture
     * @operationId person_uploadPicture
     * @tags Person
     *
     * @description Uploads personal photo. Picture must be smaller than 800 KB and its dimensions must be between 50 and 400 pixels. If user already has a picture, it will be replaced by the new one. API requires base64 Content-Type, name of the property is 'file'.
     *
     * @param {IBase64File} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personUploadPicture(body:IBase64File):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/picture/upload`, body, [200]);
    }

    /**
     * @name personValidEmail
     * @summary valid Person email
     * @operationId person_validEmail
     * @tags Admin-Person
     *
     * @description valid Person email by id
     *
     * @param {string} person_id - person_id String query
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public personValidEmail(person_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/valid_email/${person_id}`, {}, [200]);
    }

    /**
     * @name printerGetOnlineState
     * @summary get_Online_State Printer
     * @operationId online_state_Printer
     * @tags Garfield
     *
     * @description get online state Printer by ID
     *
     * @param {string} garfield_id
     * @param {number} printer_id
     *
     * @returns {IPrinter} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public printerGetOnlineState(garfield_id:string, printer_id:number):Promise<IPrinter> {
        return this.requestRestPath("GET", `/printer/printer/${garfield_id}/${printer_id}`, {}, [200]);
    }

    /**
     * @name printerTestprinting
     * @summary test_printing Printer
     * @operationId print_test_Printer
     * @tags Garfield
     *
     * @description Random Generated Print test
     *
     * @param {string} garfield_id
     * @param {number} printer_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public printerTestprinting(garfield_id:string, printer_id:number):Promise<IResultOk> {
        return this.requestRestPath("POST", `/printer/test/${garfield_id}/${printer_id}`, {}, [200]);
    }

    /**
     * @name processorCreate
     * @summary create Processor
     * @operationId processor_create
     * @tags Admin-Processor
     *
     * @description If you want create new Processor. Send required json values and server respond with new object
     *
     * @param {IProcessorNew} body - Contains Json with values
     *
     * @returns {IProcessor} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public processorCreate(body:IProcessorNew):Promise<IProcessor> {
        return this.requestRestPath("POST", `/processor`, body, [201]);
    }

    /**
     * @name processorDelete
     * @summary delete Processor
     * @operationId processor_delete
     * @tags Admin-Processor
     *
     * @description If you want delete Processor by query processor_id.
     *
     * @param {string} processor_id - processor_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public processorDelete(processor_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/processor/${processor_id}`, {}, [200]);
    }

    /**
     * @name processorEdit
     * @summary edit Processor
     * @operationId processor_edit
     * @tags Processor
     *
     * @description If you want update Processor.id by query = processor_id . Send required json values and server respond with update object
     *
     * @param {string} processor_id - processor_id String query
     * @param {IProcessorNew} body - Contains Json with values
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public processorEdit(processor_id:string, body:IProcessorNew):Promise<IProcessor> {
        return this.requestRestPath("PUT", `/processor/${processor_id}`, body, [200]);
    }

    /**
     * @name processorGet
     * @summary get Processor
     * @operationId processor_get
     * @tags Processor
     *
     * @description If you get Processor by query processor_id.
     *
     * @param {string} processor_id - processor_id String query
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public processorGet(processor_id:string):Promise<IProcessor> {
        return this.requestRestPath("GET", `/processor/${processor_id}`, {}, [200]);
    }

    /**
     * @name processorGetAll
     * @summary get Processor All
     * @operationId processor_getAll
     * @tags Processor
     *
     * @description Get list of all Processor by query
     *
     *
     * @returns {IProcessor[]} [code 200] Ok Result
     *
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public processorGetAll():Promise<IProcessor[]> {
        return this.requestRestPath("GET", `/processor`, {}, [200]);
    }

    /**
     * @name producerCreate
     * @summary create Producer
     * @operationId producer_create
     * @tags Admin-Producer
     *
     * @description if you want create new Producer. Its company owned physical boards and we used that for filtering
     *
     * @param {IProducerNew} body - Contains Json with values
     *
     * @returns {IProducer} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public producerCreate(body:IProducerNew):Promise<IProducer> {
        return this.requestRestPath("POST", `/producer`, body, [201]);
    }

    /**
     * @name producerDelete
     * @summary delete Producer
     * @operationId producer_delete
     * @tags Admin-Producer
     *
     * @description if you want delete Producer
     *
     * @param {string} producer_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public producerDelete(producer_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/producer/${producer_id}`, {}, [200]);
    }

    /**
     * @name producerEdit
     * @summary edit Producer
     * @operationId producer_update
     * @tags Admin-Producer
     *
     * @description if you want edit information about Producer. Its company owned physical boards and we used that for filtering
     *
     * @param {string} producer_id
     * @param {IProducerNew} body - Contains Json with values
     *
     * @returns {IProducer} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public producerEdit(producer_id:string, body:IProducerNew):Promise<IProducer> {
        return this.requestRestPath("PUT", `/producer/${producer_id}`, body, [200]);
    }

    /**
     * @name producerGet
     * @summary get Producer
     * @operationId producer_get
     * @tags Producer
     *
     * @description if you want get Producer. Its company owned physical boards and we used that for filtering
     *
     * @param {string} producer_id
     *
     * @returns {IProducer} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public producerGet(producer_id:string):Promise<IProducer> {
        return this.requestRestPath("GET", `/producer/${producer_id}`, {}, [200]);
    }

    /**
     * @name producersGetAll
     * @summary get Producers All
     * @operationId producer_getAll
     * @tags Producer
     *
     * @description if you want get list of Producers. Its list of companies owned physical boards and we used that for filtering
     *
     *
     * @returns {IProducer[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public producersGetAll():Promise<IProducer[]> {
        return this.requestRestPath("GET", `/producer/all`, {}, [200]);
    }

    /**
     * @name productActivate
     * @summary activate Product
     * @operationId product_activate
     * @tags Price & Invoice & Tariffs
     *
     * @description Activate product Tariff and deactivate all staff around that
     *
     * @param {string} product_id
     *
     * @returns {IProduct} [code 200] Activating was successful
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productActivate(product_id:string):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/activate/${product_id}`, {}, [200]);
    }

    /**
     * @name productCreate
     * @summary create Product
     * @operationId product_create
     * @tags Price & Invoice & Tariffs
     *
     * @description It is the base object. Peak of Pyramid :). This Api is used for its creation. You can get two kind of response: 
     *    
     *    First(201):  System create new Object - Product 
     *    
     *    Second(200): The product requires payment - The server creates the object, but returns an Invoice 
     *    
     *    If the user choose credit card payment, the invoice will contain gw_url, which is a link to the payment gate, you can redirect him there. If bank transfer is chosen, server will return an Invoice, but the user will pay it independently via his bank account.
     *
     * @param {IProductNew} body - Contains Json with values
     *
     * @returns {IProduct} [code 201] Created successfully
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productCreate(body:IProductNew):Promise<IProduct> {
        return this.requestRestPath("POST", `/product`, body, [201]);
    }

    /**
     * @name productCreatePaymentDetails
     * @summary create Product payment details
     * @operationId paymentDetails_create
     * @tags Price & Invoice & Tariffs
     *
     * @description create payments details in Product
     *
     * @param {string} product_id
     * @param {IPaymentDetailsNew} body - Contains Json with values
     *
     * @returns {IPaymentDetails} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productCreatePaymentDetails(product_id:string, body:IPaymentDetailsNew):Promise<IPaymentDetails> {
        return this.requestRestPath("POST", `/product/details/${product_id}`, body, [201]);
    }

    /**
     * @name productDeactivate
     * @summary deactivate Product
     * @operationId product_deactivate
     * @tags Price & Invoice & Tariffs
     *
     * @description deactivate product Tariff and deactivate all stuff under it
     *
     * @param {string} product_id
     *
     * @returns {IProduct} [code 200] Deactivating was successful
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productDeactivate(product_id:string):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/deactivate/${product_id}`, {}, [200]);
    }

    /**
     * @name productDeleteTariff
     * @summary delete Product Tariff
     * @operationId product_delete
     * @tags Admin
     *
     * @description get PDF invoice file
     *
     * @param {string} product_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public productDeleteTariff(product_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/product/${product_id}`, {}, [200]);
    }

    /**
     * @name productEditDetails
     * @summary edit Product details
     * @operationId product_update
     * @tags Price & Invoice & Tariffs
     *
     * @description edit basic details of Product
     *
     * @param {string} product_id
     * @param {IProductEdit} body - Contains Json with values
     *
     * @returns {IProduct} [code 200] Successfully updated
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productEditDetails(product_id:string, body:IProductEdit):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/general/${product_id}`, body, [200]);
    }

    /**
     * @name productEditPaymentDetails
     * @summary edit Product payment details
     * @operationId paymentDetails_update
     * @tags Price & Invoice & Tariffs
     *
     * @description edit payments details in Product
     *
     * @param {number} payment_details_id
     * @param {IPaymentDetailsNew} body - Contains Json with values
     *
     * @returns {IPaymentDetails} [code 200] Successfully updated
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productEditPaymentDetails(payment_details_id:number, body:IPaymentDetailsNew):Promise<IPaymentDetails> {
        return this.requestRestPath("PUT", `/product/details/${payment_details_id}`, body, [200]);
    }

    /**
     * @name productExtensionActivate
     * @summary activate Product_Extension
     * @operationId productExtension_activate
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public productExtensionActivate(extension_id:string):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/product_extension/activate/${extension_id}`, {}, [200]);
    }

    /**
     * @name productExtensionCreate
     * @summary create Product_Extension
     * @operationId productExtension_create
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} product_id
     * @param {IProductExtensionNew} body - Contains Json with values
     *
     * @returns {IProductExtension} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public productExtensionCreate(product_id:string, body:IProductExtensionNew):Promise<IProductExtension> {
        return this.requestRestPath("POST", `/product_extension/${product_id}`, body, [201]);
    }

    /**
     * @name productExtensionDeactivate
     * @summary deactivate Product_Extension
     * @operationId productExtension_deactivate
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public productExtensionDeactivate(extension_id:string):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/product_extension/deactivate/${extension_id}`, {}, [200]);
    }

    /**
     * @name productExtensionDelete
     * @summary delete Product_Extension
     * @operationId productExtension_delete
     * @tags Admin-Extension
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public productExtensionDelete(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/product_extension/${extension_id}`, {}, [200]);
    }

    /**
     * @name productExtensionGet
     * @summary get Product_Extension
     * @operationId productExtension_get
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public productExtensionGet(extension_id:string):Promise<IProductExtension> {
        return this.requestRestPath("GET", `/product_extension/${extension_id}`, {}, [200]);
    }

    /**
     * @name productExtensionGetListUserOwn
     * @summary get Product_Extension List user Own
     * @operationId productExtension_getAll
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     *
     * @returns {IProductExtension[]} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public productExtensionGetListUserOwn():Promise<IProductExtension[]> {
        return this.requestRestPath("GET", `/product_extension`, {}, [200]);
    }

    /**
     * @name productExtensionUpdate
     * @summary update Product_Extension
     * @operationId productExtension_update
     * @tags Price & Invoice & Tariffs
     *
     * @description Updates extension. User can change name, description or color.
     *
     * @param {string} extension_id
     * @param {IProductExtensionEdit} body - Contains Json with values
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public productExtensionUpdate(extension_id:string, body:IProductExtensionEdit):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/product_extension/${extension_id}`, body, [200]);
    }

    /**
     * @name productGet
     * @summary get Product
     * @operationId product_get
     * @tags Price & Invoice & Tariffs
     *
     * @param {string} product_id
     *
     * @returns {IProduct} [code 200] List of users Products
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productGet(product_id:string):Promise<IProduct> {
        return this.requestRestPath("GET", `/product/${product_id}`, {}, [200]);
    }

    /**
     * @name productsGetUserCanUsed
     * @summary get Products user can used
     * @operationId product_getActive
     * @tags Price & Invoice & Tariffs
     *
     * @description get all the products that the user can use when creating new projects
     *
     *
     * @returns {IApplicableProduct[]} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productsGetUserCanUsed():Promise<IApplicableProduct[]> {
        return this.requestRestPath("GET", `/product/list/user_applicable`, {}, [200]);
    }

    /**
     * @name productsGetUserOwnList
     * @summary get Products user Own List
     * @operationId product_getAll
     * @tags Price & Invoice & Tariffs
     *
     *
     * @returns {IProduct[]} [code 200] List of users Products
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productsGetUserOwnList():Promise<IProduct[]> {
        return this.requestRestPath("GET", `/product/all`, {}, [200]);
    }

    /**
     * @name projectChangeParticipantStatus
     * @summary change Project participant status
     * @operationId project_changeParticipantStatus
     * @tags Project
     *
     * @description Changes participant status 
     *
     * @param {string} project_id - project_id String path
     * @param {IProjectParticipantStatus} body - Contains Json with values
     *
     * @returns {IProjectParticipant} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public projectChangeParticipantStatus(project_id:string, body:IProjectParticipantStatus):Promise<IProjectParticipant> {
        return this.requestRestPath("PUT", `/project/change_participant_state/${project_id}`, body, [200]);
    }

    /**
     * @name projectCreate
     * @summary create Project
     * @operationId project_create
     * @tags Project
     *
     * @description create new Project
     *
     * @param {IProjectNew} body - Contains Json with values
     *
     * @returns {IProject} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public projectCreate(body:IProjectNew):Promise<IProject> {
        return this.requestRestPath("POST", `/project`, body, [201]);
    }

    /**
     * @name projectDelete
     * @summary delete Project
     * @operationId project_delete
     * @tags Project
     *
     * @description delete Projects by project_id
     *
     * @param {string} project_id - project_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public projectDelete(project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/${project_id}`, {}, [200]);
    }

    /**
     * @name projectEdit
     * @summary edit Project
     * @operationId project_update
     * @tags Project
     *
     * @description edit ne Project
     *
     * @param {string} project_id - project_id String path
     * @param {IProjectEdit} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public projectEdit(project_id:string, body:IProjectEdit):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/${project_id}`, body, [200]);
    }

    /**
     * @name projectGet
     * @summary get Project
     * @operationId project_get
     * @tags Project
     *
     * @description get Projects by project_id
     *
     * @param {string} project_id - project_id String path
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public projectGet(project_id:string):Promise<IProject> {
        return this.requestRestPath("GET", `/project/${project_id}`, {}, [200]);
    }

    /**
     * @name projectGetByLoggedPerson
     * @summary get Project by logged Person
     * @operationId project_getByUser
     * @tags Project
     *
     * @description get all Projects by logged Person
     *
     *
     * @returns {IProjectShortDetail[]} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public projectGetByLoggedPerson():Promise<IProjectShortDetail[]> {
        return this.requestRestPath("GET", `/project`, {}, [200]);
    }

    /**
     * @name projectShare
     * @summary share Project
     * @operationId project_invite
     * @tags Project
     *
     * @description sends Invitation to all users in list: List<persons_mail>
     *
     * @param {string} project_id - project_id String path
     * @param {IInvitePerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public projectShare(project_id:string, body:IInvitePerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/shareProject/${project_id}`, body, [200]);
    }

    /**
     * @name projectUnshare
     * @summary unshare Project
     * @operationId project_removeParticipant
     * @tags Project
     *
     * @description unshare Project with all users in list: List<person_id>
     *
     * @param {string} project_id - project_id String path
     * @param {IInvitePerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public projectUnshare(project_id:string, body:IInvitePerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/unshareProject/${project_id}`, body, [200]);
    }

    /**
     * @name reportAdminDashboardGet
     * @summary get Report_Admin_Dashboard
     * @operationId report_admin_dashboard
     * @tags Admin-Report
     *
     *
     * @returns {IReportAdminDashboard} [code 200] Successfully removed
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public reportAdminDashboardGet():Promise<IReportAdminDashboard> {
        return this.requestRestPath("GET", `/admin/report/dashboard`, {}, [200]);
    }

    /**
     * @name reportBug
     * @summary Bug report
     * @operationId serverError_report
     * @tags Admin-Report
     *
     * @description Reports bug to YouTrack.
     *
     * @param {string} bug_id - bug_id String path
     *
     * @returns {IServerError} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public reportBug(bug_id:string):Promise<IServerError> {
        return this.requestRestPath("PUT", `/admin/bug/report/${bug_id}`, {}, [200]);
    }

    /**
     * @name roleAddPermissions
     * @summary add Role Permissions
     * @operationId permission_add_to_role
     * @tags Admin-Permission, Admin-Role
     *
     * @description If you want add system person_permissions to Role. You need permission for that or have right system Roles
     *
     * @param {string} role_id
     * @param {IRoleAddPermission} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public roleAddPermissions(role_id:string, body:IRoleAddPermission):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/secure/role/permission/${role_id}`, body, [200]);
    }

    /**
     * @name roleAddPerson
     * @summary add Role Person
     * @operationId role_add_person
     * @tags Admin-Role, Admin-Person
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     * @param {string} role_id
     * @param {IInvitePerson} body - Contains Json with values
     *
     * @returns {ISecurityRole} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public roleAddPerson(role_id:string, body:IInvitePerson):Promise<ISecurityRole> {
        return this.requestRestPath("PUT", `/secure/role/person/${role_id}`, body, [200]);
    }

    /**
     * @name roleCreate
     * @summary create Role
     * @operationId role_create
     * @tags Admin-Role
     *
     * @description If you want create new Role in system. You need permission for that or have right system Roles
     *
     * @param {ISecurityRoleNew} body - Contains Json with values
     *
     * @returns {ISecurityRole} [code 201] Successfully created
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public roleCreate(body:ISecurityRoleNew):Promise<ISecurityRole> {
        return this.requestRestPath("POST", `/secure/role`, body, [201]);
    }

    /**
     * @name roleDelete
     * @summary delete Role
     * @operationId role_delete
     * @tags Admin-Role
     *
     * @description If you want delete  Role from system. You need permission for that or have right system Roles
     *
     * @param {string} role_id
     *
     * @returns {IResultOk} [code 200] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public roleDelete(role_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/secure/role/${role_id}`, {}, [200]);
    }

    /**
     * @name roleEdit
     * @summary edit Role
     * @operationId role_edit
     * @tags Admin-Role
     *
     * @description edit description
     *
     * @param {string} role_id
     * @param {IRoleEdit} body - Contains Json with values
     *
     * @returns {ISecurityRole} [code 200] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public roleEdit(role_id:string, body:IRoleEdit):Promise<ISecurityRole> {
        return this.requestRestPath("PUT", `/secure/role/${role_id}`, body, [200]);
    }

    /**
     * @name roleGet
     * @summary get Role
     * @operationId role_get
     * @tags Admin-Role
     *
     * @description get description
     *
     * @param {string} role_id
     *
     * @returns {ISecurityRole} [code 200] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public roleGet(role_id:string):Promise<ISecurityRole> {
        return this.requestRestPath("GET", `/secure/role/${role_id}`, {}, [200]);
    }

    /**
     * @name roleGetAll
     * @summary get Role All
     * @operationId role_get_all
     * @tags Admin-Role
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     *
     * @returns {IRoleShortDetai[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public roleGetAll():Promise<IRoleShortDetai[]> {
        return this.requestRestPath("GET", `/secure/roles`, {}, [200]);
    }

    /**
     * @name roleRemovePermission
     * @summary remove Role Permission
     * @operationId permission_remove_from_role
     * @tags Admin-Permission, Admin-Role
     *
     * @description If you want remove system person_permissions from Role. You need permission for that or have right system Roles
     *
     * @param {string} permission_id
     * @param {string} role_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public roleRemovePermission(permission_id:string, role_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/secure/role/permission/${permission_id}/${role_id}`, {}, [200]);
    }

    /**
     * @name roleRemovePerson
     * @summary remove Role Person 
     * @operationId role_remove_person
     * @tags Admin-Role, Admin-Person
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     * @param {string} role_id
     * @param {string} person_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public roleRemovePerson(role_id:string, person_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/secure/role/person/${role_id}/${person_id}`, {}, [200]);
    }

    /**
     * @name serverGetUpdates
     * @summary get server updates
     * @operationId server_getUpdates
     * @tags Admin
     *
     *
     * @returns {IServerUpdates} [code 200] OK Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public serverGetUpdates():Promise<IServerUpdates> {
        return this.requestRestPath("GET", `/admin/update`, {}, [200]);
    }

    /**
     * @name serverUpdateServerComponent
     * @summary update Server Server_Component
     * @operationId server_scheduleUpdate
     * @tags Admin
     *
     * @param {IServerUpdate} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public serverUpdateServerComponent(body:IServerUpdate):Promise<IResultOk> {
        return this.requestRestPath("POST", `/admin/update`, body, [200]);
    }

    /**
     * @name tariffActivate
     * @summary activate Tariff
     * @operationId tariff_activate
     * @tags Admin-Tariff
     *
     * @description activate Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffActivate(tariff_id:string):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/tariff/active/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffCreate
     * @summary create Tariff
     * @operationId tariff_create
     * @tags Admin-Tariff
     *
     * @description create new Tariff
     *
     * @param {ITariffNew} body - Contains Json with values
     *
     * @returns {ITariff} [code 201] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffCreate(body:ITariffNew):Promise<ITariff> {
        return this.requestRestPath("POST", `/admin/tariff`, body, [201]);
    }

    /**
     * @name tariffDeactivate
     * @summary deactivate Tariff
     * @operationId tariff_deactivate
     * @tags Admin-Tariff
     *
     * @description deactivate Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffDeactivate(tariff_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff/deactive/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffDelete
     * @summary delete Tariff
     * @operationId tariff_delete
     * @tags Admin-Tariff
     *
     * @description activate Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffDelete(tariff_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/tariff/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffEdit
     * @summary edit Tariff
     * @operationId tariff_edit
     * @tags Admin-Tariff
     *
     * @description create new Tariff
     *
     * @param {string} tariff_id
     * @param {ITariffNew} body - Contains Json with values
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffEdit(tariff_id:string, body:ITariffNew):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/tariff/edit/${tariff_id}`, body, [200]);
    }

    /**
     * @name tariffExtensionActive
     * @summary active Tariff_Extension
     * @operationId tariffExtension_activate
     * @tags Admin-Extension
     *
     * @description order Tariff_Extension Down
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionActive(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/active/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffExtensionCreate
     * @summary create Tariff_Extension
     * @operationId tariffExtension_create
     * @tags Admin-Extension
     *
     * @param {string} tariff_id
     * @param {ITariffExtensionNew} body - Contains Json with values
     *
     * @returns {IProductExtension} [code 201] Successfully created
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public tariffExtensionCreate(tariff_id:string, body:ITariffExtensionNew):Promise<IProductExtension> {
        return this.requestRestPath("POST", `/admin/tariff_extension/${tariff_id}`, body, [201]);
    }

    /**
     * @name tariffExtensionDeactivate
     * @summary deactivate Tariff_Extension
     * @operationId tariffExtension_deactivate
     * @tags Admin-Extension
     *
     * @description order Tariff_Extension Down
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionDeactivate(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/deactive/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffExtensionDelete
     * @summary delete Tariff_Extension
     * @operationId tariffExtension_delete
     * @tags Admin-Extension
     *
     * @description order Tariff_Extension Down
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionDelete(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/admin/tariff_extension/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffExtensionEdit
     * @summary edit Tariff_Extension
     * @operationId tariffExtension_update
     * @tags Admin-Extension
     *
     * @description create new Tariff
     *
     * @param {string} extension_id
     * @param {ITariffExtensionEdit} body - Contains Json with values
     *
     * @returns {IProductExtension} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionEdit(extension_id:string, body:ITariffExtensionEdit):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/${extension_id}`, body, [200]);
    }

    /**
     * @name tariffExtensionOrderDown
     * @summary order Tariff_Extension Down
     * @operationId tariffExtension_down
     * @tags Admin-Extension
     *
     * @description order Tariff_Extension Down
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionOrderDown(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/down/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffExtensionOrderUP
     * @summary order Tariff_Extension UP
     * @operationId tariffExtension_up
     * @tags Admin-Extension
     *
     * @description order Tariff in list
     *
     * @param {string} extension_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffExtensionOrderUP(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff_extension/up/${extension_id}`, {}, [200]);
    }

    /**
     * @name tariffGet
     * @summary get Tariff
     * @operationId tariff_get
     * @tags Admin-Tariff
     *
     * @description activate Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffGet(tariff_id:string):Promise<ITariff> {
        return this.requestRestPath("GET", `/admin/tariff/get/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffGetAllTypes
     * @summary get Tariff All types
     * @operationId tariff_getAllTypes
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     *
     * @returns {IProductExtensionType[]} [code 200] OK Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public tariffGetAllTypes():Promise<IProductExtensionType[]> {
        return this.requestRestPath("GET", `/admin/tariff/types`, {}, [200]);
    }

    /**
     * @name tariffOrderDown
     * @summary order Tariff Down
     * @operationId tariff_down
     * @tags Admin-Tariff
     *
     * @description activate Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffOrderDown(tariff_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff/down/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffOrderUp
     * @summary order Tariff Up
     * @operationId tariff_up
     * @tags Admin-Tariff
     *
     * @description activate Tariff
     *
     * @param {string} tariff_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffOrderUp(tariff_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/tariff/up/${tariff_id}`, {}, [200]);
    }

    /**
     * @name tariffsGetAll
     * @summary get Tariffs all
     * @operationId tariff_getAll
     * @tags Price & Invoice & Tariffs
     *
     * @description get all Tariffs - required for every else action in system. For example: Project is created under the Product which is under some Tariff
     *
     *
     * @returns {ITariff[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public tariffsGetAll():Promise<ITariff[]> {
        return this.requestRestPath("GET", `/tariff`, {}, [200]);
    }

    /**
     * @name typeOfBlockCreate
     * @summary create TypeOfBlock
     * @operationId typeOfBlock_create
     * @tags Type-of-Block
     *
     * @description creating group for BlockoBlocks -> Type of block
     *
     * @param {ITypeOfBlockNew} body - Contains Json with values
     *
     * @returns {ITypeOfBlock} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBlockCreate(body:ITypeOfBlockNew):Promise<ITypeOfBlock> {
        return this.requestRestPath("POST", `/typeOfBlock`, body, [201]);
    }

    /**
     * @name typeOfBlockDelete
     * @summary delete TypeOfBlock
     * @operationId typeOfBlock_delete
     * @tags Type-of-Block
     *
     * @description delete group for BlockoBlocks -> Type of block
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBlockDelete(type_of_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/typeOfBlock/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name typeOfBlockEdit
     * @summary edit TypeOfBlock
     * @operationId typeOfBlock_edit
     * @tags Type-of-Block
     *
     * @description edit Type of block object
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     * @param {ITypeOfBlockNew} body - Contains Json with values
     *
     * @returns {ITypeOfBlock} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBlockEdit(type_of_block_id:string, body:ITypeOfBlockNew):Promise<ITypeOfBlock> {
        return this.requestRestPath("PUT", `/typeOfBlock/${type_of_block_id}`, body, [200]);
    }

    /**
     * @name typeOfBlockGet
     * @summary get TypeOfBlock
     * @operationId typeOfBlock_get
     * @tags Type-of-Block
     *
     * @description get BlockoBlock 
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     *
     * @returns {ITypeOfBlock} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBlockGet(type_of_block_id:string):Promise<ITypeOfBlock> {
        return this.requestRestPath("GET", `/typeOfBlock/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name typeOfBlockOrderDown
     * @summary order_Down TypeOfBlock
     * @operationId typeOfBlock_orderDown
     * @tags Type-of-Block
     *
     * @description Set order in list one position down
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBlockOrderDown(type_of_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/typeOfBlock/order/down/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name typeOfBlockOrderUp
     * @summary order_Up TypeOfBlock
     * @operationId typeOfBlock_orderUp
     * @tags Type-of-Block
     *
     * @description Set order in list one position up
     *
     * @param {string} type_of_block_id - blocko_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBlockOrderUp(type_of_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/typeOfBlock/order/up/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name typeOfBlocksActivate
     * @summary activate TypeOfBlocks
     * @operationId typeOfBlock_activate
     * @tags Admin-Type-of-Block
     *
     * @description activate Type of Widget
     *
     * @param {string} type_of_block_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBlocksActivate(type_of_block_id:string):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/typeOfBlock/active/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name typeOfBlocksDeactivate
     * @summary deactivate TypeOfBlocks
     * @operationId typeOfBlock_deactivate
     * @tags Admin-Type-of-Block
     *
     * @description deactivate Type of Widget
     *
     * @param {string} type_of_block_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBlocksDeactivate(type_of_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/typeOfBlock/deactive/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name typeOfBlocksGetByFilter
     * @summary get TypeOfBlocks by Filter
     * @operationId typeOfBlock_getByFilter
     * @tags Type-of-Block
     *
     * @description get TypeOfBlock List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {ITypeOfBlockFilter} body - Contains Json with values
     *
     * @returns {ITypeOfBlockList} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBlocksGetByFilter(page_number:number, body:ITypeOfBlockFilter):Promise<ITypeOfBlockList> {
        return this.requestRestPath("PUT", `/typeOfBlock/list/${page_number}`, body, [200]);
    }

    /**
     * @name typeOfBoardBatchCreate
     * @summary create TypeOfBoardBatch
     * @operationId typeOfBoardBatch_create
     * @tags Type-Of-Board
     *
     * @description Create new Production Batch for Type Of Board
     *
     * @param {string} type_of_board_id
     * @param {ITypeOfBoardBatchNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoardBatch} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBoardBatchCreate(type_of_board_id:string, body:ITypeOfBoardBatchNew):Promise<ITypeOfBoardBatch> {
        return this.requestRestPath("POST", `/typeOfBoardBatch/${type_of_board_id}`, body, [201]);
    }

    /**
     * @name typeOfBoardBatchDelete
     * @summary delete TypeOfBoardBatch
     * @operationId typeOfBoardBatch_delete
     * @tags Type-Of-Board
     *
     * @description if you want delete TypeOfBoard Batch object by query = type_of_board_id
     *
     * @param {string} type_of_board_batch_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBoardBatchDelete(type_of_board_batch_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/typeOfBoardBatch/${type_of_board_batch_id}`, {}, [200]);
    }

    /**
     * @name typeOfBoardBatchEdit
     * @summary edit TypeOfBoardBatch
     * @operationId typeOfBoardBatch_edit
     * @tags Type-Of-Board
     *
     * @description Create new Production Batch for Type Of Board
     *
     * @param {string} type_of_board_batch_id
     * @param {ITypeOfBoardBatchNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoardBatch} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBoardBatchEdit(type_of_board_batch_id:string, body:ITypeOfBoardBatchNew):Promise<ITypeOfBoardBatch> {
        return this.requestRestPath("PUT", `/typeOfBoardBatch/${type_of_board_batch_id}`, body, [201]);
    }

    /**
     * @name typeOfBoardCreate
     * @summary create TypeOfBoard
     * @operationId typeOfBoard_create
     * @tags Type-Of-Board
     *
     * @description The TypeOfBoard is category for IoT. Like Raspberry2, Arduino-Uno etc. 
     *    
     *    We using that for compilation, sorting libraries, filtres and more..
     *
     * @param {ITypeOfBoardNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoard} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBoardCreate(body:ITypeOfBoardNew):Promise<ITypeOfBoard> {
        return this.requestRestPath("POST", `/typeOfBoard`, body, [201]);
    }

    /**
     * @name typeOfBoardDelete
     * @summary delete TypeOfBoard
     * @operationId typeOfBoard_delete
     * @tags Type-Of-Board
     *
     * @description if you want delete TypeOfBoard object by query = type_of_board_id
     *
     * @param {string} type_of_board_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBoardDelete(type_of_board_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/typeOfBoard/${type_of_board_id}`, {}, [200]);
    }

    /**
     * @name typeOfBoardEdit
     * @summary edit TypeOfBoard
     * @operationId typeOfBoard_update
     * @tags Type-Of-Board
     *
     * @description if you want edit base TypeOfBoard information
     *
     * @param {string} type_of_board_id
     * @param {ITypeOfBoardNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoard} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBoardEdit(type_of_board_id:string, body:ITypeOfBoardNew):Promise<ITypeOfBoard> {
        return this.requestRestPath("PUT", `/typeOfBoard/${type_of_board_id}`, body, [200]);
    }

    /**
     * @name typeOfBoardGet
     * @summary get TypeOfBoard
     * @operationId typeOfBoard_get
     * @tags Type-Of-Board
     *
     * @description if you want get TypeOfBoard object by query = type_of_board_id
     *
     * @param {string} type_of_board_id
     *
     * @returns {ITypeOfBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBoardGet(type_of_board_id:string):Promise<ITypeOfBoard> {
        return this.requestRestPath("GET", `/typeOfBoard/${type_of_board_id}`, {}, [200]);
    }

    /**
     * @name typeOfBoardUploadPicture
     * @summary upload TypeOfBoard picture
     * @operationId typeOfBoard_uploadPicture
     * @tags Admin-Type-Of-Board
     *
     * @description Upload TypeOfBoard picture
     *
     * @param {string} type_of_board_id
     * @param {IBase64File} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public typeOfBoardUploadPicture(type_of_board_id:string, body:IBase64File):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/typeOfBoard/picture_up/${type_of_board_id}`, body, [200]);
    }

    /**
     * @name typeOfBoardsGetAll
     * @summary get TypeOfBoards All
     * @operationId typeOfBoard_getAll
     * @tags Type-Of-Board
     *
     * @description if you want get all TypeOfBoard objects
     *
     *
     * @returns {ITypeOfBoard[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfBoardsGetAll():Promise<ITypeOfBoard[]> {
        return this.requestRestPath("GET", `/typeOfBoard/all`, {}, [200]);
    }

    /**
     * @name typeOfWidgetActivate
     * @summary activate Type_Of_Widget
     * @operationId typeOfWidget_activate
     * @tags Admin-Type-of-Widget
     *
     * @description activate Type of Widget
     *
     * @param {string} type_of_widget_id
     *
     * @returns {ITariff} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfWidgetActivate(type_of_widget_id:string):Promise<ITariff> {
        return this.requestRestPath("PUT", `/admin/type_of_widget/active/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name typeOfWidgetCreate
     * @summary create Type_Of_Widget
     * @operationId typeOfWidget_create
     * @tags Type-of-Widget
     *
     * @description creating group for GridWidgets -> Type_Of_Widget
     *
     * @param {ITypeOfWidgetNew} body - Contains Json with values
     *
     * @returns {ITypeOfWidget} [code 201] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public typeOfWidgetCreate(body:ITypeOfWidgetNew):Promise<ITypeOfWidget> {
        return this.requestRestPath("POST", `/type_of_widget`, body, [201]);
    }

    /**
     * @name typeOfWidgetDeactivate
     * @summary deactivate Type_Of_Widget
     * @operationId typeOfWidget_deactivate
     * @tags Admin-Type-of-Widget
     *
     * @description deactivate Type of Widget
     *
     * @param {string} type_of_widget_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeOfWidgetDeactivate(type_of_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/type_of_widget/deactive/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name typeOfWidgetDelete
     * @summary delete Type_Of_Widget
     * @operationId typeOfWidget_delete
     * @tags Type-of-Widget
     *
     * @description delete group for GridWidgets -> Type_Of_Widget
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public typeOfWidgetDelete(type_of_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/type_of_widget/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name typeOfWidgetEdit
     * @summary edit Type_Of_Widget
     * @operationId typeOfWidget_update
     * @tags Type-of-Widget
     *
     * @description edit Type_Of_Widget object
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     * @param {ITypeOfWidgetNew} body - Contains Json with values
     *
     * @returns {ITypeOfWidget} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public typeOfWidgetEdit(type_of_widget_id:string, body:ITypeOfWidgetNew):Promise<ITypeOfWidget> {
        return this.requestRestPath("PUT", `/type_of_widget/${type_of_widget_id}`, body, [200]);
    }

    /**
     * @name typeOfWidgetGet
     * @summary get Type_Of_Widget
     * @operationId typeOfWidget_get
     * @tags Type-of-Widget
     *
     * @description get TypeOfWidget
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {ITypeOfWidget} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public typeOfWidgetGet(type_of_widget_id:string):Promise<ITypeOfWidget> {
        return this.requestRestPath("GET", `/type_of_widget/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name typeOfWidgetGetAll
     * @summary get Type_Of_Widget All
     * @operationId typeOfWidget_getAll
     * @tags Type-of-Widget
     *
     * @description get all groups for GridWidgets -> Type_Of_Widget
     *
     *
     * @returns {ITypeOfWidget[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public typeOfWidgetGetAll():Promise<ITypeOfWidget[]> {
        return this.requestRestPath("GET", `/type_of_widget`, {}, [200]);
    }

    /**
     * @name typeOfWidgetGetByFilter
     * @summary get Type_Of_Widget by Filter
     * @operationId typeOfWidget_getByFilter
     * @tags Type-of-Widget
     *
     * @description get TypeOfWidget List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {ITypeOfWidgetFilter} body - Contains Json with values
     *
     * @returns {ITypeOfWidgetList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public typeOfWidgetGetByFilter(page_number:number, body:ITypeOfWidgetFilter):Promise<ITypeOfWidgetList> {
        return this.requestRestPath("PUT", `/type_of_widget/list/${page_number}`, body, [200]);
    }

    /**
     * @name typeOfWidgetOrderDown
     * @summary order Type_Of_Widget Down
     * @operationId typeOfWidget_order_down
     * @tags Type-of-Widget
     *
     * @description set down order in list
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public typeOfWidgetOrderDown(type_of_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/type_of_widget/order/down/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name typeOfWidgetOrderUp
     * @summary order Type_Of_Widget Up
     * @operationId typeOfWidget_order_up
     * @tags Type-of-Widget
     *
     * @description set up order
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public typeOfWidgetOrderUp(type_of_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/type_of_widget/order/up/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name typeofboardSetcprogramversion_as_main
     * @summary set_c_program_version_as_main Type_of_board
     * @operationId c_program_markScheme
     * @tags Admin-C_Program, Type-Of-Board
     *
     * @description set C_Program version as Main for This Type of Device. Version must be from Main or Test C Program of this version
     *
     * @param {string} version_id - version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public typeofboardSetcprogramversion_as_main(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/default/mark/${version_id}`, {}, [200]);
    }

    /**
     * @name websocketGetAccessToken
     * @summary get Websocket Access Token
     * @operationId get_Websocket_token
     * @tags Access, WebSocket
     *
     * @description For connection to websocket, you have to connect with temporary unique token. This Api return Tokenwith a maximum lifetime of 5 seconds. After the token is deactivated. After logging in, or the connectionlost is token deactivated also. 
     *
     *
     * @returns {IWebSocketToken} [code 200] Token successfully generated
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public websocketGetAccessToken():Promise<IWebSocketToken> {
        return this.requestRestPath("GET", `/websocket/access_token`, {}, [200]);
    }

}
