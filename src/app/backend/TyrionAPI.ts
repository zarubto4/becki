/**************************************************************/
/*                                                            */
/*   Generated Tyrion API backend file                        */
/*   © 2015-2016 Becki Authors.                               */
/*                                                            */
/*   Build date: 2017-07-12 12:23:20                          */
/*   Tyrion version: 1.13.1                                   */
/*                                                            */
/*   Generated by automated script from Swagger JSON.         */
/*   Script author: David Hrádek (david@hradyho.net)          */
/*                                                            */
/**************************************************************/

/* tslint:disable */


/**
 * @name IActualizationProcedure
 * @description: Model of ActualizationProcedure
 */
export interface IActualizationProcedure {
    /**
     * @name date_of_create
     * @type string
     * @description UNIX time in ms
     * @format date-time
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_finish
     * @type string
     * @description UNIX time in ms
     * @format date-time
     * @required
     */
    date_of_finish: string;
    /**
     * @name date_of_planing
     * @type string
     * @description UNIX time in ms
     * @format date-time
     * @required
     */
    date_of_planing: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name procedure_size_all
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    procedure_size_all: number;
    /**
     * @name procedure_size_complete
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    procedure_size_complete: number;
    /**
     * @name state
     * @type ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet")
     * @required
     */
    state: ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet");
    /**
     * @name type_of_update
     * @type ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE")
     * @required
     */
    type_of_update: ("MANUALLY_BY_USER_INDIVIDUAL"|"MANUALLY_BY_USER_BLOCKO_GROUP"|"MANUALLY_BY_USER_BLOCKO_GROUP_ON_TIME"|"AUTOMATICALLY_BY_USER_ALWAYS_UP_TO_DATE"|"AUTOMATICALLY_BY_SERVER_ALWAYS_UP_TO_DATE");
    /**
     * @name updates
     * @type ICProgramUpdatePlan[]
     * @required
     */
    updates: ICProgramUpdatePlan[];
}


/**
 * @name IApplicableProduct
 * @description: Json Model for selecting Product for registration new project
 */
export interface IApplicableProduct {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name tariff
     * @type string
     * @readonly
     * @required
     */
    tariff: string;
}


/**
 * @name IBPair
 * @description: Model of BPair
 */
export interface IBPair {
    /**
     * @name board_description
     * @type string
     * @readonly
     * @required
     */
    board_description: string;
    /**
     * @name board_id
     * @type string
     * @readonly
     * @required
     */
    board_id: string;
    /**
     * @name board_name
     * @type string
     * @readonly
     * @required
     */
    board_name: string;
    /**
     * @name c_program_description
     * @type string
     * @readonly
     * @required
     */
    c_program_description: string;
    /**
     * @name c_program_id
     * @type string
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_name
     * @type string
     * @readonly
     * @required
     */
    c_program_name: string;
    /**
     * @name c_program_version_description
     * @type string
     * @readonly
     * @required
     */
    c_program_version_description: string;
    /**
     * @name c_program_version_id
     * @type string
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @readonly
     * @required
     */
    c_program_version_name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name IBProgram
 * @description: Model of BProgram
 */
export interface IBProgram {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name instance_details
     * @type IBProgramState
     * @readonly
     * @required
     */
    instance_details: IBProgramState;
    /**
     * @name last_update
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    last_update: number;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type IBProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    program_versions: IBProgramVersionShortDetail[];
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBProgramFilter
 * @description: Json Model for getting B_Program Filter List
 */
export interface IBProgramFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get b_programs of given project
     */
    project_id?: string;
}


/**
 * @name IBProgramList
 * @description: Individual B_Program List
 */
export interface IBProgramList {
    /**
     * @name content
     * @type IBProgramShortDetail[]
     * @readonly
     * @required
     */
    content: IBProgramShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBProgramNew
 * @description: Json Model for new B_Program
 */
export interface IBProgramNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IBProgramShortDetail
 * @description: B_Program Light (only few properties)
 */
export interface IBProgramShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBProgramState
 * @description: Json Model for B_Program state
 */
export interface IBProgramState {
    /**
     * @name instance_id
     * @type string
     * @description Id of Instance -its independent object!
     * @readonly
     * @required
     */
    instance_id: string;
    /**
     * @name instance_remote_url
     * @type string
     * @description WebSocket URL without Personal AUTH_ID for remove control and webView streaming
     * @readonly
     * @required
     */
    instance_remote_url: string;
    /**
     * @name instance_status
     * @type ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    instance_status: ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
    /**
     * @name server_online
     * @type boolean
     * @readonly
     * @required
     */
    server_online: boolean;
    /**
     * @name unique_identificator
     * @type string
     * @readonly
     * @required
     */
    unique_identificator: string;
    /**
     * @name uploaded
     * @type boolean
     * @readonly
     * @required
     */
    uploaded: boolean;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IBProgramUploadInstance
 * @description: Json Model for new Version of B_Program
 */
export interface IBProgramUploadInstance {
    /**
     * @name upload_time
     * @type number
     * @description UNIX time in millis - Date: number of milliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int64
     */
    upload_time?: number;
}


/**
 * @name IBProgramVersion
 * @description: Json Model of Version of B_Program
 */
export interface IBProgramVersion {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name hardware_group
     * @type IHardwareGroup[]
     * @readonly
     * @required
     */
    hardware_group: IHardwareGroup[];
    /**
     * @name m_project_program_snapshots
     * @type IMProjectSnapShotDetail[]
     * @readonly
     * @required
     */
    m_project_program_snapshots: IMProjectSnapShotDetail[];
    /**
     * @name program
     * @type string
     * @description Json/Javascript Code
     * @readonly
     * @required
     */
    program: string;
    /**
     * @name remove_permission
     * @type boolean
     * @readonly
     * @required
     */
    remove_permission: boolean;
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
}


/**
 * @name IBProgramVersionEdit
 * @description: Json Model for edit Version of B_Program
 */
export interface IBProgramVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBProgramVersionNew
 * @description: Json Model for new Version of B_Program
 */
export interface IBProgramVersionNew {
    /**
     * @name hardware_group
     * @type IHardwareGroupIN[]
     * @description Connected groups of all hardware - User can create Blocko program without hardware.
     */
    hardware_group?: IHardwareGroupIN[];
    /**
     * @name m_project_snapshots
     * @type IMProjectSnapShot[]
     * @description Connected groups of m_programs.versions under imported m_programs
     */
    m_project_snapshots?: IMProjectSnapShot[];
    /**
     * @name program
     * @type string
     * @required
     */
    program: string;
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBProgramVersionShortDetail
 * @description: B_Program Version Light (only few properties)
 */
export interface IBProgramVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IBadRequest
 * @description: When is something wrong
 */
export interface IBadRequest {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IBase64File
 * @description: Json Model for getting Blocko_Block Filter List
 */
export interface IBase64File {
    /**
     * @name file
     * @type string
     * @description The file is encoded in base64. If it is null - it is a command to delete a file
     */
    file?: string;
}


/**
 * @name IBlockoBlock
 * @description: Model of BlockoBlock
 */
export interface IBlockoBlock {
    /**
     * @name author_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_id: string;
    /**
     * @name author_nick_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_nick_name: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name producer_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name type_of_block_id
     * @type string
     * @readonly
     * @required
     */
    type_of_block_id: string;
    /**
     * @name type_of_block_name
     * @type string
     * @readonly
     * @required
     */
    type_of_block_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IBlockoBlockVersionShortDetail[]
     * @readonly
     * @required
     */
    versions: IBlockoBlockVersionShortDetail[];
}


/**
 * @name IBlockoBlockVersion
 * @description: Model of BlockoBlockVersion
 */
export interface IBlockoBlockVersion {
    /**
     * @name approval_state
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @required
     */
    approval_state: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name author
     * @type IPersonShortDetail
     */
    author?: IPersonShortDetail;
    /**
     * @name create_permission
     * @type boolean
     * @readonly
     * @required
     */
    create_permission: boolean;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockBlockoVersionEdit
 * @description: Json Model for editing BlockoVersion
 */
export interface IBlockoBlockBlockoVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockBlockoVersionNew
 * @description: Json Model for crating new version and also content of BlockoBlock Model
 */
export interface IBlockoBlockBlockoVersionNew {
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name version_description
     * @type string
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockNew
 * @description: Json Model for crating new BlockoBlock Model
 */
export interface IBlockoBlockNew {
    /**
     * @name general_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     */
    general_description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name type_of_block_id
     * @type string
     * @description Required valid type_of_block id
     * @required
     */
    type_of_block_id: string;
}


/**
 * @name IBlockoBlockVersionShortDetail
 * @description: Json Model details of Version of BlockoBlock
 */
export interface IBlockoBlockVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     * @readonly
     * @required
     */
    date_of_create: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name design_json
     * @type string
     * @readonly
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IBlockoBlockFilter
 * @description: Json Model for getting Blocko_Block Filter List
 */
export interface IBlockoBlockFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Blocks of given project
     */
    project_id?: string;
}


/**
 * @name IBlockoBlockFilterDetail
 * @description: Blocko_Block Light (only few properties)
 */
export interface IBlockoBlockFilterDetail {
    /**
     * @name blocko_block_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_description: string;
    /**
     * @name blocko_block_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_id: string;
    /**
     * @name blocko_block_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_name: string;
    /**
     * @name blocko_block_type_of_block_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_description: string;
    /**
     * @name blocko_block_type_of_block_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_id: string;
    /**
     * @name blocko_block_type_of_block_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_name: string;
    /**
     * @name blocko_block_version_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_description: string;
    /**
     * @name blocko_block_version_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_id: string;
    /**
     * @name blocko_block_version_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_name: string;
}


/**
 * @name IBlockoBlockList
 * @description: Individual Blocko Block List
 */
export interface IBlockoBlockList {
    /**
     * @name content
     * @type IBlockoBlockFilterDetail[]
     * @readonly
     * @required
     */
    content: IBlockoBlockFilterDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBlockoBlockShortDetail
 * @description: Blocko_Block Light (only few properties)
 */
export interface IBlockoBlockShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @description Id of Block in Blocko Group (TypeOfBlock)
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IBlockoBlockVersionShortDetail[]
     * @readonly
     * @required
     */
    versions: IBlockoBlockVersionShortDetail[];
}


/**
 * @name IBlockoTokenValidationRequest
 * @description: Json Model for validation of Token for HTTP requests
 */
export interface IBlockoTokenValidationRequest {
    /**
     * @name token
     * @type string
     * @readonly
     * @required
     */
    token: string;
    /**
     * @name type_of_token
     * @type string
     * @example PERSON_TOKEN, INSTANCE_TOKEN
     * @readonly
     * @required
     */
    type_of_token: string;
}


/**
 * @name IBlockoTokenValidationResult
 * @description: Json Model for validation of Token for HTTP requests
 */
export interface IBlockoTokenValidationResult {
    /**
     * @name available_requests
     * @type number
     * @format int64
     * @readonly
     * @required
     */
    available_requests: number;
    /**
     * @name token
     * @type string
     * @readonly
     * @required
     */
    token: string;
}


/**
 * @name IBoard
 * @description: Model of Board
 */
export interface IBoard {
    /**
     * @name actual_bootloader_id
     * @type string
     * @readonly
     * @required
     */
    actual_bootloader_id: string;
    /**
     * @name actual_bootloader_version_name
     * @type string
     * @readonly
     * @required
     */
    actual_bootloader_version_name: string;
    /**
     * @name actual_c_program_backup_description
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_description: string;
    /**
     * @name actual_c_program_backup_id
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_id: string;
    /**
     * @name actual_c_program_backup_name
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_name: string;
    /**
     * @name actual_c_program_backup_version_description
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_version_description: string;
    /**
     * @name actual_c_program_backup_version_id
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_version_id: string;
    /**
     * @name actual_c_program_backup_version_name
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_backup_version_name: string;
    /**
     * @name actual_c_program_description
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_description: string;
    /**
     * @name actual_c_program_id
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_id: string;
    /**
     * @name actual_c_program_name
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_name: string;
    /**
     * @name actual_c_program_version_description
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_version_description: string;
    /**
     * @name actual_c_program_version_id
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_version_id: string;
    /**
     * @name actual_c_program_version_name
     * @type string
     * @readonly
     * @required
     */
    actual_c_program_version_name: string;
    /**
     * @name actual_instance
     * @type IInstanceShortDetail
     * @description Can be null, if device is not in Instance
     * @readonly
     * @required
     */
    actual_instance: IInstanceShortDetail;
    /**
     * @name alert_list
     * @type ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[]
     * @readonly
     * @required
     */
    alert_list: ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[];
    /**
     * @name available_bootloader_id
     * @type string
     * @readonly
     * @required
     */
    available_bootloader_id: string;
    /**
     * @name available_bootloader_version_name
     * @type string
     * @readonly
     * @required
     */
    available_bootloader_version_name: string;
    /**
     * @name backup_mode
     * @type ("STATIC_BACKUP"|"AUTO_BACKUP"|"NO_BACKUP")
     */
    backup_mode?: ("STATIC_BACKUP"|"AUTO_BACKUP"|"NO_BACKUP");
    /**
     * @name database_synchronize
     * @type boolean
     * @required
     */
    database_synchronize: boolean;
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_user_registration
     * @type string
     * @format date-time
     * @required
     */
    date_of_user_registration: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name developer_kit
     * @type boolean
     * @required
     */
    developer_kit: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name hash_for_adding
     * @type string
     * @required
     */
    hash_for_adding: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name latest_online
     * @type number
     * @description Value is null, if device status is online.
     * @format int64
     * @readonly
     * @required
     */
    latest_online: number;
    /**
     * @name mac_address
     * @type string
     * @required
     */
    mac_address: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name required_updates
     * @type ICProgramUpdatePlanShortDetail[]
     * @readonly
     * @required
     */
    required_updates: ICProgramUpdatePlanShortDetail[];
    /**
     * @name server
     * @type IHomerServerPublicDetail
     * @readonly
     * @required
     */
    server: IHomerServerPublicDetail;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name updates
     * @type ICProgramUpdatePlanShortDetail[]
     * @readonly
     * @required
     */
    updates: ICProgramUpdatePlanShortDetail[];
    /**
     * @name wifi_mac_address
     * @type string
     * @required
     */
    wifi_mac_address: string;
}


/**
 * @name IBoardFeature
 * @description: Model of TypeOfBoard Features 
 */
export interface IBoardFeature {
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
}


/**
 * @name IBoardBackupSettings
 * @description: Interface IBoardBackupSettings definition
 */
export interface IBoardBackupSettings {
    /**
     * @name board_backup_pair_list
     * @type IBoardBackupPair[]
     * @description List of Pairs for settings of Backup on boards
     * @required
     */
    board_backup_pair_list: IBoardBackupPair[];
}


/**
 * @name IBoardBootloaderUpdate
 * @description: Interface IBoardBootloaderUpdate definition
 */
export interface IBoardBootloaderUpdate {
    /**
     * @name device_ids
     * @type string[]
     * @description Must be unique!!!, The hardware_id must have 20 hexadecimal characters!, It can combination of master devices and others
     * @required
     */
    device_ids: string[];
}


/**
 * @name IBoardList
 * @description: Individual Board List
 */
export interface IBoardList {
    /**
     * @name content
     * @type IBoard[]
     * @readonly
     * @required
     */
    content: IBoard[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBoardPersonalDescription
 * @description: Json Model for update personal description of Board
 */
export interface IBoardPersonalDescription {
    /**
     * @name description
     * @type string
     * @description Description
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 0 and 255 characters.
     * @required
     */
    name: string;
}


/**
 * @name IBoardRegistrationStatus
 * @description: Json Model for Status and all information about embedded Hardware
 */
export interface IBoardRegistrationStatus {
    /**
     * @name status
     * @type ("CAN_REGISTER"|"NOT_EXIST"|"ALREADY_REGISTERED_IN_YOUR_ACCOUNT"|"ALREADY_REGISTERED"|"PERMANENTLY_DISABLED"|"BROKEN_DEVICE")
     * @description CAN_REGISTER, ALREADY_REGISTERED_IN_YOUR_ACCOUNT, ALREADY_REGISTERED, PERMANENTLY_DISABLED, BROKEN_DEVICE
     * @example CAN_REGISTER
     * @readonly
     * @required
     */
    status: ("CAN_REGISTER"|"NOT_EXIST"|"ALREADY_REGISTERED_IN_YOUR_ACCOUNT"|"ALREADY_REGISTERED"|"PERMANENTLY_DISABLED"|"BROKEN_DEVICE");
}


/**
 * @name IBoardShortDetail
 * @description: Json Model Board - only basic information
 */
export interface IBoardShortDetail {
    /**
     * @name alert_list
     * @type ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[]
     * @readonly
     * @required
     */
    alert_list: ("BOOTLOADER_REQUIRED"|"RESTART_REQUIRED")[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name last_online
     * @type number
     * @description Value is null if online_state is online
     * @format int64
     * @readonly
     * @required
     */
    last_online: number;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name online_state
     * @type ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    online_state: ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBoardBackupPair
 * @description: Interface IBoardBackupPair definition
 */
export interface IBoardBackupPair {
    /**
     * @name backup_mode
     * @type boolean
     * @description True - for auto_backup. False for static backup. If static c_program_version_id is required!
     * @required
     */
    backup_mode: boolean;
    /**
     * @name board_id
     * @type string
     * @required
     */
    board_id: string;
    /**
     * @name c_program_version_id
     * @type string
     * @description Required if backup_mode is false. C_program_version_id must be compiled and for same type of Board!
     */
    c_program_version_id?: string;
}


/**
 * @name IBoardDetail
 * @description: Interface IBoardDetail definition
 */
export interface IBoardDetail {
    /**
     * @name board_id
     * @type string
     * @readonly
     * @required
     */
    board_id: string;
    /**
     * @name description
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name IBoardFilter
 * @description: Json Model for Filtering Boards
 */
export interface IBoardFilter {
    /**
     * @name active
     * @type string
     * @description Boolean - required in String! "true" or "false "
     */
    active?: string;
    /**
     * @name end_time
     * @type string
     * @description Unix in millis - date_of_create - end_time
     * @format date-time
     */
    end_time?: string;
    /**
     * @name page_number
     * @type number
     * @description page_number from 1 to N 
     * @format int32
     */
    page_number?: number;
    /**
     * @name processors
     * @type string[]
     * @description List of processor.id
     */
    processors?: string[];
    /**
     * @name producers
     * @type string[]
     * @description List of producer.id
     */
    producers?: string[];
    /**
     * @name projects
     * @type string[]
     * @description List of project.id
     */
    projects?: string[];
    /**
     * @name start_time
     * @type string
     * @description Unix in millis - date_of_create - start_time
     * @format date-time
     */
    start_time?: string;
    /**
     * @name type_of_board_ids
     * @type string[]
     * @description List of typeOfBoard.id
     */
    type_of_board_ids?: string[];
}


/**
 * @name IBoardForFastUploadDetail
 * @description: Json Model for board with details for fast upload
 */
export interface IBoardForFastUploadDetail {
    /**
     * @name collision
     * @type ("NO_COLLISION"|"ALREADY_IN_INSTANCE"|"PLANNED_UPDATE")
     * @readonly
     * @required
     */
    collision: ("NO_COLLISION"|"ALREADY_IN_INSTANCE"|"PLANNED_UPDATE");
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name IBoardsForBlocko
 * @description: Json Model for Blocko in Becki for accessible hardware and firmware versions
 */
export interface IBoardsForBlocko {
    /**
     * @name boards
     * @type IBoardShortDetail[]
     * @readonly
     * @required
     */
    boards: IBoardShortDetail[];
    /**
     * @name c_programs
     * @type ICProgramShortDetailForBlocko[]
     * @readonly
     * @required
     */
    c_programs: ICProgramShortDetailForBlocko[];
    /**
     * @name m_projects
     * @type IMProjectShortDetailForBlocko[]
     * @readonly
     * @required
     */
    m_projects: IMProjectShortDetailForBlocko[];
    /**
     * @name type_of_boards
     * @type ITypeOfBoard[]
     * @readonly
     * @required
     */
    type_of_boards: ITypeOfBoard[];
}


/**
 * @name IBootLoader
 * @description: Model of BootLoader
 */
export interface IBootLoader {
    /**
     * @name changing_note
     * @type string
     * @required
     */
    changing_note: string;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_identificator
     * @type string
     * @required
     */
    version_identificator: string;
}


/**
 * @name IBootloaderUpdateProgram
 * @description: Interface IBootloaderUpdateProgram definition
 */
export interface IBootloaderUpdateProgram {
    /**
     * @name bootloader_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    bootloader_id: string;
    /**
     * @name bootloader_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    bootloader_name: string;
    /**
     * @name version_identificator
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    version_identificator: string;
}


/**
 * @name ICProgramUpdatePlan
 * @description: Model of CProgramUpdatePlan
 */
export interface ICProgramUpdatePlan {
    /**
     * @name binary_file_detail
     * @type IFileRecord
     * @description Is visible only if user send own binary file ( OR state for c_program_detail)
     * @readonly
     * @required
     */
    binary_file_detail: IFileRecord;
    /**
     * @name board_detail
     * @type IBoardDetail
     * @readonly
     * @required
     */
    board_detail: IBoardDetail;
    /**
     * @name bootloader_detail
     * @type IBootloaderUpdateProgram
     * @description Is visible only if update is for Bootloader
     * @readonly
     * @required
     */
    bootloader_detail: IBootloaderUpdateProgram;
    /**
     * @name c_program_detail
     * @type ICProgramUpdateProgram
     * @description Is visible only if update is for Firmware or Backup
     * @readonly
     * @required
     */
    c_program_detail: ICProgramUpdateProgram;
    /**
     * @name date_of_create
     * @type string
     * @description UNIX time in ms
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_finish
     * @type string
     * @description UNIX time in ms
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_finish: string;
    /**
     * @name date_of_planing
     * @type string
     * @format date-time
     * @readonly
     * @required
     */
    date_of_planing: string;
    /**
     * @name error
     * @type string
     * @description Only if state is critical_error or Homer record some error
     */
    error?: string;
    /**
     * @name error_code
     * @type number
     * @description Only if state is critical_error or Homer record some error
     * @format int32
     */
    error_code?: number;
    /**
     * @name firmware_type
     * @type ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI")
     * @required
     */
    firmware_type: ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI");
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name state
     * @type ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"not_updated"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"critical_error")
     * @description Description on Model C_ProgramUpdater_State
     * @required
     */
    state: ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"not_updated"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"critical_error");
}


/**
 * @name ICProgram
 * @description: Object represented C_Program in database
 */
export interface ICProgram {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @description can be empty
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @description minimal length is 8 characters
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type ICProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    program_versions: ICProgramVersionShortDetail[];
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name project_name
     * @type string
     * @readonly
     * @required
     */
    project_name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ICProgramFilter
 * @description: Json Model for getting C_Program Filter List
 */
export interface ICProgramFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get C_Programs of given project
     */
    project_id?: string;
}


/**
 * @name ICProgramList
 * @description: Individual C_Program List
 */
export interface ICProgramList {
    /**
     * @name content
     * @type ICProgramShortDetail[]
     * @readonly
     * @required
     */
    content: ICProgramShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ICProgramNew
 * @description: Json Model for new C_Program
 */
export interface ICProgramNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    project_id: string;
    /**
     * @name type_of_board_id
     * @type string
     * @required
     */
    type_of_board_id: string;
}


/**
 * @name ICProgramShortDetailForBlocko
 * @description: Interface ICProgramShortDetailForBlocko definition
 */
export interface ICProgramShortDetailForBlocko {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name versions
     * @type ICProgramVersionsShortDetailForBlocko[]
     * @readonly
     * @required
     */
    versions: ICProgramVersionsShortDetailForBlocko[];
}


/**
 * @name ICProgramUpdatePlanShortDetail
 * @description: Json Model with details of C_program>
 */
export interface ICProgramUpdatePlanShortDetail {
    /**
     * @name bootloader_id
     * @type string
     * @description only if Firmware_type is bootloader
     * @readonly
     * @required
     */
    bootloader_id: string;
    /**
     * @name bootloader_name
     * @type string
     * @description only if Firmware_type is bootloader
     * @readonly
     * @required
     */
    bootloader_name: string;
    /**
     * @name c_program_id
     * @type string
     * @description only if Firmware_type is firmware or backup
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_program_name
     * @type string
     * @description only if Firmware_type is firmware or backup
     * @readonly
     * @required
     */
    c_program_program_name: string;
    /**
     * @name c_program_version_id
     * @type string
     * @description only if Firmware_type is firmware or backup
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @description only if Firmware_type is firmware or backup
     * @readonly
     * @required
     */
    c_program_version_name: string;
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_finish
     * @type string
     * @format date-time
     * @required
     */
    date_of_finish: string;
    /**
     * @name firmware_type
     * @type ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI")
     * @required
     */
    firmware_type: ("FIRMWARE"|"BOOTLOADER"|"BACKUP"|"WIFI");
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name state
     * @type ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"not_updated"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"critical_error")
     * @required
     */
    state: ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"not_updated"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"critical_error");
    /**
     * @name version_identificator
     * @type string
     * @description only if Firmware_type is bootloader
     * @readonly
     * @required
     */
    version_identificator: string;
}


/**
 * @name ICProgramUpdateProgram
 * @description: Interface ICProgramUpdateProgram definition
 */
export interface ICProgramUpdateProgram {
    /**
     * @name c_program_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_program_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_program_name: string;
    /**
     * @name c_program_version_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_version_name: string;
}


/**
 * @name ICProgramVersion
 * @description: Json Model for Version of C_program
 */
export interface ICProgramVersion {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name files
     * @type ILibraryRecord[]
     * @readonly
     * @required
     */
    files: ILibraryRecord[];
    /**
     * @name imported_libraries
     * @type ILibraryLibraryVersionPair[]
     * @description List imported libraries
     * @readonly
     * @required
     */
    imported_libraries: ILibraryLibraryVersionPair[];
    /**
     * @name main
     * @type string
     * @readonly
     * @required
     */
    main: string;
    /**
     * @name remove_permission
     * @type boolean
     * @readonly
     * @required
     */
    remove_permission: boolean;
    /**
     * @name status
     * @type ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"hardware_unstable"|"undefined")
     * @readonly
     * @required
     */
    status: ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"hardware_unstable"|"undefined");
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @description Value can be empty, Server cannot guarantee that. External documentation: dsafsdfsdf
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name ICProgramVersionEdit
 * @description: Json Model for edit basic information of C_program Version
 */
export interface ICProgramVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionNew
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionNew {
    /**
     * @name files
     * @type ILibraryRecord[]
     */
    files?: ILibraryRecord[];
    /**
     * @name imported_libraries
     * @type string[]
     * @description Contains IDs of imported Library versions
     */
    imported_libraries?: string[];
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionPublicList
 * @description: Json Model for Public Version of C_program List
 */
export interface ICProgramVersionPublicList {
    /**
     * @name content
     * @type ICProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    content: ICProgramVersionShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ICProgramVersionShortDetail
 * @description: Json Model for Public Version of C_program
 */
export interface ICProgramVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name status
     * @type ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"hardware_unstable"|"undefined")
     * @readonly
     * @required
     */
    status: ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"hardware_unstable"|"undefined");
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionUpdate
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionUpdate {
    /**
     * @name files
     * @type ILibraryRecord[]
     * @readonly
     * @required
     */
    files: ILibraryRecord[];
    /**
     * @name imported_libraries
     * @type string[]
     * @description List ID of libraries version ID
     * @readonly
     * @required
     */
    imported_libraries: string[];
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
    /**
     * @name type_of_board_id
     * @type string
     * @description Required only if user compile code not under C++ code version (where compilation can found type_of_board)
     */
    type_of_board_id?: string;
}


/**
 * @name ICProgramVersionsShortDetailForBlocko
 * @description: Interface ICProgramVersionsShortDetailForBlocko definition
 */
export interface ICProgramVersionsShortDetailForBlocko {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
    /**
     * @name virtual_input_output
     * @type string
     * @description It can be null if server has not image of compilation restored in database
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name ICProgramShortDetail
 * @description: Json Model with details of C_program>
 */
export interface ICProgramShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ICloudCompilationServerCompilationResult
 * @description: Interface ICloudCompilationServerCompilationResult definition
 */
export interface ICloudCompilationServerCompilationResult {
    /**
     * @name interface_code
     * @type string
     * @readonly
     * @required
     */
    interface_code: string;
}


/**
 * @name ICloudHomerServer
 * @description: Json Model for new Blocko Server
 */
export interface ICloudHomerServer {
    /**
     * @name grid_port
     * @type number
     * @format int32
     * @required
     */
    grid_port: number;
    /**
     * @name mqtt_password
     * @type string
     * @required
     */
    mqtt_password: string;
    /**
     * @name mqtt_port
     * @type number
     * @format int32
     * @required
     */
    mqtt_port: number;
    /**
     * @name mqtt_username
     * @type string
     * @required
     */
    mqtt_username: string;
    /**
     * @name personal_server_name
     * @type string
     * @description Personal name For Homer cloud_homer_server. Length must be between 6 and 60 characters
     * @required
     */
    personal_server_name: string;
    /**
     * @name server_url
     * @type string
     * @required
     */
    server_url: string;
    /**
     * @name web_view_port
     * @type number
     * @format int32
     * @required
     */
    web_view_port: number;
}


/**
 * @name ICompilationBuildError
 * @description: Json Model for Compilation Result
 */
export interface ICompilationBuildError {
    /**
     * @name adjustedColumn
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    adjustedColumn: number;
    /**
     * @name code
     * @type string
     * @readonly
     * @required
     */
    code: string;
    /**
     * @name codeWhitespace
     * @type string
     * @readonly
     * @required
     */
    codeWhitespace: string;
    /**
     * @name column
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    column: number;
    /**
     * @name endIndex
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    endIndex: number;
    /**
     * @name filename
     * @type string
     * @readonly
     * @required
     */
    filename: string;
    /**
     * @name line
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    line: number;
    /**
     * @name startIndex
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    startIndex: number;
    /**
     * @name state
     * @type string
     * @description Value is build_error
     * @readonly
     * @required
     */
    state: string;
    /**
     * @name text
     * @type string
     * @readonly
     * @required
     */
    text: string;
    /**
     * @name type
     * @type string
     * @readonly
     * @required
     */
    type: string;
}


/**
 * @name ICompilationOk
 * @description: Json Model for Compilation Result
 */
export interface ICompilationOk {
    /**
     * @name state
     * @type string
     * @description Value is success
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IConnectedBoardIN
 * @description: Interface IConnectedBoardIN definition
 */
export interface IConnectedBoardIN {
    /**
     * @name board_id
     * @type string
     * @required
     */
    board_id: string;
    /**
     * @name c_program_version_id
     * @type string
     * @required
     */
    c_program_version_id: string;
}


/**
 * @name IEntityValidationIn
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationIn {
    /**
     * @name key
     * @type ("mail"|"nick_name"|"vat_number")
     * @description This field is required
     * @required
     */
    key: ("mail"|"nick_name"|"vat_number");
    /**
     * @name value
     * @type string
     * @description This field is required
     * @required
     */
    value: string;
}


/**
 * @name IEntityValidationOut
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationOut {
    /**
     * @name message
     * @type string
     * @description If valid = false, Json probably contains message for user
     * @example Email is used
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name valid
     * @type boolean
     * @description Entity (Email, NickName.. etc) is valid if valid = true
     * @readonly
     * @required
     */
    valid: boolean;
}


/**
 * @name IExampleShortDetail
 * @description: Json Model with details of Example C_Program>
 */
export interface IExampleShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name main
     * @type string
     * @readonly
     * @required
     */
    main: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IExternalServerSideError
 * @description: Unknown Error on external server 
 */
export interface IExternalServerSideError {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IFileRecord
 * @description: Model of FileRecord
 */
export interface IFileRecord {
    /**
     * @name file_name
     * @type string
     * @required
     */
    file_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
}


/**
 * @name IFloatingPersonToken
 * @description: Model of FloatingPersonToken
 */
export interface IFloatingPersonToken {
    /**
     * @name access_age
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    access_age: number;
    /**
     * @name connection_id
     * @type string
     * @required
     */
    connection_id: string;
    /**
     * @name created
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name provider_key
     * @type string
     * @required
     */
    provider_key: string;
    /**
     * @name provider_user_id
     * @type string
     * @required
     */
    provider_user_id: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name return_url
     * @type string
     * @required
     */
    return_url: string;
    /**
     * @name social_token_verified
     * @type boolean
     * @required
     */
    social_token_verified: boolean;
    /**
     * @name type_of_connection
     * @type string
     * @required
     */
    type_of_connection: string;
    /**
     * @name user_agent
     * @type string
     * @required
     */
    user_agent: string;
    /**
     * @name where_logged
     * @type ("BECKI_WEBSITE"|"HOMER_SERVER"|"E_STORE")
     * @description Record, where user make login
     * @required
     */
    where_logged: ("BECKI_WEBSITE"|"HOMER_SERVER"|"E_STORE");
}


/**
 * @name IForbidden
 * @description: Permission is needed for this action.
 */
export interface IForbidden {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IGridWidget
 * @description: Model of GridWidget
 */
export interface IGridWidget {
    /**
     * @name author_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_id: string;
    /**
     * @name author_nick_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_nick_name: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name producer_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name type_of_widget_id
     * @type string
     * @readonly
     * @required
     */
    type_of_widget_id: string;
    /**
     * @name type_of_widget_name
     * @type string
     * @readonly
     * @required
     */
    type_of_widget_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IGridWidgetVersionShortDetail[]
     * @readonly
     * @required
     */
    versions: IGridWidgetVersionShortDetail[];
}


/**
 * @name IGridWidgetVersion
 * @description: Model of GridWidgetVersion
 */
export interface IGridWidgetVersion {
    /**
     * @name approval_state
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @required
     */
    approval_state: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name author
     * @type IPersonShortDetail
     */
    author?: IPersonShortDetail;
    /**
     * @name create_permission
     * @type boolean
     * @readonly
     * @required
     */
    create_permission: boolean;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetVersionEdit
 * @description: Json Model for editing GridWidgetVersion
 */
export interface IGridWidgetVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetVersionNew
 * @description: Json Model for crating new version and also content of GridWidget Model
 */
export interface IGridWidgetVersionNew {
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name version_description
     * @type string
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetVersionShortDetail
 * @description: Json Model for Version of GridWidgetVersion short
 */
export interface IGridWidgetVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     * @readonly
     * @required
     */
    date_of_create: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name design_json
     * @type string
     * @readonly
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IGridWidgetFilter
 * @description: Json Model for getting GridWidget Filter List
 */
export interface IGridWidgetFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Widgets of given project
     */
    project_id?: string;
}


/**
 * @name IGridWidgetList
 * @description: Individual GridWidget List
 */
export interface IGridWidgetList {
    /**
     * @name content
     * @type IGridWidgetShortDetail[]
     * @readonly
     * @required
     */
    content: IGridWidgetShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IGridWidgetNew
 * @description: Json Model for crating new GridWidget Model
 */
export interface IGridWidgetNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 0 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name type_of_widget_id
     * @type string
     * @description Required valid type_of_widget id
     * @required
     */
    type_of_widget_id: string;
}


/**
 * @name IGridWidgetShortDetail
 * @description: GridWidget Light (only few properties)
 */
export interface IGridWidgetShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IGridWidgetVersionShortDetail[]
     * @readonly
     * @required
     */
    versions: IGridWidgetVersionShortDetail[];
}


/**
 * @name IGridTerminal
 * @description: Model of Grid_Terminal
 */
export interface IGridTerminal {
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     * @required
     */
    device_name: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     * @required
     */
    device_type: string;
    /**
     * @name m_program_access
     * @type boolean
     * @required
     */
    m_program_access: boolean;
    /**
     * @name terminal_token
     * @type string
     * @example Mobile, WebBrowser
     * @readonly
     * @required
     */
    terminal_token: string;
    /**
     * @name up_to_date
     * @type boolean
     * @required
     */
    up_to_date: boolean;
    /**
     * @name user_agent
     * @type string
     * @readonly
     * @required
     */
    user_agent: string;
    /**
     * @name ws_permission
     * @type boolean
     * @required
     */
    ws_permission: boolean;
}


/**
 * @name IGridTerminalIdentf
 * @description: Json Model for Identificator
 */
export interface IGridTerminalIdentf {
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     * @required
     */
    device_name: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     * @required
     */
    device_type: string;
}


/**
 * @name IHardwareNewHardwareResult
 * @description: Json Model for data for new Embedded Hardware
 */
export interface IHardwareNewHardwareResult {
    /**
     * @name bootloader_id
     * @type string
     * @required
     */
    bootloader_id: string;
    /**
     * @name compiler_target_name
     * @type string
     * @description must be supported in Tyrion Hardware-Generator management
     * @required
     */
    compiler_target_name: string;
    /**
     * @name firmware_version_id
     * @type string
     * @required
     */
    firmware_version_id: string;
    /**
     * @name full_id
     * @type string
     * @required
     */
    full_id: string;
    /**
     * @name mac_address
     * @type string
     * @required
     */
    mac_address: string;
    /**
     * @name status
     * @type string
     * @description State:: [complete, in_progress, broken_device,unknown_error]
     * @required
     */
    status: string;
    /**
     * @name uuid_request_number
     * @type string
     * @description Value must be unique! Required 30 min chars!
     * @required
     */
    uuid_request_number: string;
}


/**
 * @name IHardwareNewSettingsRequest
 * @description: Json Model for data for new Embedded Hardware
 */
export interface IHardwareNewSettingsRequest {
    /**
     * @name compiler_target_name
     * @type string
     * @description must be supported in Tyrion Hardware-Generator management
     * @readonly
     * @required
     */
    compiler_target_name: string;
    /**
     * @name full_id
     * @type string
     * @description Value must be unique! Required 24 chars!
     * @readonly
     * @required
     */
    full_id: string;
    /**
     * @name mac_address
     * @type string
     * @description Value must be unique! Required 17 chars! - for Example 01:23:45:67:89:ab 
     * @readonly
     * @required
     */
    mac_address: string;
    /**
     * @name uuid_request_number
     * @type string
     * @description Value must be unique! Required 10 min chars!
     * @readonly
     * @required
     */
    uuid_request_number: string;
}


/**
 * @name IHardwareNewSettingsResult
 * @description: Json Model with settings and firwmare and bootloader for Embedded hardware
 */
export interface IHardwareNewSettingsResult {
    /**
     * @name autobackup
     * @type boolean
     * @readonly
     * @required
     */
    autobackup: boolean;
    /**
     * @name backup_mqtt_hostname
     * @type string
     * @readonly
     * @required
     */
    backup_mqtt_hostname: string;
    /**
     * @name backup_mqtt_password
     * @type string
     * @readonly
     * @required
     */
    backup_mqtt_password: string;
    /**
     * @name backup_mqtt_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    backup_mqtt_port: number;
    /**
     * @name backup_mqtt_username
     * @type string
     * @readonly
     * @required
     */
    backup_mqtt_username: string;
    /**
     * @name bootloader_base64
     * @type string
     * @readonly
     * @required
     */
    bootloader_base64: string;
    /**
     * @name bootloader_id
     * @type string
     * @readonly
     * @required
     */
    bootloader_id: string;
    /**
     * @name bootloader_report
     * @type boolean
     * @readonly
     * @required
     */
    bootloader_report: boolean;
    /**
     * @name devlist_counter
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    devlist_counter: number;
    /**
     * @name features
     * @type IBoardFeature[]
     * @readonly
     * @required
     */
    features: IBoardFeature[];
    /**
     * @name firmware_base64
     * @type string
     * @readonly
     * @required
     */
    firmware_base64: string;
    /**
     * @name firmware_version_id
     * @type string
     * @readonly
     * @required
     */
    firmware_version_id: string;
    /**
     * @name full_id
     * @type string
     * @readonly
     * @required
     */
    full_id: string;
    /**
     * @name mac_address
     * @type string
     * @readonly
     * @required
     */
    mac_address: string;
    /**
     * @name normal_mqtt_hostname
     * @type string
     * @readonly
     * @required
     */
    normal_mqtt_hostname: string;
    /**
     * @name normal_mqtt_password
     * @type string
     * @readonly
     * @required
     */
    normal_mqtt_password: string;
    /**
     * @name normal_mqtt_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    normal_mqtt_port: number;
    /**
     * @name normal_mqtt_username
     * @type string
     * @readonly
     * @required
     */
    normal_mqtt_username: string;
    /**
     * @name type_of_board
     * @type string
     * @readonly
     * @required
     */
    type_of_board: string;
    /**
     * @name wifi_password
     * @type string
     * @readonly
     * @required
     */
    wifi_password: string;
    /**
     * @name wifi_ssid
     * @type string
     * @readonly
     * @required
     */
    wifi_ssid: string;
    /**
     * @name wifi_username
     * @type string
     * @readonly
     * @required
     */
    wifi_username: string;
}


/**
 * @name IHardwareGroup
 * @description: Interface IHardwareGroup definition
 */
export interface IHardwareGroup {
    /**
     * @name device_board_pairs
     * @type IBPair[]
     * @required
     */
    device_board_pairs: IBPair[];
    /**
     * @name main_board_pair
     * @type IBPair
     * @required
     */
    main_board_pair: IBPair;
}


/**
 * @name IHardwareGroupIN
 * @description: Interface IHardwareGroupIN definition
 */
export interface IHardwareGroupIN {
    /**
     * @name device_board_pairs
     * @type IConnectedBoardIN[]
     */
    device_board_pairs?: IConnectedBoardIN[];
    /**
     * @name main_board_pair
     * @type IConnectedBoardIN
     * @description This board must be connectible_to_internet = true! User can create new B_Program version without Main Board, but its not possible to upload that to cloud like new Instance
     * @required
     */
    main_board_pair: IConnectedBoardIN;
}


/**
 * @name IHomerInstance
 * @description: Model of HomerInstance
 */
export interface IHomerInstance {
    /**
     * @name actual_instance
     * @type IHomerInstanceRecord
     * @required
     */
    actual_instance: IHomerInstanceRecord;
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name instance_history
     * @type IHomerInstanceRecord[]
     * @required
     */
    instance_history: IHomerInstanceRecord[];
    /**
     * @name instance_remote_url
     * @type string
     * @readonly
     * @required
     */
    instance_remote_url: string;
    /**
     * @name instance_status
     * @type ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    instance_status: ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name instance_type
     * @type ("VIRTUAL"|"INDIVIDUAL")
     * @required
     */
    instance_type: ("VIRTUAL"|"INDIVIDUAL");
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_is_online
     * @type boolean
     * @readonly
     * @required
     */
    server_is_online: boolean;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IHomerInstanceRecord
 * @description: Model of HomerInstanceRecord
 */
export interface IHomerInstanceRecord {
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name b_program_version_description
     * @type string
     * @readonly
     * @required
     */
    b_program_version_description: string;
    /**
     * @name b_program_version_id
     * @type string
     * @readonly
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @readonly
     * @required
     */
    b_program_version_name: string;
    /**
     * @name date_of_created
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    date_of_created: string;
    /**
     * @name hardware_group
     * @type IHardwareGroup[]
     * @readonly
     * @required
     */
    hardware_group: IHardwareGroup[];
    /**
     * @name instance_record_id
     * @type string
     * @readonly
     * @required
     */
    instance_record_id: string;
    /**
     * @name m_project_snapshot
     * @type IMProjectSnapShotDetail[]
     * @readonly
     * @required
     */
    m_project_snapshot: IMProjectSnapShotDetail[];
    /**
     * @name planed_when
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    planed_when: string;
    /**
     * @name procedures
     * @type IActualizationProcedure[]
     * @readonly
     * @required
     */
    procedures: IActualizationProcedure[];
    /**
     * @name running_from
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    running_from: string;
    /**
     * @name running_to
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    running_to: string;
    /**
     * @name status
     * @type ("FUTURE"|"NOW"|"HISTORY")
     * @readonly
     * @required
     */
    status: ("FUTURE"|"NOW"|"HISTORY");
}


/**
 * @name IHomerServer
 * @description: Model of HomerServer
 */
export interface IHomerServer {
    /**
     * @name days_in_archive
     * @type number
     * @format int32
     * @required
     */
    days_in_archive: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name grid_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    grid_port: number;
    /**
     * @name interactive
     * @type boolean
     * @required
     */
    interactive: boolean;
    /**
     * @name json_additional_parameter
     * @type string
     * @required
     */
    json_additional_parameter: string;
    /**
     * @name log_level
     * @type ("error"|"warn"|"info"|"debug"|"trace")
     * @required
     */
    log_level: ("error"|"warn"|"info"|"debug"|"trace");
    /**
     * @name logging
     * @type boolean
     * @required
     */
    logging: boolean;
    /**
     * @name mqtt_password
     * @type string
     * @readonly
     * @required
     */
    mqtt_password: string;
    /**
     * @name mqtt_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    mqtt_port: number;
    /**
     * @name mqtt_username
     * @type string
     * @readonly
     * @required
     */
    mqtt_username: string;
    /**
     * @name server_is_online
     * @type boolean
     * @readonly
     * @required
     */
    server_is_online: boolean;
    /**
     * @name server_remote_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    server_remote_port: number;
    /**
     * @name server_url
     * @type string
     * @readonly
     * @required
     */
    server_url: string;
    /**
     * @name time_stamp_configuration
     * @type string
     * @format date-time
     * @required
     */
    time_stamp_configuration: string;
    /**
     * @name unique_identificator
     * @type string
     * @required
     */
    unique_identificator: string;
    /**
     * @name web_view_port
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    web_view_port: number;
}


/**
 * @name IHomerServerPublicDetail
 * @description: Json Model for Person_Short_Detail
 */
export interface IHomerServerPublicDetail {
    /**
     * @name online_state
     * @type boolean
     * @readonly
     * @required
     */
    online_state: boolean;
    /**
     * @name personal_server_name
     * @type string
     * @readonly
     * @required
     */
    personal_server_name: string;
    /**
     * @name unique_identificator
     * @type string
     * @readonly
     * @required
     */
    unique_identificator: string;
}


/**
 * @name IInstanceEdit
 * @description: Interface IInstanceEdit definition
 */
export interface IInstanceEdit {
    /**
     * @name description
     * @type string
     * @description Description
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 0 and 255 characters.
     * @required
     */
    name: string;
}


/**
 * @name IInstanceFilter
 * @description: Interface IInstanceFilter definition
 */
export interface IInstanceFilter {
    /**
     * @name instance_types
     * @type string[]
     */
    instance_types?: string[];
    /**
     * @name page_number
     * @type number
     * @description page_number from 1 to N 
     * @format int32
     */
    page_number?: number;
    /**
     * @name project_id
     * @type string
     */
    project_id?: string;
    /**
     * @name server_unique_names
     * @type string[]
     */
    server_unique_names?: string[];
}


/**
 * @name IInstanceGridAppSettings
 * @description: Json Model for changing parameters on Gridd App in instance
 */
export interface IInstanceGridAppSettings {
    /**
     * @name m_program_parameter_id
     * @type string
     * @required
     */
    m_program_parameter_id: string;
    /**
     * @name snapshot_settings
     * @type string
     * @required
     */
    snapshot_settings: string;
}


/**
 * @name IInstanceList
 * @description: List of instancies by Filter Query
 */
export interface IInstanceList {
    /**
     * @name content
     * @type IHomerInstance[]
     * @readonly
     * @required
     */
    content: IHomerInstance[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IInstanceShortDetail
 * @description: Instance Light (only few properties)
 */
export interface IInstanceShortDetail {
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name b_program_version_id
     * @type string
     * @readonly
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @readonly
     * @required
     */
    b_program_version_name: string;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name instance_status
     * @type ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server")
     * @readonly
     * @required
     */
    instance_status: ("not_yet_first_connected"|"synchronization_in_progress"|"offline"|"online"|"unknown_lost_connection_with_server");
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_is_online
     * @type boolean
     * @readonly
     * @required
     */
    server_is_online: boolean;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IInternalServerError
 * @description: When server is in fault state
 */
export interface IInternalServerError {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IInvalidBody
 * @description: Provided body is not valid. Something is missing or some field input is not allowed.
 */
export interface IInvalidBody {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name exception
     * @type IJsonNode
     * @readonly
     * @required
     */
    exception: IJsonNode;
    /**
     * @name message
     * @type string
     * @description message
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IInvoice
 * @description: Model of Invoice
 */
export interface IInvoice {
    /**
     * @name created
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name gw_url
     * @type string
     * @description Visible only when the invoice is not paid
     */
    gw_url?: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name invoice_items
     * @type IInvoiceItem[]
     * @readonly
     * @required
     */
    invoice_items: IInvoiceItem[];
    /**
     * @name invoice_number
     * @type string
     * @readonly
     * @required
     */
    invoice_number: string;
    /**
     * @name invoice_pdf_link
     * @type string
     * @description Visible only when the invoice is available
     * @readonly
     * @required
     */
    invoice_pdf_link: string;
    /**
     * @name overdue
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    overdue: number;
    /**
     * @name paid
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    paid: number;
    /**
     * @name payment_method
     * @type string
     * @readonly
     * @required
     */
    payment_method: string;
    /**
     * @name payment_status
     * @type string
     * @readonly
     * @required
     */
    payment_status: string;
    /**
     * @name price
     * @type number
     * @format double
     * @readonly
     * @required
     */
    price: number;
    /**
     * @name proforma_pdf_link
     * @type string
     * @description Visible only when the invoice is available
     * @readonly
     * @required
     */
    proforma_pdf_link: string;
    /**
     * @name require_payment
     * @type boolean
     * @description Visible only when the invoice is not paid
     * @readonly
     * @required
     */
    require_payment: boolean;
}


/**
 * @name IInvoiceItem
 * @description: Model of InvoiceItem
 */
export interface IInvoiceItem {
    /**
     * @name currency
     * @type ("CZK"|"EUR"|"USD")
     * @required
     */
    currency: ("CZK"|"EUR"|"USD");
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name quantity
     * @type number
     * @format int64
     * @required
     */
    quantity: number;
    /**
     * @name unit_name
     * @type string
     * @required
     */
    unit_name: string;
    /**
     * @name unit_price
     * @type number
     * @format double
     */
    unit_price?: number;
    /**
     * @name unit_price_without_vat
     * @type number
     * @format double
     * @readonly
     * @required
     */
    unit_price_without_vat: number;
    /**
     * @name vat
     * @type number
     * @format int64
     * @required
     */
    vat: number;
    /**
     * @name vat_rate
     * @type string
     * @readonly
     * @required
     */
    vat_rate: string;
}


/**
 * @name IInvoiceFullDetails
 * @description: Json Model for new Producer
 */
export interface IInvoiceFullDetails {
    /**
     * @name invoice
     * @type IInvoice
     * @required
     */
    invoice: IInvoice;
    /**
     * @name invoice_items
     * @type IInvoiceItem[]
     * @required
     */
    invoice_items: IInvoiceItem[];
}


/**
 * @name IJsonNode
 * @description: Interface IJsonNode definition
 */
export interface IJsonNode {
    /**
     * @name array
     * @type boolean
     * @required
     */
    array: boolean;
    /**
     * @name bigDecimal
     * @type boolean
     * @required
     */
    bigDecimal: boolean;
    /**
     * @name bigInteger
     * @type boolean
     * @required
     */
    bigInteger: boolean;
    /**
     * @name binary
     * @type boolean
     * @required
     */
    binary: boolean;
    /**
     * @name boolean
     * @type boolean
     * @required
     */
    boolean: boolean;
    /**
     * @name containerNode
     * @type boolean
     * @required
     */
    containerNode: boolean;
    /**
     * @name double
     * @type boolean
     * @required
     */
    double: boolean;
    /**
     * @name float
     * @type boolean
     * @required
     */
    float: boolean;
    /**
     * @name floatingPointNumber
     * @type boolean
     * @required
     */
    floatingPointNumber: boolean;
    /**
     * @name int
     * @type boolean
     * @required
     */
    int: boolean;
    /**
     * @name integralNumber
     * @type boolean
     * @required
     */
    integralNumber: boolean;
    /**
     * @name long
     * @type boolean
     * @required
     */
    long: boolean;
    /**
     * @name missingNode
     * @type boolean
     * @required
     */
    missingNode: boolean;
    /**
     * @name nodeType
     * @type ("ARRAY"|"BINARY"|"BOOLEAN"|"MISSING"|"NULL"|"NUMBER"|"OBJECT"|"POJO"|"STRING")
     * @required
     */
    nodeType: ("ARRAY"|"BINARY"|"BOOLEAN"|"MISSING"|"NULL"|"NUMBER"|"OBJECT"|"POJO"|"STRING");
    /**
     * @name null
     * @type boolean
     * @required
     */
    null: boolean;
    /**
     * @name number
     * @type boolean
     * @required
     */
    number: boolean;
    /**
     * @name object
     * @type boolean
     * @required
     */
    object: boolean;
    /**
     * @name pojo
     * @type boolean
     * @required
     */
    pojo: boolean;
    /**
     * @name short
     * @type boolean
     * @required
     */
    short: boolean;
    /**
     * @name textual
     * @type boolean
     * @required
     */
    textual: boolean;
    /**
     * @name valueNode
     * @type boolean
     * @required
     */
    valueNode: boolean;
}


/**
 * @name ILibrary
 * @description: Model of Library
 */
export interface ILibrary {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name type_of_boards
     * @type ITypeOfBoard[]
     * @required
     */
    type_of_boards: ITypeOfBoard[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type ILibraryVersionShortDetail[]
     */
    versions?: ILibraryVersionShortDetail[];
}


/**
 * @name ILibraryFilter
 * @description: Json Model for getting Library Filter List
 */
export interface ILibraryFilter {
    /**
     * @name inlclude_public
     * @type boolean
     */
    inlclude_public?: boolean;
    /**
     * @name project_id
     * @type string
     */
    project_id?: string;
}


/**
 * @name ILibraryLibraryVersionPair
 * @description: Json Model for Pari With Short detail of Library and Version of Library
 */
export interface ILibraryLibraryVersionPair {
    /**
     * @name library_short_detail
     * @type ILibraryShortDetail
     * @required
     */
    library_short_detail: ILibraryShortDetail;
    /**
     * @name library_version_short_detail
     * @type ILibraryVersionShortDetail
     * @required
     */
    library_version_short_detail: ILibraryVersionShortDetail;
}


/**
 * @name ILibraryList
 * @description: Individual Library List
 */
export interface ILibraryList {
    /**
     * @name content
     * @type ILibraryShortDetail[]
     * @readonly
     * @required
     */
    content: ILibraryShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ILibraryNew
 * @description: Json Model for new Library
 */
export interface ILibraryNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 8 and 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters, must be unique!
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Project ID only for private libraries. For Public, permission is required. Its Required only for Creating, For update is used previous settings. 
     * @required
     */
    project_id: string;
}


/**
 * @name ILibraryRecord
 * @description: Json Model for Library_Record
 */
export interface ILibraryRecord {
    /**
     * @name content
     * @type string
     * @required
     */
    content: string;
    /**
     * @name file_name
     * @type string
     * @required
     */
    file_name: string;
}


/**
 * @name ILibraryShortDetail
 * @description: Json Model for Library Short Detail
 */
export interface ILibraryShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_board_names
     * @type string[]
     * @readonly
     * @required
     */
    type_of_board_names: string[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ILibraryVersion
 * @description: Json Model for Library_Version
 */
export interface ILibraryVersion {
    /**
     * @name author
     * @type IPersonShortDetail
     * @description Optional value
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name examples
     * @type IExampleShortDetail[]
     * @readonly
     * @required
     */
    examples: IExampleShortDetail[];
    /**
     * @name files
     * @type ILibraryRecord[]
     * @readonly
     * @required
     */
    files: ILibraryRecord[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name ILibraryVersionNew
 * @description: Json Model for new Version of Library
 */
export interface ILibraryVersionNew {
    /**
     * @name files
     * @type ILibraryRecord[]
     */
    files?: ILibraryRecord[];
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ILibraryVersionShortDetail
 * @description: Json Model for Library_Version_Short_Detail
 */
export interface ILibraryVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @description Optional value
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IListOfBoards
 * @description: Json Model with List of Board ID
 */
export interface IListOfBoards {
    /**
     * @name board_pairs
     * @type IConnectedBoardIN[]
     * @description List of Pairs for settings of Backup C_Program Version on boards
     * @required
     */
    board_pairs: IConnectedBoardIN[];
}


/**
 * @name ILogin
 * @description: Json Model for new Basic Login
 */
export interface ILogin {
    /**
     * @name mail
     * @type string
     * @required
     */
    mail: string;
    /**
     * @name password
     * @type string
     * @required
     */
    password: string;
}


/**
 * @name ILoginResult
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginResult {
    /**
     * @name permissions
     * @type string[]
     * @description List of all person permission (private and all collections from Person Roles ("SecurityRole") 
     * @readonly
     * @required
     */
    permissions: string[];
    /**
     * @name person
     * @type IPerson
     * @readonly
     * @required
     */
    person: IPerson;
    /**
     * @name roles
     * @type ISecurityRole[]
     * @description List of roles, that
     * @readonly
     * @required
     */
    roles: ISecurityRole[];
}


/**
 * @name ILoginToken
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginToken {
    /**
     * @name authToken
     * @type string
     * @description X-AUTH-TOKEN - used this token in HTML head for verifying the identities
     * @readonly
     * @required
     */
    authToken: string;
}


/**
 * @name IMProgram
 * @description: Model of M_Program
 */
export interface IMProgram {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time stamp in millis
     * @example 1458315085338
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name m_project_id
     * @type string
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type IMProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    program_versions: IMProgramVersionShortDetail[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IMProgramNew
 * @description: Json Model for new M_Program
 */
export interface IMProgramNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IMProgramShortDetailForBlocko
 * @description: Interface IMProgramShortDetailForBlocko definition
 */
export interface IMProgramShortDetailForBlocko {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name versions
     * @type IMProgramVersionsShortDetailForBlocko[]
     * @readonly
     * @required
     */
    versions: IMProgramVersionsShortDetailForBlocko[];
}


/**
 * @name IMProgramSnapShot
 * @description: Interface IMProgramSnapShot definition
 */
export interface IMProgramSnapShot {
    /**
     * @name m_program_id
     * @type string
     * @required
     */
    m_program_id: string;
    /**
     * @name version_object_id
     * @type string
     * @required
     */
    version_object_id: string;
}


/**
 * @name IMProgramVersion
 * @description: Json Model for Version of M_program
 */
export interface IMProgramVersion {
    /**
     * @name m_code
     * @type string
     * @readonly
     * @required
     */
    m_code: string;
    /**
     * @name public_mode
     * @type boolean
     * @readonly
     * @required
     */
    public_mode: boolean;
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramVersionEdit
 * @description: Json Model for edit Version of M_program
 */
export interface IMProgramVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IMProgramVersionInterface
 * @description: Json Model for Version of M_program
 */
export interface IMProgramVersionInterface {
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramVersionNew
 * @description: Json Model for new Version of M_program
 */
export interface IMProgramVersionNew {
    /**
     * @name m_code
     * @type string
     * @required
     */
    m_code: string;
    /**
     * @name public_mode
     * @type boolean
     * @description if value is true - program can be open throw the QR token (public) by everyone!
     */
    public_mode?: boolean;
    /**
     * @name version_description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
    /**
     * @name virtual_input_output
     * @type string
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramVersionShortDetail
 * @description: Json Model with details of M_Program_Version>
 */
export interface IMProgramVersionShortDetail {
    /**
     * @name author
     * @type IPersonShortDetail
     * @readonly
     * @required
     */
    author: IPersonShortDetail;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IMProgramVersionsShortDetailForBlocko
 * @description: Interface IMProgramVersionsShortDetailForBlocko definition
 */
export interface IMProgramVersionsShortDetailForBlocko {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramInterface
 * @description: Json Model that contain values with accessible interface of virtual_input_output under M_programs (auto_incrementing == false) or head M_Program.virtual_input_output if auto_incrementing is True
 */
export interface IMProgramInterface {
    /**
     * @name accessible_versions
     * @type IMProgramVersionInterface[]
     * @required
     */
    accessible_versions: IMProgramVersionInterface[];
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
}


/**
 * @name IMProject
 * @description: Model of M_Project
 */
export interface IMProject {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time stamp in millis
     * @example 14618543121234
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @description can be empty
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name m_programs
     * @type ISwaggerMProgramShortDetail[]
     * @required
     */
    m_programs: ISwaggerMProgramShortDetail[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IMProjectNew
 * @description: Json Model for update M_Project
 */
export interface IMProjectNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IMProjectShortDetail
 * @description: Json Model M_Project - only basic information
 */
export interface IMProjectShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name programs
     * @type ISwaggerMProgramShortDetail[]
     * @readonly
     * @required
     */
    programs: ISwaggerMProgramShortDetail[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IMProjectShortDetailForBlocko
 * @description: Interface IMProjectShortDetailForBlocko definition
 */
export interface IMProjectShortDetailForBlocko {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name m_programs
     * @type IMProgramShortDetailForBlocko[]
     * @readonly
     * @required
     */
    m_programs: IMProgramShortDetailForBlocko[];
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IMProjectSnapShot
 * @description: Interface IMProjectSnapShot definition
 */
export interface IMProjectSnapShot {
    /**
     * @name m_program_snapshots
     * @type IMProgramSnapShot[]
     * @description Connected boards
     * @required
     */
    m_program_snapshots: IMProgramSnapShot[];
    /**
     * @name m_project_id
     * @type string
     * @required
     */
    m_project_id: string;
}


/**
 * @name IMProjectSnapShotDetail
 * @description: Model of Snapshot of versions of M_Project Snapshots
 */
export interface IMProjectSnapShotDetail {
    /**
     * @name admin_permission
     * @type boolean
     * @readonly
     * @required
     */
    admin_permission: boolean;
    /**
     * @name m_program_snapshots
     * @type IModelMProgramInstanceParameter[]
     * @required
     */
    m_program_snapshots: IModelMProgramInstanceParameter[];
    /**
     * @name m_project_description
     * @type string
     * @readonly
     * @required
     */
    m_project_description: string;
    /**
     * @name m_project_id
     * @type string
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name m_project_name
     * @type string
     * @readonly
     * @required
     */
    m_project_name: string;
    /**
     * @name share_permission
     * @type boolean
     * @readonly
     * @required
     */
    share_permission: boolean;
    /**
     * @name unshare_permission
     * @type boolean
     * @readonly
     * @required
     */
    unshare_permission: boolean;
}


/**
 * @name IMProjectInterface
 * @description: Json Model that contain values with accessible interface of virtual_input_output under M_project (auto_incrementing == false) or head M_project.M_program.virtual_input_output if auto_incrementing is True
 */
export interface IMProjectInterface {
    /**
     * @name accessible_interface
     * @type IMProgramInterface[]
     * @readonly
     * @required
     */
    accessible_interface: IMProgramInterface[];
    /**
     * @name auto_incrementing
     * @type boolean
     * @readonly
     * @required
     */
    auto_incrementing: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IModelMProgramInstanceParameter
 * @description: Interface IModelMProgramInstanceParameter definition
 */
export interface IModelMProgramInstanceParameter {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name grid_app_url
     * @type string
     * @readonly
     * @required
     */
    grid_app_url: string;
    /**
     * @name id
     * @type string
     * @format uuid
     * @required
     */
    id: string;
    /**
     * @name m_program_description
     * @type string
     * @readonly
     * @required
     */
    m_program_description: string;
    /**
     * @name m_program_id
     * @type string
     * @readonly
     * @required
     */
    m_program_id: string;
    /**
     * @name m_program_name
     * @type string
     * @readonly
     * @required
     */
    m_program_name: string;
    /**
     * @name snapshot_settings
     * @type ("absolutely_public"|"only_for_project_members"|"not_in_instance")
     * @readonly
     * @required
     */
    snapshot_settings: ("absolutely_public"|"only_for_project_members"|"not_in_instance");
    /**
     * @name version_object_description
     * @type string
     * @readonly
     * @required
     */
    version_object_description: string;
    /**
     * @name version_object_id
     * @type string
     * @readonly
     * @required
     */
    version_object_id: string;
    /**
     * @name version_object_name
     * @type string
     * @readonly
     * @required
     */
    version_object_name: string;
}


/**
 * @name INotFound
 * @description: Requested entity was not found
 */
export interface INotFound {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name INotValidated
 * @description: When account is not validated.
 */
export interface INotValidated {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description message
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name INotification
 * @description: Model of Notification
 */
export interface INotification {
    /**
     * @name buttons
     * @type INotificationButton[]
     * @readonly
     * @required
     */
    buttons: INotificationButton[];
    /**
     * @name confirmation_required
     * @type boolean
     * @required
     */
    confirmation_required: boolean;
    /**
     * @name confirmed
     * @type boolean
     * @required
     */
    confirmed: boolean;
    /**
     * @name created
     * @type number
     * @description UNIX time in ms
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name message_channel
     * @type string
     * @readonly
     * @required
     */
    message_channel: string;
    /**
     * @name message_type
     * @type string
     * @readonly
     * @required
     */
    message_type: string;
    /**
     * @name notification_body
     * @type INotificationElement[]
     * @readonly
     * @required
     */
    notification_body: INotificationElement[];
    /**
     * @name notification_importance
     * @type ("low"|"normal"|"high")
     * @required
     */
    notification_importance: ("low"|"normal"|"high");
    /**
     * @name notification_level
     * @type ("info"|"success"|"warning"|"error")
     * @required
     */
    notification_level: ("info"|"success"|"warning"|"error");
    /**
     * @name notification_type
     * @type ("CHAIN_START"|"CHAIN_UPDATE"|"CHAIN_END"|"INDIVIDUAL")
     * @required
     */
    notification_type: ("CHAIN_START"|"CHAIN_UPDATE"|"CHAIN_END"|"INDIVIDUAL");
    /**
     * @name was_read
     * @type boolean
     * @required
     */
    was_read: boolean;
}


/**
 * @name INotificationButton
 * @description: Json Model for notification buttons
 */
export interface INotificationButton {
    /**
     * @name action
     * @type ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification")
     * @required
     */
    action: ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification");
    /**
     * @name bold
     * @type boolean
     * @required
     */
    bold: boolean;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name italic
     * @type boolean
     * @required
     */
    italic: boolean;
    /**
     * @name payload
     * @type string
     * @required
     */
    payload: string;
    /**
     * @name text
     * @type string
     * @required
     */
    text: string;
    /**
     * @name underline
     * @type boolean
     * @required
     */
    underline: boolean;
}


/**
 * @name INotificationConfirm
 * @description: Json Model for confirming notification
 */
export interface INotificationConfirm {
    /**
     * @name action
     * @type ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification")
     * @description Notification_action
     * @required
     */
    action: ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification");
    /**
     * @name payload
     * @type string
     * @description Notification payload
     * @required
     */
    payload: string;
}


/**
 * @name INotificationElement
 * @description: Json Model for notification body elements
 */
export interface INotificationElement {
    /**
     * @name bold
     * @type boolean
     * @required
     */
    bold: boolean;
    /**
     * @name button
     * @type boolean
     * @required
     */
    button: boolean;
    /**
     * @name color
     * @type string
     */
    color?: string;
    /**
     * @name date
     * @type string
     * @format date-time
     */
    date?: string;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name italic
     * @type boolean
     * @required
     */
    italic: boolean;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name program_id
     * @type string
     */
    program_id?: string;
    /**
     * @name project_id
     * @type string
     */
    project_id?: string;
    /**
     * @name text
     * @type string
     */
    text?: string;
    /**
     * @name type
     * @type ("link"|"object"|"text"|"date"|"newLine")
     * @required
     */
    type: ("link"|"object"|"text"|"date"|"newLine");
    /**
     * @name underline
     * @type boolean
     * @required
     */
    underline: boolean;
    /**
     * @name url
     * @type string
     */
    url?: string;
}


/**
 * @name INotificationList
 * @description: Individual Notification List
 */
export interface INotificationList {
    /**
     * @name content
     * @type INotification[]
     * @readonly
     * @required
     */
    content: INotification[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
    /**
     * @name unread_total
     * @type number
     * @description Total unread subjects
     * @format int32
     * @readonly
     * @required
     */
    unread_total: number;
}


/**
 * @name INotificationRead
 * @description: Json Model for List with ids of read notifications
 */
export interface INotificationRead {
    /**
     * @name notification_id
     * @type string[]
     * @description List of notification.id
     * @required
     */
    notification_id: string[];
}


/**
 * @name IPair
 * @description: Interface IPair definition
 */
export interface IPair {
    /**
     * @name json_identifier
     * @type string
     * @readonly
     * @required
     */
    json_identifier: string;
    /**
     * @name user_description
     * @type string
     * @readonly
     * @required
     */
    user_description: string;
}


/**
 * @name IPaymentDetails
 * @description: Model of Payment_Details
 */
export interface IPaymentDetails {
    /**
     * @name bank_account
     * @type string
     * @description Used for billing and invoices
     */
    bank_account?: string;
    /**
     * @name city
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     * @required
     */
    company_account: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_phone?: string;
    /**
     * @name company_name
     * @type string
     * @description Only if Product is for business
     */
    company_name?: string;
    /**
     * @name company_registration_no
     * @type string
     * @description Only if Product is for business
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Only if Product is for business
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     * @description Only if Product is for business
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    country: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name full_name
     * @type string
     * @description Used for billing and invoices
     */
    full_name?: string;
    /**
     * @name id
     * @type number
     * @format int64
     * @required
     */
    id: number;
    /**
     * @name invoice_email
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    invoice_email: string;
    /**
     * @name street
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street_number: string;
    /**
     * @name zip_code
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    zip_code: string;
}


/**
 * @name IPermission
 * @description: Model of Permission
 */
export interface IPermission {
    /**
     * @name description
     * @type string
     * @description Description for "(static key)"
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name edit_person_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_person_permission: boolean;
    /**
     * @name value
     * @type string
     * @description Permission key - "(static key)"
     * @readonly
     * @required
     */
    value: string;
}


/**
 * @name IPersistenceContext
 * @description: Interface IPersistenceContext definition
 */
export interface IPersistenceContext {
}


/**
 * @name IPerson
 * @description: Model of Person
 */
export interface IPerson {
    /**
     * @name country
     * @type string
     * @required
     */
    country: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name full_name
     * @type string
     * @required
     */
    full_name: string;
    /**
     * @name gender
     * @type string
     * @required
     */
    gender: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name mail
     * @type string
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @required
     */
    nick_name: string;
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
}


/**
 * @name IPersonAuthentication
 * @description: Json Model for resending authentication email.
 */
export interface IPersonAuthentication {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
}


/**
 * @name IPersonChangeProperty
 * @description: Json Model for changing Person property
 */
export interface IPersonChangeProperty {
    /**
     * @name email
     * @type string
     * @description Valid mail 
     */
    email?: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     */
    password?: string;
    /**
     * @name property
     * @type string
     * @description Required property ('password' or 'email')
     * @required
     */
    property: string;
}


/**
 * @name IPersonNew
 * @description: Json Model for creating new Person
 */
export interface IPersonNew {
    /**
     * @name full_name
     * @type string
     * @description The full_name is not required. Max lenght is 60 characters.
     * @required
     */
    full_name: string;
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
}


/**
 * @name IPersonPasswordNew
 * @description: Json Model for recovering person password
 */
export interface IPersonPasswordNew {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
    /**
     * @name password_recovery_token
     * @type string
     * @description Required password_recovery_token
     * @required
     */
    password_recovery_token: string;
}


/**
 * @name IPersonPasswordRecoveryEmail
 * @description: Json Model for sending password recovery email
 */
export interface IPersonPasswordRecoveryEmail {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
}


/**
 * @name IPersonShortDetail
 * @description: Json Model for Person_Short_Detail
 */
export interface IPersonShortDetail {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name mail
     * @type string
     * @readonly
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @readonly
     * @required
     */
    nick_name: string;
}


/**
 * @name IPersonUpdate
 * @description: Json Model for update Person. (For password or email, you have to used separate API)
 */
export interface IPersonUpdate {
    /**
     * @name country
     * @type string
     * @description Where does the user come from.
     */
    country?: string;
    /**
     * @name full_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     */
    full_name?: string;
    /**
     * @name gender
     * @type ("male"|"female")
     * @description Gender of the user.
     */
    gender?: ("male"|"female");
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
}


/**
 * @name IPrice
 * @description: Interface IPrice definition
 */
export interface IPrice {
    /**
     * @name CZK
     * @type number
     * @description in Double - show CZK
     * @format double
     * @readonly
     * @required
     */
    CZK: number;
    /**
     * @name EUR
     * @type number
     * @description in Double - show €
     * @format double
     * @readonly
     * @required
     */
    EUR: number;
    /**
     * @name USD
     * @type number
     * @description in Double - show $
     * @format double
     * @readonly
     * @required
     */
    USD: number;
}


/**
 * @name IProcessor
 * @description: Model of Processor
 */
export interface IProcessor {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name processor_code
     * @type string
     * @required
     */
    processor_code: string;
    /**
     * @name processor_name
     * @type string
     * @required
     */
    processor_name: string;
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
}


/**
 * @name IProcessorNew
 * @description: Json Model for new Processor
 */
export interface IProcessorNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name processor_code
     * @type string
     * @description The Processor Code must have at least 4 characters
     * @required
     */
    processor_code: string;
    /**
     * @name processor_name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    processor_name: string;
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
}


/**
 * @name IProducer
 * @description: Model of Producer
 */
export interface IProducer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
}


/**
 * @name IProduct
 * @description: Model of Product
 */
export interface IProduct {
    /**
     * @name active
     * @type boolean
     * @required
     */
    active: boolean;
    /**
     * @name created
     * @type string
     * @format date-time
     * @required
     */
    created: string;
    /**
     * @name extensions
     * @type IProductExtension[]
     * @required
     */
    extensions: IProductExtension[];
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name invoices
     * @type IInvoice[]
     * @required
     */
    invoices: IInvoice[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name payment_details
     * @type IPaymentDetails
     * @required
     */
    payment_details: IPaymentDetails;
    /**
     * @name payment_method
     * @type string
     * @readonly
     * @required
     */
    payment_method: string;
    /**
     * @name remaining_credit
     * @type number
     * @format double
     * @readonly
     * @required
     */
    remaining_credit: number;
    /**
     * @name removed_by_user
     * @type boolean
     * @required
     */
    removed_by_user: boolean;
    /**
     * @name subscription_id
     * @type string
     * @required
     */
    subscription_id: string;
}


/**
 * @name IProductExtension
 * @description: Model of ProductExtension
 */
export interface IProductExtension {
    /**
     * @name act_deactivate_permission
     * @type boolean
     * @readonly
     * @required
     */
    act_deactivate_permission: boolean;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name created
     * @type string
     * @format date-time
     * @required
     */
    created: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name order_position
     * @type number
     * @format int32
     * @required
     */
    order_position: number;
    /**
     * @name price
     * @type IPrice
     * @readonly
     * @required
     */
    price: IPrice;
    /**
     * @name type
     * @type ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant")
     * @required
     */
    type: ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant");
}


/**
 * @name IProductExtensionEdit
 * @description: Json Model for updating extension of product.
 */
export interface IProductExtensionEdit {
    /**
     * @name color
     * @type string
     * @description Color
     */
    color?: string;
    /**
     * @name description
     * @type string
     * @description Description must not have more than 255 characters
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Name of extension
     */
    name?: string;
}


/**
 * @name IProductExtensionNew
 * @description: Json Model for creating new extension of product.
 */
export interface IProductExtensionNew {
    /**
     * @name color
     * @type string
     * @description Color of extension
     * @required
     */
    color: string;
    /**
     * @name count
     * @type number
     * @format int64
     */
    count?: number;
    /**
     * @name description
     * @type string
     * @description Description must not have more than 255 characters
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Name of extension
     * @required
     */
    name: string;
    /**
     * @name product_id
     * @type string
     * @description Id of product to extend
     * @required
     */
    product_id: string;
    /**
     * @name type
     * @type ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant")
     * @description Enumerated type of extension
     * @required
     */
    type: ("project"|"log"|"database"|"rest_api"|"support"|"instance"|"homer_server"|"participant");
}


/**
 * @name IProductExtensionType
 * @description: Json Model for ProductExtension_Type
 */
export interface IProductExtensionType {
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name monthly_price
     * @type number
     * @format double
     * @readonly
     * @required
     */
    monthly_price: number;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IProductCredit
 * @description: Json Model for buying credit for Product
 */
export interface IProductCredit {
    /**
     * @name credit
     * @type number
     * @description Double number - amount of credit to be bought.
     * @format double
     * @required
     */
    credit: number;
}


/**
 * @name IProductEdit
 * @description: Json Model for Product Edit
 */
export interface IProductEdit {
    /**
     * @name name
     * @type string
     * @description Required: always. The name length must be between 4 and 60 characters
     * @required
     */
    name: string;
}


/**
 * @name IProductNew
 * @description: Json Model if user wants to create new Product for projects
 */
export interface IProductNew {
    /**
     * @name city
     * @type string
     * @description Required: alwaysThe city must have at least 2 characters
     * @required
     */
    city: string;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if account is businessThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if account is businessThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_name
     * @type string
     * @description Required: only if account is businessThe company_name must have at least 4 characters
     */
    company_name?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if account is businessThe company_web must have at least 4 characters
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Required: alwaysThe country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name extension_ids
     * @type string[]
     * @description List of Ids of Extensions
     */
    extension_ids?: string[];
    /**
     * @name full_name
     * @type string
     * @description Can be null
     */
    full_name?: string;
    /**
     * @name invoice_email
     * @type string
     * @description Required: always, Email must be valid
     * @required
     */
    invoice_email: string;
    /**
     * @name name
     * @type string
     * @description Required: always. The name length must be between 4 and 60 characters
     * @required
     */
    name: string;
    /**
     * @name payment_method
     * @type ("bank_transfer"|"credit_card"|"free")
     * @description Required: only in if payment_method_required is true  values =>[bank_transfer, credit_card]
     */
    payment_method?: ("bank_transfer"|"credit_card"|"free");
    /**
     * @name registration_no
     * @type string
     * @description Required: only if account is businessThe company_registration_no must have at least 4 characters - FOR non-EU countriesfor Business account is required registration_no OR vat_number
     */
    registration_no?: string;
    /**
     * @name street
     * @type string
     * @description Required: alwaysThe street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: alwaysBut The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name tariff_id
     * @type string
     * @description Required: always, Tariff id
     * @required
     */
    tariff_id: string;
    /**
     * @name vat_number
     * @type string
     * @description Required: only if account is business & from EU!!! CZ28496639 The VAT_number must have at least 4 charactersfor Business account is required registration_no OR vat_number
     */
    vat_number?: string;
    /**
     * @name zip_code
     * @type string
     * @description Required: alwaysThe zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name IProject
 * @description: Model of Project
 */
export interface IProject {
    /**
     * @name active
     * @type boolean
     * @readonly
     * @required
     */
    active: boolean;
    /**
     * @name admin_permission
     * @type boolean
     * @readonly
     * @required
     */
    admin_permission: boolean;
    /**
     * @name b_programs
     * @type IBProgramShortDetail[]
     * @required
     */
    b_programs: IBProgramShortDetail[];
    /**
     * @name boards
     * @type IBoardShortDetail[]
     * @required
     */
    boards: IBoardShortDetail[];
    /**
     * @name c_private_libraries
     * @type ILibraryShortDetail[]
     * @readonly
     * @required
     */
    c_private_libraries: ILibraryShortDetail[];
    /**
     * @name c_programs
     * @type ICProgramShortDetail[]
     * @required
     */
    c_programs: ICProgramShortDetail[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name instancies
     * @type IInstanceShortDetail[]
     * @readonly
     * @required
     */
    instancies: IInstanceShortDetail[];
    /**
     * @name m_projects
     * @type IMProjectShortDetail[]
     * @required
     */
    m_projects: IMProjectShortDetail[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name participants
     * @type IProjectParticipant[]
     * @required
     */
    participants: IProjectParticipant[];
    /**
     * @name product_id
     * @type string
     * @readonly
     * @required
     */
    product_id: string;
    /**
     * @name product_name
     * @type string
     * @readonly
     * @required
     */
    product_name: string;
    /**
     * @name share_permission
     * @type boolean
     * @readonly
     * @required
     */
    share_permission: boolean;
    /**
     * @name type_of_blocks
     * @type ITypeOfBlockShortDetail[]
     * @required
     */
    type_of_blocks: ITypeOfBlockShortDetail[];
    /**
     * @name type_of_widgets
     * @type ITypeOfWidgetShortDetail[]
     * @required
     */
    type_of_widgets: ITypeOfWidgetShortDetail[];
    /**
     * @name unshare_permission
     * @type boolean
     * @readonly
     * @required
     */
    unshare_permission: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IProjectEdit
 * @description: Json Model for Edit Project
 */
export interface IProjectEdit {
    /**
     * @name project_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    project_description: string;
    /**
     * @name project_name
     * @type string
     * @description Length must be between 8 and 60 characters, must be unique!
     * @required
     */
    project_name: string;
}


/**
 * @name IProjectNew
 * @description: Json Model for new General Project
 */
export interface IProjectNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters, must be unique!
     * @required
     */
    name: string;
    /**
     * @name product_id
     * @type string
     * @description Id of Product (Tariff) where the project will be registered
     * @required
     */
    product_id: string;
}


/**
 * @name IProjectParticipantStatus
 * @description: Json Model for changing Project_participant status
 */
export interface IProjectParticipantStatus {
    /**
     * @name person_id
     * @type string
     * @description Participant id
     * @required
     */
    person_id: string;
    /**
     * @name state
     * @type ("admin"|"member")
     * @description Status
     * @required
     */
    state: ("admin"|"member");
}


/**
 * @name IProjectShortDetail
 * @description: Json Model for specific Project DashBoard 
 */
export interface IProjectShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name product_id
     * @type string
     * @readonly
     * @required
     */
    product_id: string;
    /**
     * @name product_name
     * @type string
     * @readonly
     * @required
     */
    product_name: string;
    /**
     * @name project_description
     * @type string
     * @readonly
     * @required
     */
    project_description: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name project_name
     * @type string
     * @readonly
     * @required
     */
    project_name: string;
    /**
     * @name status
     * @type boolean
     * @readonly
     * @required
     */
    status: boolean;
}


/**
 * @name IProjectParticipant
 * @description: Model of Project_participant
 */
export interface IProjectParticipant {
    /**
     * @name full_name
     * @type string
     * @readonly
     * @required
     */
    full_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name state
     * @type ("owner"|"admin"|"member"|"invited")
     * @required
     */
    state: ("owner"|"admin"|"member"|"invited");
    /**
     * @name user_email
     * @type string
     * @required
     */
    user_email: string;
}


/**
 * @name IResendEmail
 * @description: Json Model for change description for Permission
 */
export interface IResendEmail {
    /**
     * @name mail
     * @type string
     * @description Email is optional value! If it is empty, default invoice email will be used.
     */
    mail?: string;
}


/**
 * @name IResult
 * @description: Interface IResult definition
 */
export interface IResult {
}


/**
 * @name IResultOk
 * @description: Interface IResultOk definition
 */
export interface IResultOk {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User. Server fills the message only when it is important.
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name ISecurityRole
 * @description: Model of SecurityRole
 */
export interface ISecurityRole {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name person_permissions_id
     * @type string[]
     * @readonly
     * @required
     */
    person_permissions_id: string[];
    /**
     * @name persons_id
     * @type string[]
     * @readonly
     * @required
     */
    persons_id: string[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ISecurityRoleNew
 * @description: Json Model for new SecurityRole (Group)
 */
export interface ISecurityRoleNew {
    /**
     * @name description
     * @type string
     * @description Not required, But strongly recommended, Maximum length is 255 characters
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IServerOffline
 * @description: External servers (compilation, blocko cloud_blocko_server etc.) are offline
 */
export interface IServerOffline {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IShareProjectPerson
 * @description: Json Model for sharing project with Persons
 */
export interface IShareProjectPerson {
    /**
     * @name persons_mail
     * @type string[]
     * @required
     */
    persons_mail: string[];
}


/**
 * @name ISocialNetworkLogin
 * @description: Json Model for logi via Facebook, Github etc.
 */
export interface ISocialNetworkLogin {
    /**
     * @name redirect_url
     * @type string
     * @required
     */
    redirect_url: string;
}


/**
 * @name ISocialLogin
 * @description: Json Model for new Basic Login throw the social networks
 */
export interface ISocialLogin {
    /**
     * @name authToken
     * @type string
     * @description token, that you have to used in HTML head for verifying the identities
     * @readonly
     * @required
     */
    authToken: string;
    /**
     * @name redirect_url
     * @type string
     * @description URL that you have to redirect user
     * @readonly
     * @required
     */
    redirect_url: string;
    /**
     * @name type
     * @type ("Facebook"|"GitHub")
     * @readonly
     * @required
     */
    type: ("Facebook"|"GitHub");
}


/**
 * @name ISwaggerGridWidgetVersionGridAppSource
 * @description: Interface ISwaggerGridWidgetVersionGridAppSource definition
 */
export interface ISwaggerGridWidgetVersionGridAppSource {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @readonly
     * @required
     */
    logic_json: string;
}


/**
 * @name ISwaggerMProgramShortDetail
 * @description: Interface ISwaggerMProgramShortDetail definition
 */
export interface ISwaggerMProgramShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     */
    delete_permission?: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     */
    edit_permission?: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name ISystemAccess
 * @description: Json Model for System Access>
 */
export interface ISystemAccess {
    /**
     * @name permissions
     * @type IPermission[]
     * @readonly
     * @required
     */
    permissions: IPermission[];
    /**
     * @name roles
     * @type ISecurityRole[]
     * @readonly
     * @required
     */
    roles: ISecurityRole[];
}


/**
 * @name ITariff
 * @description: Model of Tariff
 */
export interface ITariff {
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name company_details_required
     * @type boolean
     * @required
     */
    company_details_required: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name extensions_included
     * @type IProductExtension[]
     */
    extensions_included?: IProductExtension[];
    /**
     * @name extensions_optional
     * @type IProductExtension[]
     */
    extensions_optional?: IProductExtension[];
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name identifier
     * @type string
     * @required
     */
    identifier: string;
    /**
     * @name labels
     * @type ITariffLabel[]
     * @required
     */
    labels: ITariffLabel[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name payment_currency
     * @type string[]
     * @readonly
     * @required
     */
    payment_currency: string[];
    /**
     * @name payment_method_required
     * @type boolean
     * @required
     */
    payment_method_required: boolean;
    /**
     * @name payment_methods
     * @type IPair[]
     * @readonly
     * @required
     */
    payment_methods: IPair[];
    /**
     * @name price
     * @type IPrice
     * @readonly
     * @required
     */
    price: IPrice;
}


/**
 * @name ITariffLabel
 * @description: Model of TariffLabel
 */
export interface ITariffLabel {
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name icon
     * @type string
     * @required
     */
    icon: string;
    /**
     * @name label
     * @type string
     * @required
     */
    label: string;
}


/**
 * @name ITariffDetailsEdit
 * @description: Json Model with List of Board ID
 */
export interface ITariffDetailsEdit {
    /**
     * @name city
     * @type string
     * @description Required: alwaysThe city must have at least 4 characters
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     * @description Required: only if user want have business account
     */
    company_account?: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_name
     * @type string
     * @description Required: only if company_account = trueThe company_name must have at least 4 characters
     */
    company_name?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if company_account = trueThe company_web url must be valid 
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Required: alwaysThe country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name invoice_email
     * @type string
     * @description Required: always. Email must be valid
     * @required
     */
    invoice_email: string;
    /**
     * @name registration_no
     * @type string
     * @description Required: only if company_account = trueThe company_registration_no must have at least 4 characters
     */
    registration_no?: string;
    /**
     * @name street
     * @type string
     * @description Required: alwaysThe street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: alwaysBut The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name vat_number
     * @type string
     * @description Required: only if company_account = true And VAT_number is required only for EU Customers.The VAT_number must have at least 4 characters
     * @example CZ28496639
     */
    vat_number?: string;
    /**
     * @name zip_code
     * @type string
     * @description Required: alwaysThe zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name ITerminalConnectionSummary
 * @description: Interface ITerminalConnectionSummary definition
 */
export interface ITerminalConnectionSummary {
    /**
     * @name grid_app_url
     * @type string
     * @description WS address -> replaces token in URL by verified token from the other APIs if its required by query
     * @readonly
     * @required
     */
    grid_app_url: string;
    /**
     * @name instance_id
     * @type string
     * @description Generated Token used for public programs, use as standard verification token
     * @readonly
     * @required
     */
    instance_id: string;
    /**
     * @name m_program
     * @type string
     * @description M Program code in String
     * @readonly
     * @required
     */
    m_program: string;
    /**
     * @name m_program_id
     * @type string
     * @description M Program code in String
     * @readonly
     * @required
     */
    m_program_id: string;
    /**
     * @name m_program_version_id
     * @type string
     * @description M Program code in String
     * @readonly
     * @required
     */
    m_program_version_id: string;
    /**
     * @name m_project_id
     * @type string
     * @description M Program code in String
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name source_code_list
     * @type ISwaggerGridWidgetVersionGridAppSource[]
     * @description Generated Token used for public programs, use as standard verification token
     * @readonly
     * @required
     */
    source_code_list: ISwaggerGridWidgetVersionGridAppSource[];
}


/**
 * @name ITypeOfBlock
 * @description: Model of TypeOfBlock
 */
export interface ITypeOfBlock {
    /**
     * @name blocks
     * @type IBlockoBlockShortDetail[]
     * @readonly
     * @required
     */
    blocks: IBlockoBlockShortDetail[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description This value will be in Json only if TypeOfBlock is private!
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBlockNew
 * @description: Json Model for new TypeOfBlock
 */
export interface ITypeOfBlockNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description If you want make private TypeOfBlock group. You have to have "project_id" parameter in Json., Value can be null or contains project_id
     */
    project_id?: string;
}


/**
 * @name ITypeOfBlockShortDetail
 * @description: TypeOfBlock details Json model (only few properties)
 */
export interface ITypeOfBlockShortDetail {
    /**
     * @name blocko_blocks
     * @type IBlockoBlockShortDetail[]
     * @readonly
     * @required
     */
    blocko_blocks: IBlockoBlockShortDetail[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBoard
 * @description: Model of TypeOfBoard
 */
export interface ITypeOfBoard {
    /**
     * @name connectible_to_internet
     * @type boolean
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name main_boot_loader
     * @type IBootLoader
     * @required
     */
    main_boot_loader: IBootLoader;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
    /**
     * @name producer_id
     * @type string
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name register_new_device_permission
     * @type boolean
     * @readonly
     * @required
     */
    register_new_device_permission: boolean;
    /**
     * @name revision
     * @type string
     * @required
     */
    revision: string;
    /**
     * @name target_name
     * @type string
     * @readonly
     * @required
     */
    target_name: string;
}


/**
 * @name ITypeOfBoardNew
 * @description: Json Model for new TypeOfBoard
 */
export interface ITypeOfBoardNew {
    /**
     * @name compiler_target_name
     * @type string
     * @description The description must have at least 4 characters
     * @required
     */
    compiler_target_name: string;
    /**
     * @name connectible_to_internet
     * @type boolean
     * @description If device can connect to internet
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name description
     * @type string
     * @description The description must have at least 4 characters
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name processor_id
     * @type string
     * @description Required valid processor_id
     * @required
     */
    processor_id: string;
    /**
     * @name producer_id
     * @type string
     * @description Required valid producer_id
     * @required
     */
    producer_id: string;
}


/**
 * @name ITypeOfWidget
 * @description: Model of TypeOfWidget
 */
export interface ITypeOfWidget {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description This value will be in Json only if TypeOfWidget is private!
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name widgets
     * @type IGridWidgetShortDetail[]
     * @readonly
     * @required
     */
    widgets: IGridWidgetShortDetail[];
}


/**
 * @name ITypeOfWidgetNew
 * @description: Json Model for new TypeOfWidget
 */
export interface ITypeOfWidgetNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description If you want make private TypeOfWidget group. You have to have "project_id" parameter in Json., Value can be null or contains project_id
     */
    project_id?: string;
}


/**
 * @name ITypeOfWidgetShortDetail
 * @description: Json Model with details of Type of Widget>
 */
export interface ITypeOfWidgetShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name grid_widgets
     * @type IGridWidgetShortDetail[]
     * @readonly
     * @required
     */
    grid_widgets: IGridWidgetShortDetail[];
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBlockFilter
 * @description: Json Model for getting Type_Of_Block Filter List
 */
export interface ITypeOfBlockFilter {
    /**
     * @name private_type
     * @type boolean
     * @description Use 'true' for private Type_Of_Block or 'false' for non-private
     * @required
     */
    private_type: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Type_Of_Blocks of given project
     */
    project_id?: string;
}


/**
 * @name ITypeOfBlockList
 * @description: Individual Type_Of_Block List
 */
export interface ITypeOfBlockList {
    /**
     * @name content
     * @type ITypeOfBlockShortDetail[]
     * @readonly
     * @required
     */
    content: ITypeOfBlockShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ITypeOfWidgetFilter
 * @description: Json Model for getting Type_Of_Widget Filter List
 */
export interface ITypeOfWidgetFilter {
    /**
     * @name private_type
     * @type boolean
     * @description Use 'true' for private Type_Of_Widget or 'false' for non-private
     * @required
     */
    private_type: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Type_Of_Widgets of given project
     */
    project_id?: string;
}


/**
 * @name ITypeOfWidgetList
 * @description: Individual Type_Of_Widget List
 */
export interface ITypeOfWidgetList {
    /**
     * @name content
     * @type ITypeOfWidgetShortDetail[]
     * @readonly
     * @required
     */
    content: ITypeOfWidgetShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IUnauthorized
 * @description: Interface IUnauthorized definition
 */
export interface IUnauthorized {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Unauthorized access - please log in
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("unauthorized")
     * @description state
     * @readonly
     * @required
     */
    state: ("unauthorized");
}


/**
 * @name IVersionObject
 * @description: Model of Version_Object
 */
export interface IVersionObject {
    /**
     * @name author
     * @type IPersonShortDetail
     */
    author?: IPersonShortDetail;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in ms
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IWebSocket
 * @description: Interface IWebSocket definition
 */
export interface IWebSocket {
    /**
     * @name actor
     * @type boolean
     * @required
     */
    actor: boolean;
}


/**
 * @name IWebSocketString
 * @description: Interface IWebSocketString definition
 */
export interface IWebSocketString {
    /**
     * @name actor
     * @type boolean
     * @required
     */
    actor: boolean;
}


/**
 * @name IWebSocketToken
 * @description: Json Model that you will get, if login was successful
 */
export interface IWebSocketToken {
    /**
     * @name websocket_token
     * @type string
     * @description Swagger_Websocket_Token - used this token for WebSocket access. The lifetime of the token is 5 seconds. It is disposable. It can not be used twice. In the event of the expiration of the life of the disabled. 
     * @readonly
     * @required
     */
    websocket_token: string;
}




export abstract class TyrionAPI {

    protected abstract requestRestPath<T>(method:string, path:string, body:Object, success:number[]):Promise<T>;

    /**
     * @name __login
     * @summary login
     * @operationId login
     * @tags Access, Person, APP-Api
     *
     * @description Get access Token
     *
     * @param {ILogin} body - Contains Json with values
     *
     * @returns {ILoginToken} [code 200] Successfully logged
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     * @throws {INotValidated} [code 705] Account not validated
     */
    public __login(body:ILogin):Promise<ILoginToken> {
        return this.requestRestPath("POST", `/login`, body, [200]);
    }

    /**
     * @name __logout
     * @summary logout
     * @operationId logout
     * @tags Access, Person, APP-Api
     *
     * @description for logout person - that's deactivate person token 
     *
     *
     * @returns {IResultOk} [code 200] Successfully logged out
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public __logout():Promise<IResultOk> {
        return this.requestRestPath("POST", `/logout`, {}, [200]);
    }

    /**
     * @name bootloaderUpdateList
     * @summary update Bootloader
     * @operationId bootLoader_manualUpdate
     * @tags Bootloader
     *
     * @description List of Hardware Id for update on latest bootloader version for specifict type of hardware
     *
     * @param {IBoardBootloaderUpdate} body - Contains Json with values
     *
     * @returns {IResult|IResultOk} [code 200|201] successful operation|Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public bootloaderUpdateList(body:IBoardBootloaderUpdate):Promise<IResult|IResultOk> {
        return this.requestRestPath("PUT", `/bootloader/update_device_list`, body, [200,201]);
    }

    /**
     * @name cloudInstanceUpload
     * @summary upload B Program (version) to cloud
     * @operationId upload_b_Program_ToCloud
     * @tags B_Program
     *
     * @description upload version of B Program to cloud. Its possible have only one version from B program in cloud. If you uploud new one - old one will be replaced
     *
     * @param {string} version_id - version_id String path
     * @param {IBProgramUploadInstance} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully uploaded
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public cloudInstanceUpload(version_id:string, body:IBProgramUploadInstance):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/instance/uploadToCloud/${version_id}`, body, [200]);
    }

    /**
     * @name compileCProgram
     * @summary compile C_program
     * @operationId compile_C_Program_code
     * @tags C_Program
     *
     * @description Compile code
     *
     * @param {ICProgramVersionUpdate} body - Contains Json with values
     *
     * @returns {ICloudCompilationServerCompilationResult} [code 200] Compilation successful
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {ICompilationBuildError[]} [code 422] Compilation unsuccessful
     * @throws {IServerOffline} [code 477] External server is offline
     * @throws {IExternalServerSideError} [code 478] External server side Error
     * @throws [code 500] Server side Error
     */
    public compileCProgram(body:ICProgramVersionUpdate):Promise<ICloudCompilationServerCompilationResult> {
        return this.requestRestPath("POST", `/c_program/version/compile`, body, [200]);
    }

    /**
     * @name confirmNotification
     * @summary confirm notification
     * @operationId notification_confirm
     * @tags Notifications
     *
     * @description Confirms notification
     *
     * @param {string} notification_id - notification_id String path
     * @param {INotificationConfirm} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public confirmNotification(notification_id:string, body:INotificationConfirm):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/notification/confirm/${notification_id}`, body, [200]);
    }

    /**
     * @name connectBoard
     * @summary connect Board with Project
     * @operationId board_connectProject
     * @tags Board
     *
     * @description This Api is used by Users for connection of Board with their Project
     *
     * @param {string} hash_for_adding
     * @param {string} project_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public connectBoard(hash_for_adding:string, project_id:string):Promise<IBoard> {
        return this.requestRestPath("PUT", `/board/${hash_for_adding}/${project_id}`, {}, [200]);
    }

    /**
     * @name createBProgram
     * @summary create new B_Program
     * @operationId new_b_Program
     * @tags B_Program
     *
     * @description create new B_Program
     *
     * @param {string} project_id
     * @param {IBProgramNew} body - Contains Json with values
     *
     * @returns {IBProgram} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createBProgram(project_id:string, body:IBProgramNew):Promise<IBProgram> {
        return this.requestRestPath("POST", `/b_program/${project_id}`, body, [201]);
    }

    /**
     * @name createBProgramVersion
     * @summary create Version B Program
     * @operationId update_b_Program_new_version
     * @tags B_Program
     *
     * @description create new vesion in Blocko program
     *
     * @param {string} b_program_id - b_program_id String path
     * @param {IBProgramVersionNew} body - Contains Json with values
     *
     * @returns {IBProgramVersion} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createBProgramVersion(b_program_id:string, body:IBProgramVersionNew):Promise<IBProgramVersion> {
        return this.requestRestPath("POST", `/b_program/version/${b_program_id}`, body, [200]);
    }

    /**
     * @name createBlockoBlock
     * @summary create new Block
     * @operationId blockoBlock_create
     * @tags Blocko-Block
     *
     * @description creating new independent Block object for Blocko tools
     *
     * @param {IBlockoBlockNew} body - Contains Json with values
     *
     * @returns {IBlockoBlock} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createBlockoBlock(body:IBlockoBlockNew):Promise<IBlockoBlock> {
        return this.requestRestPath("POST", `/blockoBlock`, body, [201]);
    }

    /**
     * @name createBlockoBlockVersion
     * @summary create BlockoBlock version
     * @operationId blockoBlockVersion_create
     * @tags Blocko-Block
     *
     * @description new BlockoBlock version
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockBlockoVersionNew} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createBlockoBlockVersion(blocko_block_id:string, body:IBlockoBlockBlockoVersionNew):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("POST", `/blockoBlock/version/${blocko_block_id}`, body, [201]);
    }

    /**
     * @name createCProgram
     * @summary Create new C_Program
     * @operationId c_program_create
     * @tags C_Program
     *
     * @description If you want create new C_program in project.id = {project_id}. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {ICProgramNew} body - Contains Json with values
     *
     * @returns {ICProgram} [code 201] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createCProgram(body:ICProgramNew):Promise<ICProgram> {
        return this.requestRestPath("POST", `/c_program`, body, [201]);
    }

    /**
     * @name createCProgramVersion
     * @summary new Version of C_Program
     * @operationId c_programVersion_create
     * @tags C_Program
     *
     * @description If you want add new code to C_program by query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id - version_id String query
     * @param {ICProgramVersionNew} body - Contains Json with values
     *
     * @returns {ICProgramVersion} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createCProgramVersion(c_program_id:string, body:ICProgramVersionNew):Promise<ICProgramVersion> {
        return this.requestRestPath("POST", `/c_program/version/create/${c_program_id}`, body, [201]);
    }

    /**
     * @name createFacebook
     * @summary login with Facebook
     * @operationId Facebook
     * @tags Access, Social-Facebook
     *
     * @description For login via Facebook 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {ISocialNetworkLogin} body - Contains Json with values
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createFacebook(body:ISocialNetworkLogin):Promise<ISocialLogin> {
        return this.requestRestPath("POST", `/facebook`, body, [200]);
    }

    /**
     * @name createGithub
     * @summary login with GitHub
     * @operationId GitHub
     * @tags Access, Social-GitHub
     *
     * @description For login via GitHub 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {ISocialNetworkLogin} body - Contains Json with values
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createGithub(body:ISocialNetworkLogin):Promise<ISocialLogin> {
        return this.requestRestPath("POST", `/github`, body, [200]);
    }

    /**
     * @name createHomerServer
     * @summary Create new Blocko Server
     * @operationId create_Homer_Server
     * @tags External Server
     *
     * @description Create new Gate for Blocko Server
     *
     * @param {ICloudHomerServer} body - Contains Json with values
     *
     * @returns {IHomerServer} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createHomerServer(body:ICloudHomerServer):Promise<IHomerServer> {
        return this.requestRestPath("POST", `/homer_server`, body, [201]);
    }

    /**
     * @name createLibrary
     * @summary create new Library
     * @operationId library_create
     * @tags Library
     *
     * @description Create Library for C programs 
     *
     * @param {ILibraryNew} body - Contains Json with values
     *
     * @returns {ILibrary} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createLibrary(body:ILibraryNew):Promise<ILibrary> {
        return this.requestRestPath("POST", `/library`, body, [201]);
    }

    /**
     * @name createLibraryVersion
     * @summary new Version of Library
     * @operationId libraryVersion_create
     * @tags Library
     *
     * @description If you want add new code to Library
     *
     * @param {string} library_id - library_id String query
     * @param {ILibraryVersionNew} body - Contains Json with values
     *
     * @returns {ILibraryVersion} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public createLibraryVersion(library_id:string, body:ILibraryVersionNew):Promise<ILibraryVersion> {
        return this.requestRestPath("POST", `/library/version/${library_id}`, body, [201]);
    }

    /**
     * @name createMProgram
     * @summary Create new M_Program
     * @operationId new_M_Program
     * @tags M_Program
     *
     * @description creating new M_Program
     *
     * @param {string} m_project_id - m_project_id
     * @param {IMProgramNew} body - Contains Json with values
     *
     * @returns {IMProgram} [code 201] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createMProgram(m_project_id:string, body:IMProgramNew):Promise<IMProgram> {
        return this.requestRestPath("POST", `/m_program/${m_project_id}`, body, [201]);
    }

    /**
     * @name createMProgramVersion
     * @summary Create new Version of M_Program
     * @operationId new_M_Program_version
     * @tags M_Program
     *
     * @description creating new Version M_Program
     *
     * @param {string} m_program_id - m_program_id
     * @param {IMProgramVersionNew} body - Contains Json with values
     *
     * @returns {IMProgramVersion} [code 201] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createMProgramVersion(m_program_id:string, body:IMProgramVersionNew):Promise<IMProgramVersion> {
        return this.requestRestPath("POST", `/m_program/version/${m_program_id}`, body, [201]);
    }

    /**
     * @name createMProject
     * @summary Create new M_Project
     * @operationId new_M_Project
     * @tags M_Program
     *
     * @description M_Project is package for M_Programs -> presupposition is that you need more control terminal for your IoT project. Different screens for family members, for employee etc.. But of course - you can used that for only one M_program
     *
     * @param {string} project_id
     * @param {IMProjectNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Some Json value Missing
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createMProject(project_id:string, body:IMProjectNew):Promise<IMProject> {
        return this.requestRestPath("POST", `/m_project/${project_id}`, body, [201]);
    }

    /**
     * @name createPerson
     * @summary register new Person
     * @operationId person_create
     * @tags Person
     *
     * @description create new Person with unique email and nick_name
     *
     * @param {IPersonNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createPerson(body:IPersonNew):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person`, body, [200]);
    }

    /**
     * @name createPersonAuthenticationEmail
     * @summary send authentication email
     * @operationId person_authenticationSendEmail
     * @tags Person
     *
     * @description sends authentication email, if user did not get the first one from the registration
     *
     * @param {IPersonAuthentication} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createPersonAuthenticationEmail(body:IPersonAuthentication):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person/authentication_email`, body, [200]);
    }

    /**
     * @name createPersonChangeProperty
     * @summary change person login info
     * @operationId person_changeLoginProperty
     * @tags Person
     *
     * @description Request password or email change. API does not change password or email, only sends email for authorization of the change and holds values in different object.JSON value 'property' contains only 'password' or 'email'
     *
     * @param {IPersonChangeProperty} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createPersonChangeProperty(body:IPersonChangeProperty):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person/change_property`, body, [200]);
    }

    /**
     * @name createProduct
     * @summary create Product under Tariff
     * @operationId product_create
     * @tags Price & Invoice & Tariffs
     *
     * @description It is the base object. Peak of Pyramid :). This Api is used for its creation. You can get two kind of response: 
     *    
     *    First(201):  System create new Object - Product 
     *    
     *    Second(200): The product requires payment - The server creates the object, but returns an Invoice 
     *    
     *    If the user choose credit card payment, the invoice will contain gw_url, which is a link to the payment gate, you can redirect him there. If bank transfer is chosen, server will return an Invoice, but the user will pay it independently via his bank account.
     *
     * @param {IProductNew} body - Contains Json with values
     *
     * @returns {IProduct} [code 201] Created successfully
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createProduct(body:IProductNew):Promise<IProduct> {
        return this.requestRestPath("POST", `/product`, body, [201]);
    }

    /**
     * @name createProductExtension
     * @summary create Product Extension
     * @operationId productExtension_create
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {IProductExtensionNew} body - Contains Json with values
     *
     * @returns {IProductExtension} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public createProductExtension(body:IProductExtensionNew):Promise<IProductExtension> {
        return this.requestRestPath("POST", `/product_extension`, body, [201]);
    }

    /**
     * @name createProject
     * @summary create new Project
     * @operationId project_create
     * @tags Project
     *
     * @description create new Project
     *
     * @param {IProjectNew} body - Contains Json with values
     *
     * @returns {IProject} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createProject(body:IProjectNew):Promise<IProject> {
        return this.requestRestPath("POST", `/project`, body, [201]);
    }

    /**
     * @name createSecureRole
     * @summary create new Role
     * @operationId new_Role
     * @tags Role
     *
     * @description If you want create new Role in system. You need permission for that or have right system Roles
     *
     * @param {ISecurityRoleNew} body - Contains Json with values
     *
     * @returns {ISecurityRole} [code 201] Successfully created
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createSecureRole(body:ISecurityRoleNew):Promise<ISecurityRole> {
        return this.requestRestPath("POST", `/secure/role`, body, [201]);
    }

    /**
     * @name createTypeOfBlock
     * @summary create new Type of Block
     * @operationId typeOfBlock_create
     * @tags Type-of-Block
     *
     * @description creating group for BlockoBlocks -> Type of block
     *
     * @param {ITypeOfBlockNew} body - Contains Json with values
     *
     * @returns {ITypeOfBlock} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public createTypeOfBlock(body:ITypeOfBlockNew):Promise<ITypeOfBlock> {
        return this.requestRestPath("POST", `/typeOfBlock`, body, [201]);
    }

    /**
     * @name createTypeOfBoard
     * @summary create TypeOfBoard
     * @operationId typeOfBoard_create
     * @tags Type-Of-Board
     *
     * @description The TypeOfBoard is category for IoT. Like Raspberry2, Arduino-Uno etc. 
     *    
     *    We using that for compilation, sorting libraries, filtres and more..
     *
     * @param {ITypeOfBoardNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoard} [code 201] Successfully created
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public createTypeOfBoard(body:ITypeOfBoardNew):Promise<ITypeOfBoard> {
        return this.requestRestPath("POST", `/typeOfBoard`, body, [201]);
    }

    /**
     * @name createTypeOfWidget
     * @summary create new Type of Widget
     * @operationId typeOfWidget_create
     * @tags Type-of-Widget
     *
     * @description creating group for GridWidgets -> Type of Widget
     *
     * @param {ITypeOfWidgetNew} body - Contains Json with values
     *
     * @returns {ITypeOfWidget} [code 201] Successfully created
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createTypeOfWidget(body:ITypeOfWidgetNew):Promise<ITypeOfWidget> {
        return this.requestRestPath("POST", `/type_of_widget`, body, [201]);
    }

    /**
     * @name createWidget
     * @summary create new Widget
     * @operationId gridWidget_create
     * @tags Grid-Widget
     *
     * @description creating new independent Widget object for Grid tools
     *
     * @param {IGridWidgetNew} body - Contains Json with values
     *
     * @returns {IGridWidget} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public createWidget(body:IGridWidgetNew):Promise<IGridWidget> {
        return this.requestRestPath("POST", `/grid_widget`, body, [201]);
    }

    /**
     * @name createWidgetVersion
     * @summary create GridWidget version
     * @operationId gridWidgetVersion_create
     * @tags Grid-Widget
     *
     * @description new GridWidget version
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     * @param {IGridWidgetVersionNew} body - Contains Json with values
     *
     * @returns {IGridWidgetVersion} [code 201] Successfully created
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public createWidgetVersion(grid_widget_id:string, body:IGridWidgetVersionNew):Promise<IGridWidgetVersion> {
        return this.requestRestPath("POST", `/grid_widget/version/${grid_widget_id}`, body, [201]);
    }

    /**
     * @name deleteBProgram
     * @summary remove B Program
     * @operationId remove_b_Program
     * @tags B_Program
     *
     * @description remove B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteBProgram(b_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name deleteBProgramVersion
     * @summary remove B Program version
     * @operationId remove_b_Program_version
     * @tags B_Program
     *
     * @description remove B_Program version object
     *
     * @param {string} version_id - version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteBProgramVersion(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name deleteBlockoBlock
     * @summary delete BlockoBlock
     * @operationId blockoBlock_delete
     * @tags Blocko-Block
     *
     * @description delete BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteBlockoBlock(blocko_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/blockoBlock/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name deleteBlockoBlockVersion
     * @summary delete BlockoBlock version
     * @operationId blockoBlockVersion_delete
     * @tags Blocko-Block
     *
     * @description delete BlockoBlock version
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteBlockoBlockVersion(blocko_block_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/blockoBlock/version/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name deleteBoard
     * @summary deactivate Board
     * @operationId board_deactivate
     * @tags Board
     *
     * @description Permanent exclusion from the system - for some reason it is not allowed to remove the Board from database
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public deleteBoard(board_id:string):Promise<IBoard> {
        return this.requestRestPath("DELETE", `/board/deactivateBoard/${board_id}`, {}, [200]);
    }

    /**
     * @name deleteCProgram
     * @summary delete C_program
     * @operationId c_program_delete
     * @tags C_Program
     *
     * @description delete C_program by query = c_program_id, query = version_id
     *
     * @param {string} c_program_id - c_program_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteCProgram(c_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/c_program/${c_program_id}`, {}, [200]);
    }

    /**
     * @name deleteCProgramVersion
     * @summary delete Version in C_program
     * @operationId c_programVersion_delete
     * @tags C_Program
     *
     * @description delete Version.id = version_id in C_program by query = c_program_id, query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteCProgramVersion(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/c_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name deleteHomerServer
     * @summary remove Compilation Servers
     * @operationId delete_Homer_Server
     * @tags External Server
     *
     * @description remove Compilation Servers
     *
     * @param {string} server_id - unique_identificator 
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteHomerServer(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/homer_server/${server_id}`, {}, [200]);
    }

    /**
     * @name deleteLibrary
     * @summary delete Library
     * @operationId library_delete
     * @tags Library
     *
     * @description For remove Library
     *
     * @param {string} library_id - library_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public deleteLibrary(library_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/library/${library_id}`, {}, [200]);
    }

    /**
     * @name deleteLibraryVersion
     * @summary delete Version in Library
     * @operationId libraryVersion_delete
     * @tags Library
     *
     * @description delete Library by query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public deleteLibraryVersion(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/library/version/${version_id}`, {}, [200]);
    }

    /**
     * @name deleteMProgram
     * @summary remove M_Program
     * @operationId remove_M_Program
     * @tags M_Program
     *
     * @description remove M_Program by quarry = m_program_id
     *
     * @param {string} m_progrm_id - m_program_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteMProgram(m_progrm_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/m_program/${m_progrm_id}`, {}, [200]);
    }

    /**
     * @name deleteMProgramVersion
     * @summary Remove  Version of M_Program
     * @operationId remove_M_Program_version
     * @tags M_Program
     *
     * @description remove version of M_Program
     *
     * @param {string} m_program_version_id - m_program_version_id
     *
     * @returns {IResultOk|IResult} [code 200|201] Successfully created|successful operation
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteMProgramVersion(m_program_version_id:string):Promise<IResultOk|IResult> {
        return this.requestRestPath("DELETE", `/m_program/version/${m_program_version_id}`, {}, [200,201]);
    }

    /**
     * @name deleteMProject
     * @summary remove M_Project
     * @operationId remove_M_Project
     * @tags M_Program
     *
     * @description remove M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteMProject(m_project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/m_project/${m_project_id}`, {}, [200]);
    }

    /**
     * @name deleteNotification
     * @summary delete notification
     * @operationId notification_delete
     * @tags Notifications
     *
     * @description remove notification by id
     *
     * @param {string} notification_id - notification_id String path
     *
     * @returns {IResultOk} [code 200] Delete Successful
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteNotification(notification_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/notification/${notification_id}`, {}, [200]);
    }

    /**
     * @name deletePersonConnection
     * @summary terminate logging
     * @operationId remove_Person_Connection
     * @tags Person
     *
     * @description You know where the user is logged in. And you can log out this connection. (Terminate token)
     *
     * @param {string} connection_id - connection_id String query
     *
     * @returns {IResultOk} [code 200] OK result
     *
     * @throws {INotFound} [code 404] Not Found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deletePersonConnection(connection_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/person/connection/${connection_id}`, {}, [200]);
    }

    /**
     * @name deleteProductExtension
     * @summary delete Product Extension
     * @operationId productExtension_delete
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id - extension_id String query
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public deleteProductExtension(extension_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/product_extension/${extension_id}`, {}, [200]);
    }

    /**
     * @name deleteProject
     * @summary delete Project
     * @operationId project_delete
     * @tags Project
     *
     * @description delete Projects by project_id
     *
     * @param {string} project_id - project_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteProject(project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/${project_id}`, {}, [200]);
    }

    /**
     * @name deleteTypeOfBlock
     * @summary delete Type of Block
     * @operationId typeOfBlock_delete
     * @tags Type-of-Block
     *
     * @description delete group for BlockoBlocks -> Type of block
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public deleteTypeOfBlock(type_of_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/typeOfBlock/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name deleteTypeOfBoard
     * @summary delete TypeOfBoard
     * @operationId typeOfBoard_delete
     * @tags Type-Of-Board
     *
     * @description if you want delete TypeOfBoard object by query = type_of_board_id
     *
     * @param {string} type_of_board_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public deleteTypeOfBoard(type_of_board_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/typeOfBoard/${type_of_board_id}`, {}, [200]);
    }

    /**
     * @name deleteTypeOfWidget
     * @summary delete Type of Widget
     * @operationId typeOfWidget_delete
     * @tags Type-of-Widget
     *
     * @description delete group for GridWidgets -> Type of widget
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteTypeOfWidget(type_of_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/type_of_widget/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name deleteWidget
     * @summary delete GridWidget
     * @operationId gridWidget_delete
     * @tags Grid-Widget
     *
     * @description delete GridWidget
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteWidget(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid_widget/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name deleteWidgetVersion
     * @summary delete GridWidget version
     * @operationId gridWidgetVersion_delete
     * @tags Grid-Widget
     *
     * @description delete GridWidget version
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteWidgetVersion(grid_widget_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid_widget/version/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name disconnectBoard
     * @summary disconnect Board from Project
     * @operationId board_disconnectProject
     * @tags Board
     *
     * @description This Api is used by Users for disconnection of Board from their Project, its not meaning that Board is removed from system, only disconnect and another user can registred that (connect that with different account/project etc..)
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public disconnectBoard(board_id:string):Promise<IBoard> {
        return this.requestRestPath("DELETE", `/board/${board_id}`, {}, [200]);
    }

    /**
     * @name editBProgram
     * @summary edit B_Program
     * @operationId edit_b_Program
     * @tags B_Program
     *
     * @description edit basic information in B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     * @param {IBProgramNew} body - Contains Json with values
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editBProgram(b_program_id:string, body:IBProgramNew):Promise<IBProgram> {
        return this.requestRestPath("PUT", `/b_program/${b_program_id}`, body, [200]);
    }

    /**
     * @name editBProgramVersion
     * @summary edit Version
     * @operationId edit_b_Program_version
     * @tags B_Program
     *
     * @description edit Version object
     *
     * @param {string} version_id - version_id String path
     * @param {IBProgramVersionEdit} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editBProgramVersion(version_id:string, body:IBProgramVersionEdit):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/b_program/version/${version_id}`, body, [200]);
    }

    /**
     * @name editBlockoBlock
     * @summary edit basic information of the BlockoBlock
     * @operationId blockoBlock_update
     * @tags Blocko-Block
     *
     * @description update basic information (name, and description) of the independent BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockNew} body - Contains Json with values
     *
     * @returns {IBlockoBlock} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editBlockoBlock(blocko_block_id:string, body:IBlockoBlockNew):Promise<IBlockoBlock> {
        return this.requestRestPath("PUT", `/blockoBlock/${blocko_block_id}`, body, [200]);
    }

    /**
     * @name editBlockoBlockVersion
     * @summary edit BlockoBlock version
     * @operationId blockoBlockVersion_update
     * @tags Blocko-Block
     *
     * @description You can edit only basic information of the version. If you want to update the code, you have to create a new version!
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     * @param {IBlockoBlockBlockoVersionEdit} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something went wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editBlockoBlockVersion(blocko_block_version_id:string, body:IBlockoBlockBlockoVersionEdit):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("PUT", `/blockoBlock/version/${blocko_block_version_id}`, body, [200]);
    }

    /**
     * @name editBoardBackup
     * @summary update Board - update Backup setting
     * @operationId board_updateBackup
     * @tags Board
     *
     * @param {IBoardBackupSettings} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public editBoardBackup(body:IBoardBackupSettings):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/board/backup`, body, [200]);
    }

    /**
     * @name editBoardUserDescription
     * @summary edit Board - update personal description
     * @operationId board_update
     * @tags Board
     *
     * @description Used for add descriptions by owners. "Persons" who registred "Board" to own "Projec" 
     *
     * @param {string} board_id
     * @param {IBoardPersonalDescription} body - Contains Json with values
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editBoardUserDescription(board_id:string, body:IBoardPersonalDescription):Promise<IBoard> {
        return this.requestRestPath("PUT", `/board/userDescription/${board_id}`, body, [200]);
    }

    /**
     * @name editCProgram
     * @summary Edit C_Program
     * @operationId c_program_update
     * @tags C_Program
     *
     * @description If you want edit base information about C_program by  query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id - c_program_id String query
     * @param {ICProgramNew} body - Contains Json with values
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editCProgram(c_program_id:string, body:ICProgramNew):Promise<ICProgram> {
        return this.requestRestPath("PUT", `/c_program/${c_program_id}`, body, [200]);
    }

    /**
     * @name editCProgramVersion
     * @summary update basic information in Version of C_program
     * @operationId c_programVersion_update
     * @tags C_Program
     *
     * @description For update basic (name and description) information in Version of C_program. If you want update code. You have to create new version. And after that you can delete previous version
     *
     * @param {string} version_id - version_id String query
     * @param {ICProgramVersionEdit} body - Contains Json with values
     *
     * @returns {IVersionObject} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editCProgramVersion(version_id:string, body:ICProgramVersionEdit):Promise<IVersionObject> {
        return this.requestRestPath("PUT", `/c_program/version/edit/${version_id}`, body, [200]);
    }

    /**
     * @name editHomerServer
     * @summary edit Compilation Server
     * @operationId edit_Homer_Server
     * @tags External Server
     *
     * @description Edit basic information Compilation Server
     *
     * @param {string} server_id - unique_identifier 
     * @param {ICloudHomerServer} body - Contains Json with values
     *
     * @returns {IHomerServer} [code 200] Updated successfully
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editHomerServer(server_id:string, body:ICloudHomerServer):Promise<IHomerServer> {
        return this.requestRestPath("PUT", `/homer_server/edit/${server_id}`, body, [200]);
    }

    /**
     * @name editInstance
     * @summary updates personal info about instance
     * @operationId instance_update
     * @tags Instance
     *
     * @param {string} instance_id - instance_id String path
     * @param {IInstanceEdit} body - Contains Json with values
     *
     * @returns {IHomerInstance} [code 200] Successfully updated
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editInstance(instance_id:string, body:IInstanceEdit):Promise<IHomerInstance> {
        return this.requestRestPath("PUT", `/instance/update/${instance_id}`, body, [200]);
    }

    /**
     * @name editLibrary
     * @summary update Library
     * @operationId library_update
     * @tags Library
     *
     * @description Update Library
     *
     * @param {string} library_id - library_id String query
     * @param {ILibraryNew} body - Contains Json with values
     *
     * @returns {ILibrary} [code 200] Successfully updated
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public editLibrary(library_id:string, body:ILibraryNew):Promise<ILibrary> {
        return this.requestRestPath("PUT", `/library/${library_id}`, body, [200]);
    }

    /**
     * @name editLibraryVersion
     * @summary edit Library Version
     * @operationId libraryVersion_update
     * @tags Library
     *
     * @description For update basic (name and description) information in Version of Library. If you want update code. You have to create new version. And after that you can delete previous version
     *
     * @param {string} version_id - version_id String query
     * @param {ICProgramVersionEdit} body - Contains Json with values
     *
     * @returns {ILibraryVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public editLibraryVersion(version_id:string, body:ICProgramVersionEdit):Promise<ILibraryVersion> {
        return this.requestRestPath("PUT", `/library/version/${version_id}`, body, [200]);
    }

    /**
     * @name editMProgram
     * @summary update M_Program
     * @operationId edit_M_Program
     * @tags M_Program
     *
     * @description update m_project - in this case we are not support versions of m_project
     *
     * @param {string} m_progrm_id - m_program_id String query
     * @param {IMProgramNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editMProgram(m_progrm_id:string, body:IMProgramNew):Promise<IMProject> {
        return this.requestRestPath("PUT", `/m_program/${m_progrm_id}`, body, [200]);
    }

    /**
     * @name editMProgramVersion
     * @summary edit M_Program Version
     * @operationId edit_M_Program_version
     * @tags M_Program
     *
     * @description edit M_Program Version by quarry = m_program_version_id
     *
     * @param {string} m_program_version_id - m_program_version_id String query
     * @param {IMProgramVersionEdit} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editMProgramVersion(m_program_version_id:string, body:IMProgramVersionEdit):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/m_program/version/${m_program_version_id}`, body, [200]);
    }

    /**
     * @name editMProject
     * @summary edit M_Project
     * @operationId edit_M_Project
     * @tags M_Program
     *
     * @description edit basic information in M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     * @param {IMProjectNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editMProject(m_project_id:string, body:IMProjectNew):Promise<IMProject> {
        return this.requestRestPath("PUT", `/m_project/${m_project_id}`, body, [200]);
    }

    /**
     * @name editPerson
     * @summary edit Person basic information
     * @operationId person_update
     * @tags Person
     *
     * @description Edit person basic information
     *
     * @param {string} person_id - person_id String query
     * @param {IPersonUpdate} body - Contains Json with values
     *
     * @returns {IPerson} [code 200] Successfully updated
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editPerson(person_id:string, body:IPersonUpdate):Promise<IPerson> {
        return this.requestRestPath("PUT", `/person/${person_id}`, body, [200]);
    }

    /**
     * @name editProcessor
     * @summary update Processor
     * @operationId processor_update
     * @tags Processor
     *
     * @description If you want update Processor.id by query = processor_id . Send required json values and server respond with update object
     *
     * @param {string} processor_id - processor_id String query
     * @param {IProcessorNew} body - Contains Json with values
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Objects not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editProcessor(processor_id:string, body:IProcessorNew):Promise<IProcessor> {
        return this.requestRestPath("PUT", `/processor/${processor_id}`, body, [200]);
    }

    /**
     * @name editProductDetails
     * @summary edit Product payment details
     * @operationId paymentDetails_update
     * @tags Price & Invoice & Tariffs
     *
     * @description edit payments details in Product
     *
     * @param {number} payment_details_id - payment_details_id Long query
     * @param {ITariffDetailsEdit} body - Contains Json with values
     *
     * @returns {IPaymentDetails} [code 200] Successfully updated
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editProductDetails(payment_details_id:number, body:ITariffDetailsEdit):Promise<IPaymentDetails> {
        return this.requestRestPath("PUT", `/product/details/${payment_details_id}`, body, [200]);
    }

    /**
     * @name editProductExtension
     * @summary update Product Extension
     * @operationId productExtension_update
     * @tags Price & Invoice & Tariffs
     *
     * @description Updates extension. User can change name, description or color.
     *
     * @param {string} extension_id - extension_id String query
     * @param {IProductExtensionEdit} body - Contains Json with values
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public editProductExtension(extension_id:string, body:IProductExtensionEdit):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/product_extension/${extension_id}`, body, [200]);
    }

    /**
     * @name editProductGeneral
     * @summary edit Product details
     * @operationId product_update
     * @tags Price & Invoice & Tariffs
     *
     * @description edit basic details of Product
     *
     * @param {string} product_id - product_id String query
     * @param {IProductEdit} body - Contains Json with values
     *
     * @returns {IProduct} [code 200] Successfully updated
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editProductGeneral(product_id:string, body:IProductEdit):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/general/${product_id}`, body, [200]);
    }

    /**
     * @name editProject
     * @summary edit Project
     * @operationId project_update
     * @tags Project
     *
     * @description edit ne Project
     *
     * @param {string} project_id - project_id String path
     * @param {IProjectEdit} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editProject(project_id:string, body:IProjectEdit):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/${project_id}`, body, [200]);
    }

    /**
     * @name editTypeOfBlock
     * @summary edit Type of Block
     * @operationId typeOfBlock_update
     * @tags Type-of-Block
     *
     * @description edit Type of block object
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     * @param {ITypeOfBlockNew} body - Contains Json with values
     *
     * @returns {ITypeOfBlock} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public editTypeOfBlock(type_of_block_id:string, body:ITypeOfBlockNew):Promise<ITypeOfBlock> {
        return this.requestRestPath("PUT", `/typeOfBlock/${type_of_block_id}`, body, [200]);
    }

    /**
     * @name editTypeOfBoard
     * @summary edit TypeOfBoard
     * @operationId typeOfBoard_update
     * @tags Type-Of-Board
     *
     * @description if you want edit base TypeOfBoard information
     *
     * @param {string} type_of_board_id
     * @param {ITypeOfBoardNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoard} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public editTypeOfBoard(type_of_board_id:string, body:ITypeOfBoardNew):Promise<ITypeOfBoard> {
        return this.requestRestPath("PUT", `/typeOfBoard/${type_of_board_id}`, body, [200]);
    }

    /**
     * @name editTypeOfWidget
     * @summary edit Type of Widget
     * @operationId typeOfWidget_update
     * @tags Type-of-Widget
     *
     * @description edit Type of widget object
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     * @param {ITypeOfWidgetNew} body - Contains Json with values
     *
     * @returns {ITypeOfWidget} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editTypeOfWidget(type_of_widget_id:string, body:ITypeOfWidgetNew):Promise<ITypeOfWidget> {
        return this.requestRestPath("PUT", `/type_of_widget/${type_of_widget_id}`, body, [200]);
    }

    /**
     * @name editWidget
     * @summary edit basic information of the GridWidget
     * @operationId gridWidget_update
     * @tags Grid-Widget
     *
     * @description update basic information (name, and description) of the independent GridWidget
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     * @param {IGridWidgetNew} body - Contains Json with values
     *
     * @returns {IGridWidget} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public editWidget(grid_widget_id:string, body:IGridWidgetNew):Promise<IGridWidget> {
        return this.requestRestPath("PUT", `/grid_widget/${grid_widget_id}`, body, [200]);
    }

    /**
     * @name editWidgetVersion
     * @summary edit GridWidget version
     * @operationId gridWidgetVersion_update
     * @tags Grid-Widget
     *
     * @description You can edit only basic information of the version. If you want to update the code, you have to create a new version!
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     * @param {IGridWidgetVersionEdit} body - Contains Json with values
     *
     * @returns {IGridWidgetVersion} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editWidgetVersion(grid_widget_version_id:string, body:IGridWidgetVersionEdit):Promise<IGridWidgetVersion> {
        return this.requestRestPath("PUT", `/grid_widget/version/${grid_widget_version_id}`, body, [200]);
    }

    /**
     * @name getActualizationProcedure
     * @summary get actualization Procedure
     * @operationId get_Actualization_Procedure
     * @tags Actualization
     *
     * @description get Actualization Procedure by ID
     *
     * @param {string} actualization_procedure_id
     *
     * @returns {IActualizationProcedure} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getActualizationProcedure(actualization_procedure_id:string):Promise<IActualizationProcedure> {
        return this.requestRestPath("GET", `/actualization_procedure/${actualization_procedure_id}`, {}, [200]);
    }

    /**
     * @name getActualizationProcedureProject
     * @summary get actualization Procedure by Project
     * @operationId get_Actualization_Procedures_by_project
     * @tags Actualization
     *
     * @description get actualization Procedure by Project
     *
     * @param {string} project_id
     *
     * @returns {IActualizationProcedure[]} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getActualizationProcedureProject(project_id:string):Promise<IActualizationProcedure[]> {
        return this.requestRestPath("GET", `/actualization_procedure/project/${project_id}`, {}, [200]);
    }

    /**
     * @name getAllBlockoBlockVersions
     * @summary get all BlockoBlock version
     * @operationId blockoBlockVersion_getAll
     * @tags Blocko-Block
     *
     * @description get all versions (content) from independent BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockBlockoVersionNew} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getAllBlockoBlockVersions(blocko_block_id:string, body:IBlockoBlockBlockoVersionNew):Promise<IBlockoBlockVersion[]> {
        return this.requestRestPath("GET", `/blockoBlock/version/all/${blocko_block_id}`, body, [200]);
    }

    /**
     * @name getAllBlockoDetails
     * @summary get Boards details for integration to Blocko program
     * @operationId board_allDetailsForBlocko
     * @tags Blocko, B_Program
     *
     * @description get all boards that user can integrate to Blocko program
     *
     * @param {string} project_id
     *
     * @returns {IBoardsForBlocko} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public getAllBlockoDetails(project_id:string):Promise<IBoardsForBlocko> {
        return this.requestRestPath("GET", `/blocko/all_details/${project_id}`, {}, [200]);
    }

    /**
     * @name getAllHomerServers
     * @summary get all Blocko Servers
     * @operationId get_All_Homer_Server
     * @tags External Server
     *
     * @description get all Blocko Servers
     *
     *
     * @returns {IHomerServer} [code 200] Ok Result
     *
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllHomerServers():Promise<IHomerServer> {
        return this.requestRestPath("GET", `/homer_server`, {}, [200]);
    }

    /**
     * @name getAllPersonConnections
     * @summary get logged connections
     * @operationId person_getAllConnections
     * @tags Person
     *
     * @description get all connections, where user is logged
     *
     *
     * @returns {IFloatingPersonToken[]} [code 200] OK result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not Found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getAllPersonConnections():Promise<IFloatingPersonToken[]> {
        return this.requestRestPath("GET", `/person/connection/all`, {}, [200]);
    }

    /**
     * @name getAllPersons
     * @summary get all Person
     * @operationId person_getAll
     * @tags Person
     *
     * @description get all Persons
     *
     *
     * @returns {IPerson[]} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getAllPersons():Promise<IPerson[]> {
        return this.requestRestPath("GET", `/person/all`, {}, [200]);
    }

    /**
     * @name getAllProcessors
     * @summary get all Processors
     * @operationId processor_getAll
     * @tags Processor
     *
     * @description If you want get Processor by query processor_id.
     *
     *
     * @returns {IProcessor[]} [code 200] Ok Result
     *
     * @throws [code 500] Server side Error
     */
    public getAllProcessors():Promise<IProcessor[]> {
        return this.requestRestPath("GET", `/processor`, {}, [200]);
    }

    /**
     * @name getAllProducers
     * @summary get all Producers
     * @operationId producer_getAll
     * @tags Producer
     *
     * @description if you want get list of Producers. Its list of companies owned physical boards and we used that for filtering
     *
     *
     * @returns {IProducer[]} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Objects not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllProducers():Promise<IProducer[]> {
        return this.requestRestPath("GET", `/producer/all`, {}, [200]);
    }

    /**
     * @name getAllProductExtensionTypes
     * @summary get all Product Extension types
     * @operationId productExtension_getAllTypes
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     *
     * @returns {IProductExtensionType[]} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public getAllProductExtensionTypes():Promise<IProductExtensionType[]> {
        return this.requestRestPath("GET", `/product_extension/types`, {}, [200]);
    }

    /**
     * @name getAllProductExtensions
     * @summary get all Product Extension of logged user
     * @operationId productExtension_getAll
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     *
     * @returns {IProductExtension[]} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public getAllProductExtensions():Promise<IProductExtension[]> {
        return this.requestRestPath("GET", `/product_extension`, {}, [200]);
    }

    /**
     * @name getAllProductUserApplicables
     * @summary get all active products that the User can use
     * @operationId product_getActive
     * @tags Price & Invoice & Tariffs
     *
     * @description get all the products that the user can use when creating new projects
     *
     *
     * @returns {IApplicableProduct[]} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getAllProductUserApplicables():Promise<IApplicableProduct[]> {
        return this.requestRestPath("GET", `/product/user_applicable`, {}, [200]);
    }

    /**
     * @name getAllProducts
     * @summary get all Products with all information's
     * @operationId product_getAll
     * @tags Price & Invoice & Tariffs
     *
     *
     * @returns {IProduct[]} [code 200] List of users Products
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getAllProducts():Promise<IProduct[]> {
        return this.requestRestPath("GET", `/product/all`, {}, [200]);
    }

    /**
     * @name getAllProjects
     * @summary get Project by logged Person
     * @operationId project_getByUser
     * @tags Project
     *
     * @description get all Projects by logged Person
     *
     *
     * @returns {IProjectShortDetail[]} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getAllProjects():Promise<IProjectShortDetail[]> {
        return this.requestRestPath("GET", `/project`, {}, [200]);
    }

    /**
     * @name getAllSecurePermissions
     * @summary get all system Permissions
     * @operationId get_Permission_All
     * @tags Permission
     *
     * @description Get all user Permission. You need permission for that or have right system Roles
     *
     *
     * @returns {IPermission[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllSecurePermissions():Promise<IPermission[]> {
        return this.requestRestPath("GET", `/secure/permission/all`, {}, [200]);
    }

    /**
     * @name getAllSecureRoles
     * @summary get all Role from system
     * @operationId get_Role_All
     * @tags Role
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     *
     * @returns {ISecurityRole[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllSecureRoles():Promise<ISecurityRole[]> {
        return this.requestRestPath("GET", `/secure/role/all`, {}, [200]);
    }

    /**
     * @name getAllTariffs
     * @summary get all Tariffs
     * @operationId tariff_getAll
     * @tags Price & Invoice & Tariffs
     *
     * @description get all Tariffs - required for every else action in system. For example: Project is created under the Product which is under some Tariff
     *
     *
     * @returns {ITariff[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getAllTariffs():Promise<ITariff[]> {
        return this.requestRestPath("GET", `/tariff`, {}, [200]);
    }

    /**
     * @name getAllTypeOfBlocks
     * @summary get all Type of Block list
     * @operationId typeOfBlock_getAll
     * @tags Type-of-Block
     *
     * @description get all groups for BlockoBlocks -> Type of block
     *
     *
     * @returns {ITypeOfBlock[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getAllTypeOfBlocks():Promise<ITypeOfBlock[]> {
        return this.requestRestPath("GET", `/typeOfBlock`, {}, [200]);
    }

    /**
     * @name getAllTypeOfBoards
     * @summary get list of all TypeOfBoard
     * @operationId typeOfBoard_getAll
     * @tags Type-Of-Board
     *
     * @description if you want get all TypeOfBoard objects
     *
     *
     * @returns {ITypeOfBoard[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public getAllTypeOfBoards():Promise<ITypeOfBoard[]> {
        return this.requestRestPath("GET", `/typeOfBoard/all`, {}, [200]);
    }

    /**
     * @name getAllTypeOfWidgets
     * @summary get all Type of Widget list
     * @operationId typeOfWidget_getAll
     * @tags Type-of-Widget
     *
     * @description get all groups for GridWidgets -> Type of widget
     *
     *
     * @returns {ITypeOfWidget[]} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllTypeOfWidgets():Promise<ITypeOfWidget[]> {
        return this.requestRestPath("GET", `/type_of_widget`, {}, [200]);
    }

    /**
     * @name getAllUnconfirmedNotifications
     * @summary get unconfirmed notifications
     * @operationId notifications_getUnconfirmed
     * @tags Notifications
     *
     * @description This API should by called right after user logs in. Sends notifications which require confirmation via websocket.
     *
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getAllUnconfirmedNotifications():Promise<IResultOk> {
        return this.requestRestPath("GET", `/notification/unconfirmed`, {}, [200]);
    }

    /**
     * @name getAllWidgetVersions
     * @summary get all GridWidget version
     * @operationId gridWidgetVersion_getAll
     * @tags Grid-Widget
     *
     * @description get all versions (content) from independent GridWidget
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     * @param {IGridWidgetVersionNew} body - Contains Json with values
     *
     * @returns {IGridWidgetVersion[]} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllWidgetVersions(grid_widget_id:string, body:IGridWidgetVersionNew):Promise<IGridWidgetVersion[]> {
        return this.requestRestPath("GET", `/grid_widget/version/all/${grid_widget_id}`, body, [200]);
    }

    /**
     * @name getBProgram
     * @summary get B Program
     * @operationId get_b_Program
     * @tags B_Program
     *
     * @description get B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getBProgram(b_program_id:string):Promise<IBProgram> {
        return this.requestRestPath("GET", `/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name getBProgramVersion
     * @summary get B Program version
     * @operationId get_b_Program_version
     * @tags B_Program
     *
     * @description get B_Program version object
     *
     * @param {string} version_id - version_id String path
     *
     * @returns {IBProgramVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getBProgramVersion(version_id:string):Promise<IBProgramVersion> {
        return this.requestRestPath("GET", `/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name getBlockoBlock
     * @summary get BlockoBlock
     * @operationId blockoBlock_get
     * @tags Blocko-Block
     *
     * @description get independent BlockoBlock object
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     *
     * @returns {IBlockoBlock} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getBlockoBlock(blocko_block_id:string):Promise<IBlockoBlock> {
        return this.requestRestPath("GET", `/blockoBlock/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name getBlockoBlockVersion
     * @summary get version of the BlockoBlock
     * @operationId blockoBlockVersion_get
     * @tags Blocko-Block
     *
     * @description get version (content) from independent BlockoBlock
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getBlockoBlockVersion(blocko_block_version_id:string):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("GET", `/blockoBlock/version/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name getBoard
     * @summary get Board
     * @operationId board_get
     * @tags Board
     *
     * @description if you want get Board object by query = board_id. User can get only boards from project, whitch user owning or user need Permission key "Board_rea".
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public getBoard(board_id:string):Promise<IBoard> {
        return this.requestRestPath("GET", `/board/${board_id}`, {}, [200]);
    }

    /**
     * @name getBoardCheck
     * @summary check Board during registration
     * @operationId board_check
     * @tags Board
     *
     * @description Check Board state for new Registration. Types of responses in JSON state value[CAN_REGISTER, NOT_EXIST, ALREADY_REGISTERED_IN_YOUR_ACCOUNT, ALREADY_REGISTERED, PERMANENTLY_DISABLED, BROKEN_DEVICE]... 
     *     PERMANENTLY_DISABLED - device was removed by Byzance. 
     *    BROKEN_DEVICE - device exist - but its not possible to registered that. Damaged during manufacturing. 
     *
     * @param {string} hash_for_adding
     *
     * @returns {IBoardRegistrationStatus} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBoardCheck(hash_for_adding:string):Promise<IBoardRegistrationStatus> {
        return this.requestRestPath("GET", `/board/check/${hash_for_adding}`, {}, [200]);
    }

    /**
     * @name getBoardIdeHardware
     * @summary get Boards for Ide Operation
     * @operationId board_getForFastUpload
     * @tags Board
     *
     * @description List of boards under Project for fast upload of Firmware to Board from Web IDE
     *
     * @param {string} project_id
     *
     * @returns {IBoardForFastUploadDetail[]} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public getBoardIdeHardware(project_id:string):Promise<IBoardForFastUploadDetail[]> {
        return this.requestRestPath("GET", `/board/ide_upload_hardware/${project_id}`, {}, [200]);
    }

    /**
     * @name getCProgram
     * @summary get C_program
     * @operationId c_program_get
     * @tags C_Program
     *
     * @description get C_program by query = c_program_id
     *
     * @param {string} c_program_id - c_program_id String query
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getCProgram(c_program_id:string):Promise<ICProgram> {
        return this.requestRestPath("GET", `/c_program/${c_program_id}`, {}, [200]);
    }

    /**
     * @name getCProgramVersion
     * @summary get C_program Version
     * @operationId c_programVersion_get
     * @tags C_Program
     *
     * @description get Version of C_program by query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ICProgramVersion} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getCProgramVersion(version_id:string):Promise<ICProgramVersion> {
        return this.requestRestPath("GET", `/c_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name getInstance
     * @summary get Instance by instance_id
     * @operationId get_b_program_instance
     * @tags Instance
     *
     * @description get unique instance under Blocko program (now its 1:1) we are not supporting multi-instance schema yet
     *
     * @param {string} instance_id
     *
     * @returns {IHomerInstance} [code 200] Successfully uploaded
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getInstance(instance_id:string):Promise<IHomerInstance> {
        return this.requestRestPath("GET", `/instance/get/${instance_id}`, {}, [200]);
    }

    /**
     * @name getInstanceProject
     * @summary get Instances by Project
     * @operationId get_b_program_instance_under_project
     * @tags Instance
     *
     * @description get list of instance_ids details under project id
     *
     * @param {string} project_id
     *
     * @returns {IInstanceShortDetail[]} [code 200] Successfully uploaded
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getInstanceProject(project_id:string):Promise<IInstanceShortDetail[]> {
        return this.requestRestPath("GET", `/instance/project/${project_id}`, {}, [200]);
    }

    /**
     * @name getInstanceRecord
     * @summary get Instance Record by instance_record_id
     * @operationId get_b_program_instance_record
     * @tags Instance
     *
     * @description get unique instance under Blocko program (now its 1:1) we are not supporting multi-instance schema yet
     *
     * @param {string} instance_record_id
     *
     * @returns {IHomerInstanceRecord} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getInstanceRecord(instance_record_id:string):Promise<IHomerInstanceRecord> {
        return this.requestRestPath("GET", `/instance_record/get/${instance_record_id}`, {}, [200]);
    }

    /**
     * @name getInvoice
     * @summary get Invoice with all details
     * @operationId invoice_get
     * @tags Price & Invoice & Tariffs
     *
     * @description get summary information from invoice
     *
     * @param {string} invoice_id
     *
     * @returns {IInvoiceFullDetails} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getInvoice(invoice_id:string):Promise<IInvoiceFullDetails> {
        return this.requestRestPath("GET", `/invoice/${invoice_id}`, {}, [200]);
    }

    /**
     * @name getInvoicePdf
     * @summary get Invoice PDF file
     * @operationId invoice_getPdf
     * @tags Price & Invoice & Tariffs
     *
     * @description get PDF invoice file
     *
     * @param {string} kind
     * @param {string} invoice_id
     *
     * @returns {IResult} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getInvoicePdf(kind:string, invoice_id:string):Promise<IResult> {
        return this.requestRestPath("GET", `/invoice/pdf/${kind}/${invoice_id}`, {}, [200]);
    }

    /**
     * @name getLibrary
     * @summary get Library
     * @operationId library_get
     * @tags Library
     *
     * @description if you want to get Library.
     *
     * @param {string} library_id - library_id String query
     *
     * @returns {ILibrary} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public getLibrary(library_id:string):Promise<ILibrary> {
        return this.requestRestPath("GET", `/library/${library_id}`, {}, [200]);
    }

    /**
     * @name getLibraryVersion
     * @summary get Library Version
     * @operationId libraryVersion_get
     * @tags Library
     *
     * @description get Version of Library by query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ILibraryVersion} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public getLibraryVersion(version_id:string):Promise<ILibraryVersion> {
        return this.requestRestPath("GET", `/library/version/${version_id}`, {}, [200]);
    }

    /**
     * @name getLoggedInPerson
     * @summary get Person by token (after Oauth2 Login -> Facebook, GitHub, Twitter)
     * @operationId getPersonByToken
     * @tags Access, Person, Social-GitHub, Social-Facebook
     *
     * @description If you want login to system with social networks - you can used facebook, github or twitter api just ask for token, server responds with object where is token and redirection link. Redirect user to this link and after returning to success page that you filled in ask for token, ask again to this api and server respond with Person Object and with Roles and Permissions lists
     *
     *
     * @returns {ILoginResult} [code 200] Successfully logged
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Wrong Email or Password
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getLoggedInPerson():Promise<ILoginResult> {
        return this.requestRestPath("GET", `/login/person`, {}, [200]);
    }

    /**
     * @name getMProgram
     * @summary get M_Program
     * @operationId get_M_Program
     * @tags M_Program
     *
     * @description get M_Program by quarry m_program_id
     *
     * @param {string} m_progrm_id - m_program_id String query
     *
     * @returns {IMProgram} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProgram(m_progrm_id:string):Promise<IMProgram> {
        return this.requestRestPath("GET", `/m_program/${m_progrm_id}`, {}, [200]);
    }

    /**
     * @name getMProgramAppToken
     * @summary get M_Program by generated token
     * @operationId get_M_Program_byQR_Token_forMobile
     * @tags APP-Api
     *
     * @description get M_Program by token
     *
     * @param {string} qr_token
     *
     * @returns {ITerminalConnectionSummary} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Bad Request - Probably token is not valid anymore
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IServerOffline} [code 477] External Server is offline
     * @throws [code 500] Server side Error
     */
    public getMProgramAppToken(qr_token:string):Promise<ITerminalConnectionSummary> {
        return this.requestRestPath("GET", `/m_program/app/token/${qr_token}`, {}, [200]);
    }

    /**
     * @name getMProgramVersion
     * @summary get M_Program Version
     * @operationId get_M_Program_version
     * @tags M_Program
     *
     * @description get M_Program Version by quarry m_program_version_id
     *
     * @param {string} m_program_version_id - m_program_version_id String query
     *
     * @returns {IMProgramVersion} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProgramVersion(m_program_version_id:string):Promise<IMProgramVersion> {
        return this.requestRestPath("GET", `/m_program/version/${m_program_version_id}`, {}, [200]);
    }

    /**
     * @name getMProject
     * @summary get M_Project
     * @operationId get_M_Project
     * @tags M_Program
     *
     * @description get M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProject(m_project_id:string):Promise<IMProject> {
        return this.requestRestPath("GET", `/m_project/${m_project_id}`, {}, [200]);
    }

    /**
     * @name getMProjectInterfaceCollection
     * @summary get accessible interface from M_Project
     * @operationId get_M_Project_Interface_collection
     * @tags M_Program
     *
     * @description get accessible interface from M_Project
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IMProjectInterface} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProjectInterfaceCollection(m_project_id:string):Promise<IMProjectInterface> {
        return this.requestRestPath("GET", `/m_project/interface_collection/${m_project_id}`, {}, [200]);
    }

    /**
     * @name getPerson
     * @summary get Person
     * @operationId person_get
     * @tags Person
     *
     * @description get Person by id
     *
     * @param {string} person_id - person_id String query
     *
     * @returns {IPerson} [code 200] OK Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getPerson(person_id:string):Promise<IPerson> {
        return this.requestRestPath("GET", `/person/${person_id}`, {}, [200]);
    }

    /**
     * @name getProcessor
     * @summary get Processor
     * @operationId processor_get
     * @tags Processor
     *
     * @description If you get Processor by query processor_id.
     *
     * @param {string} processor_id - processor_id String query
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Objects not found
     * @throws [code 500] Server side Error
     */
    public getProcessor(processor_id:string):Promise<IProcessor> {
        return this.requestRestPath("GET", `/processor/${processor_id}`, {}, [200]);
    }

    /**
     * @name getProducer
     * @summary get Producer
     * @operationId producer_get
     * @tags Producer
     *
     * @description if you want get Producer. Its company owned physical boards and we used that for filtering
     *
     * @param {string} producer_id
     *
     * @returns {IProducer} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public getProducer(producer_id:string):Promise<IProducer> {
        return this.requestRestPath("GET", `/producer/${producer_id}`, {}, [200]);
    }

    /**
     * @name getProductExtension
     * @summary get Product Extension by ID
     * @operationId productExtension_get
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id - extension_id String query
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public getProductExtension(extension_id:string):Promise<IProductExtension> {
        return this.requestRestPath("GET", `/product_extension/${extension_id}`, {}, [200]);
    }

    /**
     * @name getProject
     * @summary get Project
     * @operationId project_get
     * @tags Project
     *
     * @description get Projects by project_id
     *
     * @param {string} project_id - project_id String path
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getProject(project_id:string):Promise<IProject> {
        return this.requestRestPath("GET", `/project/${project_id}`, {}, [200]);
    }

    /**
     * @name getSecurePersonSystemAcces
     * @summary get all system person_permissions & Roles
     * @operationId get_System_Access
     * @tags Role, Permission, Person
     *
     * @description This api return List of Roles and List of Permission
     *
     * @param {string} person_id
     *
     * @returns {ISystemAccess} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getSecurePersonSystemAcces(person_id:string):Promise<ISystemAccess> {
        return this.requestRestPath("GET", `/secure/person/system_acces/${person_id}`, {}, [200]);
    }

    /**
     * @name getTypeOfBlock
     * @summary get TypeOfBlock 
     * @operationId typeOfBlock_get
     * @tags Type-of-Block
     *
     * @description get BlockoBlock 
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     *
     * @returns {ITypeOfBlock} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public getTypeOfBlock(type_of_block_id:string):Promise<ITypeOfBlock> {
        return this.requestRestPath("GET", `/typeOfBlock/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name getTypeOfBoard
     * @summary get TypeOfBoard
     * @operationId typeOfBoard_get
     * @tags Type-Of-Board
     *
     * @description if you want get TypeOfBoard object by query = type_of_board_id
     *
     * @param {string} type_of_board_id
     *
     * @returns {ITypeOfBoard} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found - details in message
     * @throws [code 500] Server side Error
     */
    public getTypeOfBoard(type_of_board_id:string):Promise<ITypeOfBoard> {
        return this.requestRestPath("GET", `/typeOfBoard/${type_of_board_id}`, {}, [200]);
    }

    /**
     * @name getTypeOfWidget
     * @summary get TypeOfWidget 
     * @operationId typeOfWidget_get
     * @tags Type-of-Widget
     *
     * @description get TypeOfWidget
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {ITypeOfWidget} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getTypeOfWidget(type_of_widget_id:string):Promise<ITypeOfWidget> {
        return this.requestRestPath("GET", `/type_of_widget/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name getWebsocketAccessToken
     * @summary get temporary Connection Token
     * @operationId get_Websocket_token
     * @tags Access, WebSocket
     *
     * @description For connection to websocket, you have to connect with temporary unique token. This Api return Tokenwith a maximum lifetime of 5 seconds. After the token is deactivated. After logging in, or the connectionlost is token deactivated also. 
     *
     *
     * @returns {IWebSocketToken} [code 200] Token successfully generated
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public getWebsocketAccessToken():Promise<IWebSocketToken> {
        return this.requestRestPath("GET", `/websocket/access_token`, {}, [200]);
    }

    /**
     * @name getWebsocketHomerServer
     * @summary Homer Server Connection
     * @operationId homer_cloud_server_connection
     * @tags WebSocket
     *
     * @param {string} identificator
     *
     * @returns {IWebSocketString} [code 200] successful operation
     *
     */
    public getWebsocketHomerServer(identificator:string):Promise<IWebSocketString> {
        return this.requestRestPath("GET", `/websocket/homer_server/${identificator}`, {}, [200]);
    }

    /**
     * @name getWidget
     * @summary get GridWidget
     * @operationId gridWidget_get
     * @tags Grid-Widget
     *
     * @description get independent GridWidget object
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IGridWidget} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getWidget(grid_widget_id:string):Promise<IGridWidget> {
        return this.requestRestPath("GET", `/grid_widget/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name getWidgetVersion
     * @summary get version of the GridWidget
     * @operationId gridWidgetVersion_get
     * @tags Grid-Widget
     *
     * @description get version (content) from independent GridWidget
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IGridWidgetVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public getWidgetVersion(grid_widget_version_id:string):Promise<IGridWidgetVersion> {
        return this.requestRestPath("GET", `/grid_widget/version/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name listBPrograms
     * @summary get B_Program by Filter
     * @operationId get_b_Program_by_Filter
     * @tags B_Program
     *
     * @description get B_Program List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBProgramFilter} body - Contains Json with values
     *
     * @returns {IBProgramList} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public listBPrograms(page_number:number, body:IBProgramFilter):Promise<IBProgramList> {
        return this.requestRestPath("PUT", `/b_program/list/${page_number}`, body, [200]);
    }

    /**
     * @name listBlockoBlocks
     * @summary get BlockoBlock by Filter
     * @operationId blockoBlock_getByFilter
     * @tags Blocko-Block
     *
     * @description get BlockoBlock List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBlockoBlockFilter} body - Contains Json with values
     *
     * @returns {IBlockoBlockList} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public listBlockoBlocks(page_number:number, body:IBlockoBlockFilter):Promise<IBlockoBlockList> {
        return this.requestRestPath("PUT", `/blockoBlock/list/${page_number}`, body, [200]);
    }

    /**
     * @name listBoards
     * @summary get Boards with filter parameters
     * @operationId board_getByFilter
     * @tags Board
     *
     * @description Get List of boards. Acording by permission - system return only hardware from project, where is user owner or all boards if user have static Permission key
     *
     * @param {IBoardFilter} body - Contains Json with values
     *
     * @returns {IBoardList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public listBoards(body:IBoardFilter):Promise<IBoardList> {
        return this.requestRestPath("PUT", `/board/filter`, body, [200]);
    }

    /**
     * @name listCProgramVersionPublics
     * @summary get C_program_Version public
     * @operationId c_program_getPublicList
     * @tags C_Program
     *
     * @description get approved or edited C_program public Versions 
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)
     *
     * @returns {ICProgramVersionPublicList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public listCProgramVersionPublics(page_number:number):Promise<ICProgramVersionPublicList> {
        return this.requestRestPath("GET", `/c_program/version/public/list/${page_number}`, {}, [200]);
    }

    /**
     * @name listCPrograms
     * @summary get C_program List
     * @operationId c_program_getByFilter
     * @tags C_Program
     *
     * @description get all C_Programs that belong to logged person
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n. For first call, use 1 (first page of list)
     * @param {ICProgramFilter} body - Contains Json with values
     *
     * @returns {ICProgramList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public listCPrograms(page_number:number, body:ICProgramFilter):Promise<ICProgramList> {
        return this.requestRestPath("PUT", `/c_program/list/${page_number}`, body, [200]);
    }

    /**
     * @name listInstances
     * @summary get Instance with filter parameters
     * @operationId get_b_program_instance_by_filter
     * @tags Instance
     *
     * @description Get List of Instances. Acording by permission - system return only Instance from project, where is user owner or all Instances if user have static Permission key
     *
     * @param {IInstanceFilter} body - Contains Json with values
     *
     * @returns {IInstanceList} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public listInstances(body:IInstanceFilter):Promise<IInstanceList> {
        return this.requestRestPath("PUT", `/instance/filter`, body, [200]);
    }

    /**
     * @name listLibraries
     * @summary get List of Libraries details by filter
     * @operationId library_getByFilter
     * @tags Library
     *
     * @description if you want to get Libraries filtered by specific parameters. For private Libraries under project set project_id, for all public use empty JSON
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...n. For first call, use 1
     * @param {ILibraryFilter} body - Contains Json with values
     *
     * @returns {ILibraryList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Objects not found
     * @throws [code 500] Server side Error
     */
    public listLibraries(page_number:number, body:ILibraryFilter):Promise<ILibraryList> {
        return this.requestRestPath("PUT", `/library/list/${page_number}`, body, [200]);
    }

    /**
     * @name listNotifications
     * @summary get latest notification
     * @operationId notification_getByFilter
     * @tags Notifications
     *
     * @description Get list of latest user notifications. Server return maximum 25 latest objects. 
     *    
     *     For get another page (next 25 notifications) call this api with "page_number" path parameter. 
     *    
     *     May missing or you can insert Integer values from page[1,2...,n] in JsonNotification body cannot by documented through swagger. Visit wiki.byzance.cz
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...  For first call, use 1
     *
     * @returns {INotificationList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public listNotifications(page_number:number):Promise<INotificationList> {
        return this.requestRestPath("GET", `/notification/list/${page_number}`, {}, [200]);
    }

    /**
     * @name listTypeOfBlocks
     * @summary get TypeOfBlock by Filter
     * @operationId typeOfBlock_getByFilter
     * @tags Type-of-Block
     *
     * @description get TypeOfBlock List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {ITypeOfBlockFilter} body - Contains Json with values
     *
     * @returns {ITypeOfBlockList} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public listTypeOfBlocks(page_number:number, body:ITypeOfBlockFilter):Promise<ITypeOfBlockList> {
        return this.requestRestPath("PUT", `/typeOfBlock/list/${page_number}`, body, [200]);
    }

    /**
     * @name listTypeOfWidgets
     * @summary get TypeOfWidget by Filter
     * @operationId typeOfWidget_getByFilter
     * @tags Type-of-Widget
     *
     * @description get TypeOfWidget List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {ITypeOfWidgetFilter} body - Contains Json with values
     *
     * @returns {ITypeOfWidgetList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listTypeOfWidgets(page_number:number, body:ITypeOfWidgetFilter):Promise<ITypeOfWidgetList> {
        return this.requestRestPath("PUT", `/type_of_widget/list/${page_number}`, body, [200]);
    }

    /**
     * @name listWidgets
     * @summary get GridWidget by Filter
     * @operationId gridWidget_getByFilter
     * @tags Grid-Widget
     *
     * @description get GridWidget List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IGridWidgetFilter} body - Contains Json with values
     *
     * @returns {IGridWidgetList} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listWidgets(page_number:number, body:IGridWidgetFilter):Promise<IGridWidgetList> {
        return this.requestRestPath("PUT", `/grid_widget/list/${page_number}`, body, [200]);
    }

    /**
     * @name markNotificationRead
     * @summary mark notifications as read
     * @operationId notification_read
     * @tags Notifications
     *
     * @description Mark notifications as read. Send list with ids
     *
     * @param {INotificationRead} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully marked as read
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public markNotificationRead(body:INotificationRead):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/notification/read`, body, [200]);
    }

    /**
     * @name productActivate
     * @summary activate Product Tariff
     * @operationId product_activate
     * @tags Price & Invoice & Tariffs
     *
     * @description activate product and deactivate all staff around that
     *
     * @param {string} product_id - product_id String query
     *
     * @returns {IProduct} [code 200] Activating was successful
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productActivate(product_id:string):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/activate/${product_id}`, {}, [200]);
    }

    /**
     * @name productDeactivate
     * @summary deactivate Product Tariff
     * @operationId product_deactivate
     * @tags Price & Invoice & Tariffs
     *
     * @description deactivate product and deactivate all stuff under it
     *
     * @param {string} product_id - product_id String query
     *
     * @returns {IProduct} [code 200] Deactivating was successful
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public productDeactivate(product_id:string):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/deactivate/${product_id}`, {}, [200]);
    }

    /**
     * @name putAdminEmbeddedHardwareRequest
     * @summary Request for Details for new Board
     * @operationId new_hardware_request
     * @tags Board_Registration
     *
     * @description Required data for new Embedded Hardware for first hardware settings. Required Permission key from Tyrion Backend Web Page!
     *
     * @param {IHardwareNewSettingsRequest} body - Contains Json with values
     *
     * @returns {IHardwareNewSettingsResult} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putAdminEmbeddedHardwareRequest(body:IHardwareNewSettingsRequest):Promise<IHardwareNewSettingsResult> {
        return this.requestRestPath("PUT", `/admin/embedded_hardware/request`, body, [200]);
    }

    /**
     * @name putAdminEmbeddedHardwareResult
     * @summary Result for Details for new Board
     * @operationId new_hardware_result
     * @tags Board_Registration
     *
     * @description Result data for new Embedded Hardware for first hardware settings. Required Permission key from Tyrion Backend Web Page!
     *
     * @param {IHardwareNewHardwareResult} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putAdminEmbeddedHardwareResult(body:IHardwareNewHardwareResult):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/embedded_hardware/result`, body, [200]);
    }

    /**
     * @name putBlockoBlockOrderDown
     * @summary manual order Down for Blocko Block list
     * @operationId blockoBlock_order_down
     * @tags Blocko-Block
     *
     * @description set up order
     *
     * @param {string} blocko_block_id - blocko_block_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putBlockoBlockOrderDown(blocko_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/blockoBlock/order/down/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name putBlockoBlockOrderUp
     * @summary manual order UP for Blocko Block list
     * @operationId blockoBlock_order_up
     * @tags Blocko-Block
     *
     * @description set up order
     *
     * @param {string} blocko_block_id - blocko_block_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putBlockoBlockOrderUp(blocko_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/blockoBlock/order/up/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name putBlockoBlockVersionMakePublic
     * @summary make BlockoBlock version public
     * @operationId blockoBlockVersion_makePublic
     * @tags Blocko-Block
     *
     * @description sets Approval_state to pending
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putBlockoBlockVersionMakePublic(blocko_block_version_id:string):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("PUT", `/blockoBlock/version/make_public/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name putCProgramVersionCompile
     * @summary compile C_program Version
     * @operationId compile_C_Program_version
     * @tags C_Program
     *
     * @description Compile specific version of C_program - before compilation - you have to update (save) version code
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ICompilationOk} [code 200] Compilation successful
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {ICompilationBuildError[]} [code 422] Compilation unsuccessful
     * @throws {IServerOffline} [code 477] External server is offline
     * @throws {IExternalServerSideError} [code 478] External server side Error
     * @throws [code 500] Server side Error
     */
    public putCProgramVersionCompile(version_id:string):Promise<ICompilationOk> {
        return this.requestRestPath("PUT", `/c_program/version/compile/${version_id}`, {}, [200]);
    }

    /**
     * @name putCProgramVersionMakePublic
     * @summary make C_program_Version public
     * @operationId c_programVersion_makePublic
     * @tags C_Program
     *
     * @description Make C_program public, so other users can see it and use it. Attention! Attention! Attention! A user can publish only three programs at the stage waiting for approval.
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] The user has entered more than three channels. Or other problem :(
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putCProgramVersionMakePublic(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/version/make_public/${version_id}`, {}, [200]);
    }

    /**
     * @name putInstanceApp
     * @summary change settings on Grid App in Instance
     * @operationId instance_change_settings_grid_App
     * @tags Instance
     *
     * @param {IInstanceGridAppSettings} body - Contains Json with values
     *
     * @returns {IModelMProgramInstanceParameter} [code 200] Ok Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putInstanceApp(body:IInstanceGridAppSettings):Promise<IModelMProgramInstanceParameter> {
        return this.requestRestPath("PUT", `/instance/grid_app`, body, [200]);
    }

    /**
     * @name putPersonPictureRemove
     * @summary remove Person picture
     * @operationId person_removePicture
     * @tags Person
     *
     * @description Removes picture of logged person
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putPersonPictureRemove():Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/picture/remove`, {}, [200]);
    }

    /**
     * @name putProductCredit
     * @summary buy credit for given product
     * @operationId product_credit
     * @tags Price & Invoice & Tariffs
     *
     * @description creates invoice - credit will be added after payment if payment method is bank transfer or if getting money from credit card is successful
     *
     * @param {string} product_id - product_id String query
     * @param {IProductCredit} body - Contains Json with values
     *
     * @returns {IInvoice} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putProductCredit(product_id:string, body:IProductCredit):Promise<IInvoice> {
        return this.requestRestPath("PUT", `/product/credit/${product_id}`, body, [200]);
    }

    /**
     * @name putProductExtensionActivate
     * @summary activate Product Extension
     * @operationId productExtension_activate
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id - extension_id String query
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public putProductExtensionActivate(extension_id:string):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/product_extension/activate/${extension_id}`, {}, [200]);
    }

    /**
     * @name putProductExtensionDeactivate
     * @summary deactivate Product Extension
     * @operationId productExtension_deactivate
     * @tags Price & Invoice & Tariffs
     *
     * @description Extension is used to somehow(based on configuration and type) extend product capabilities. (e.g. how many projects can user have)
     *
     * @param {string} extension_id - extension_id String query
     *
     * @returns {IProductExtension} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side error
     */
    public putProductExtensionDeactivate(extension_id:string):Promise<IProductExtension> {
        return this.requestRestPath("PUT", `/product_extension/deactivate/${extension_id}`, {}, [200]);
    }

    /**
     * @name putProductTerminateOndemand
     * @summary terminate on demand
     * @operationId product_terminateOnDemand
     * @tags Price & Invoice & Tariffs
     *
     * @description cancel automatic payments in Product
     *
     * @param {string} product_id - product_id String query
     *
     * @returns {IResultOk} [code 200] Successfully updated
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putProductTerminateOndemand(product_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/product/terminate_ondemand/${product_id}`, {}, [200]);
    }

    /**
     * @name putProjectChangeParticipantState
     * @summary change participant status
     * @operationId project_changeParticipantStatus
     * @tags Project
     *
     * @description Changes participant status 
     *
     * @param {string} project_id - project_id String path
     * @param {IProjectParticipantStatus} body - Contains Json with values
     *
     * @returns {IProjectParticipant} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putProjectChangeParticipantState(project_id:string, body:IProjectParticipantStatus):Promise<IProjectParticipant> {
        return this.requestRestPath("PUT", `/project/change_participant_state/${project_id}`, body, [200]);
    }

    /**
     * @name putSecureRolePerson
     * @summary add Person to Role (Group) 
     * @operationId add_Role_Person
     * @tags Role, Person
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     * @param {string} mail
     * @param {string} role_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putSecureRolePerson(mail:string, role_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/secure/role/person/${mail}/${role_id}`, {}, [200]);
    }

    /**
     * @name putTypeOfBlockOrderDown
     * @summary manual order Down for Type of Block list
     * @operationId typeOfBlock_order_down
     * @tags Type-of-Block
     *
     * @description set up order
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putTypeOfBlockOrderDown(type_of_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/typeOfBlock/order/down/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name putTypeOfBlockOrderUp
     * @summary manual order UP for Type of Block list
     * @operationId typeOfBlock_order_up
     * @tags Type-of-Block
     *
     * @description set up order
     *
     * @param {string} type_of_block_id - blocko_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public putTypeOfBlockOrderUp(type_of_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/typeOfBlock/order/up/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name putTypeOfWidgetOrderDown
     * @summary manual order Down for Type of Block list
     * @operationId typeOfWidget_order_down
     * @tags Type-of-Block
     *
     * @description set up order
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putTypeOfWidgetOrderDown(type_of_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/type_of_widget/order/down/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name putTypeOfWidgetOrderUp
     * @summary manual order UP for Type of Block list
     * @operationId typeOfWidget_order_up
     * @tags Type-of-Block
     *
     * @description set up order
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putTypeOfWidgetOrderUp(type_of_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/type_of_widget/order/up/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name putWidgetOrderDown
     * @summary manual order Down for  grid Widgetlist
     * @operationId gridWidget_order_down
     * @tags Grid-Widget
     *
     * @description set up order
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putWidgetOrderDown(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/grid_widget/order/down/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name putWidgetOrderUp
     * @summary manual order UP for grid Widget list
     * @operationId gridWidget_order_up
     * @tags Grid-Widget
     *
     * @description set up order
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putWidgetOrderUp(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/grid_widget/order/up/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name putWidgetVersionMakePublic
     * @summary make GridWidget version public
     * @operationId gridWidgetVersion_makePublic
     * @tags Grid-Widget
     *
     * @description sets Approval_state to pending
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IGridWidgetVersion} [code 200] Ok Result
     *
     * @throws {INotFound} [code 400] Object not found
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putWidgetVersionMakePublic(grid_widget_version_id:string):Promise<IGridWidgetVersion> {
        return this.requestRestPath("PUT", `/grid_widget/version/make_public/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name recoveryPersonPassword
     * @summary change person password
     * @operationId person_passwordRecovery
     * @tags Access
     *
     * @description changes password if password_recovery_token is not older than 24 hours, deletes all FloatingPersonTokens
     *
     * @param {IPersonPasswordNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public recoveryPersonPassword(body:IPersonPasswordNew):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/password/recovery`, body, [200]);
    }

    /**
     * @name recoveryPersonPasswordMail
     * @summary send password recovery email
     * @operationId person_passwordRecoverySendEmail
     * @tags Access
     *
     * @description sends email with link for changing forgotten password
     *
     * @param {IPersonPasswordRecoveryEmail} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IInvalidBody} [code 400] Invalid body
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public recoveryPersonPasswordMail(body:IPersonPasswordRecoveryEmail):Promise<IResultOk> {
        return this.requestRestPath("POST", `/person/password/recovery_mail`, body, [200]);
    }

    /**
     * @name resendInvoice
     * @summary re-send Invoice to specific email
     * @operationId invoice_resend
     * @tags Price & Invoice & Tariffs
     *
     * @description re-send Invoice to specific email
     *
     * @param {string} invoice_id
     * @param {IResendEmail} body - Contains Json with values - values in Json is not requierd
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong 
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public resendInvoice(invoice_id:string, body:IResendEmail):Promise<IResultOk> {
        return this.requestRestPath("POST", `/invoice/resend/${invoice_id}`, body, [200]);
    }

    /**
     * @name sendInvoiceReimbursement
     * @summary reimbursement of an unpaid invoice
     * @operationId invoice_reimbursement
     * @tags Price & Invoice & Tariffs
     *
     * @description reimbursement of an unpaid invoice - with settings from creating product before
     *
     * @param {string} invoice_id
     *
     * @returns {IInvoice} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Not found object
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public sendInvoiceReimbursement(invoice_id:string):Promise<IInvoice> {
        return this.requestRestPath("POST", `/invoice/reimbursement/${invoice_id}`, {}, [200]);
    }

    /**
     * @name shareProject
     * @summary share Project
     * @operationId project_invite
     * @tags Project
     *
     * @description sends Invitation to all users in list: List<persons_mail>
     *
     * @param {string} project_id - project_id String path
     * @param {IShareProjectPerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public shareProject(project_id:string, body:IShareProjectPerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/shareProject/${project_id}`, body, [200]);
    }

    /**
     * @name startOrShutDownInstance
     * @summary start or shutDown Instance
     * @operationId instance_start_or_shut_down
     * @tags Instance
     *
     * @description If instance is not running this Command uploud instance to cloud and starter all procedures. If instance is online, stis Command shutdown instance immidietly with all procedures.
     *
     * @param {string} instance_id
     *
     * @returns {IResultOk} [code 200] Successfully removed
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public startOrShutDownInstance(instance_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/instance/start_or_shut_down/${instance_id}`, {}, [200]);
    }

    /**
     * @name unshareProject
     * @summary unshare Project
     * @operationId project_removeParticipant
     * @tags Project
     *
     * @description unshare Project with all users in list: List<person_id>
     *
     * @param {string} project_id - project_id String path
     * @param {IShareProjectPerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public unshareProject(project_id:string, body:IShareProjectPerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/unshareProject/${project_id}`, body, [200]);
    }

    /**
     * @name uploadCProgramVersion
     * @summary upload C_Program into Hardware
     * @operationId uploadCompilationToBoard
     * @tags C_Program, Actualization
     *
     * @description Upload compilation to list of hardware. Compilation is on Version oc C_program. And before uplouding compilation, you must succesfuly compile required version before! Result (HTML code) will be every time 200. - Its because upload, restart, etc.. operation need more than ++30 second There is also problem / chance that Tyrion didn't find where Embedded hardware is. So you have to listening Server Sent Events (SSE) and show "future" message to the user!
     *
     * @param {IListOfBoards} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IForbidden} [code 403] Need required permission
     * @throws {INotFound} [code 404] Object not found
     * @throws [code 500] Server side Error
     */
    public uploadCProgramVersion(body:IListOfBoards):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/c_program/version/upload`, body, [200]);
    }

    /**
     * @name uploadPersonPicture
     * @summary upload Person picture
     * @operationId person_uploadPicture
     * @tags Person
     *
     * @description Uploads personal photo. Picture must be smaller than 800 KB and its dimensions must be between 50 and 400 pixels. If user already has a picture, it will be replaced by the new one. API requires base64 Content-Type, name of the property is 'file'.
     *
     * @param {IBase64File} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IUnauthorized} [code 401] Unauthorized request
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public uploadPersonPicture(body:IBase64File):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/person/picture/upload`, body, [200]);
    }

    /**
     * @name validatePersonEntity
     * @summary validate some Entity
     * @operationId person_validateProperty
     * @tags Person
     *
     * @description for cyclical validation during registration, key contains 'mail' or 'nick_name'. Or can be used for 'vat_number' as a key.
     *
     * @param {IEntityValidationIn} body - Contains Json with values
     *
     * @returns {IEntityValidationOut} [code 200] Result if it is possible to use
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IInternalServerError} [code 500] Server side Error
     */
    public validatePersonEntity(body:IEntityValidationIn):Promise<IEntityValidationOut> {
        return this.requestRestPath("POST", `/person/validate_entity`, body, [200]);
    }

}
