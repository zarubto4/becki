/**************************************************************/
/*                                                            */
/*   Generated Tyrion API backend file                        */
/*   © 2015-2016 Becki Authors.                               */
/*                                                            */
/*   Build date: 2016-09-12 14:41:39                          */
/*   Tyrion version: 1.06.6.5                                 */
/*                                                            */
/*   Generated by automated script from Swagger JSON.         */
/*   Script author: David Hrádek (david@hradyho.net)          */
/*                                                            */
/**************************************************************/


/**
 * @name IActualizationProcedure
 * @description: Interface IActualizationProcedure definition
 */
export interface IActualizationProcedure {
    /**
     * @name b_program_actualization
     * @type IProgramActualization
     * @readonly
     * @required
     */
    b_program_actualization: IProgramActualization;
    /**
     * @name date_of_create
     * @type string
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_finish
     * @type string
     * @description can be empty, which means that the procedure is not done yet. UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_finish: string;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name state
     * @type ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress")
     * @required
     */
    state: ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress");
    /**
     * @name state_fraction
     * @type string
     * @readonly
     * @required
     */
    state_fraction: string;
    /**
     * @name state_percentage
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    state_percentage: number;
    /**
     * @name updates
     * @type ICProgramUpdatePlan[]
     * @description Can be empty
     * @required
     */
    updates: ICProgramUpdatePlan[];
}


/**
 * @name IAdditionalPackage
 * @description: Interface IAdditionalPackage definition
 */
export interface IAdditionalPackage {
    /**
     * @name identificator
     * @type string
     * @readonly
     * @required
     */
    identificator: string;
    /**
     * @name labels
     * @type ITariffLabel[]
     * @readonly
     * @required
     */
    labels: ITariffLabel[];
    /**
     * @name package_name
     * @type string
     * @readonly
     * @required
     */
    package_name: string;
    /**
     * @name price
     * @type IPrice
     * @readonly
     * @required
     */
    price: IPrice;
}


/**
 * @name IApplicableProduct
 * @description: Json Model for selecting Product for registration new project
 */
export interface IApplicableProduct {
    /**
     * @name product_id
     * @type number
     * @format int64
     * @readonly
     * @required
     */
    product_id: number;
    /**
     * @name product_individual_name
     * @type string
     * @readonly
     * @required
     */
    product_individual_name: string;
    /**
     * @name product_type
     * @type string
     * @readonly
     * @required
     */
    product_type: string;
}


/**
 * @name IBPair
 * @description: Interface IBPair definition
 */
export interface IBPair {
    /**
     * @name board_id
     * @type string
     * @readonly
     * @required
     */
    board_id: string;
    /**
     * @name c_program_id
     * @type string
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_version_id
     * @type string
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IBProgram
 * @description: Interface IBProgram definition
 */
export interface IBProgram {
    /**
     * @name dateOfCreate
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    dateOfCreate: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name lastUpdate
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    lastUpdate: number;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name program_description
     * @type string
     */
    program_description?: string;
    /**
     * @name program_state
     * @type IBProgramState
     * @readonly
     * @required
     */
    program_state: IBProgramState;
    /**
     * @name program_versions
     * @type IBProgramVersion[]
     * @readonly
     * @required
     */
    program_versions: IBProgramVersion[];
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBProgramFilter
 * @description: Json Model for getting B_Program Filter List
 */
export interface IBProgramFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get b_programs of given project
     */
    project_id?: string;
}


/**
 * @name IBProgramHwGroup
 * @description: Interface IBProgramHwGroup definition
 */
export interface IBProgramHwGroup {
    /**
     * @name device_board_pairs
     * @type IBPair[]
     */
    device_board_pairs?: IBPair[];
    /**
     * @name main_board_pair
     * @type IBPair
     */
    main_board_pair?: IBPair;
}


/**
 * @name IBProgramLight
 * @description: B_Program Light (only few properties)
 */
export interface IBProgramLight {
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name b_program_version_description
     * @type string
     * @readonly
     * @required
     */
    b_program_version_description: string;
    /**
     * @name b_program_version_id
     * @type string
     * @readonly
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @readonly
     * @required
     */
    b_program_version_name: string;
}


/**
 * @name IBProgramList
 * @description: Individual B_Program List
 */
export interface IBProgramList {
    /**
     * @name content
     * @type IBProgramLight[]
     * @readonly
     * @required
     */
    content: IBProgramLight[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBProgramNew
 * @description: Json Model for new B_Program
 */
export interface IBProgramNew {
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name program_description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    program_description?: string;
}


/**
 * @name IBProgramState
 * @description: Json Model for B_Program state
 */
export interface IBProgramState {
    /**
     * @name cloud
     * @type IBProgramStateCloud
     * @readonly
     * @required
     */
    cloud: IBProgramStateCloud;
    /**
     * @name local
     * @type IBProgramStateLocal
     * @readonly
     * @required
     */
    local: IBProgramStateLocal;
    /**
     * @name m_project_id
     * @type string
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name online
     * @type boolean
     * @readonly
     * @required
     */
    online: boolean;
    /**
     * @name online_boards
     * @type IBoard[]
     * @readonly
     * @required
     */
    online_boards: IBoard[];
    /**
     * @name uploaded
     * @type boolean
     * @readonly
     * @required
     */
    uploaded: boolean;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name where
     * @type string
     * @readonly
     * @required
     */
    where: string;
}


/**
 * @name IBProgramVersion
 * @description: Json Model of Version of B_Program
 */
export interface IBProgramVersion {
    /**
     * @name hardware_groups
     * @type IBProgramHwGroup[]
     * @readonly
     * @required
     */
    hardware_groups: IBProgramHwGroup[];
    /**
     * @name program
     * @type string
     * @readonly
     * @required
     */
    program: string;
    /**
     * @name version_Object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_Object: IVersionObject;
}


/**
 * @name IBProgramVersionNew
 * @description: Json Model for new Version of B_Program
 */
export interface IBProgramVersionNew {
    /**
     * @name hardware_group
     * @type IHardwareGroup[]
     * @description Connected groups of hardware - User can create Blocko program without hardware.
     */
    hardware_group?: IHardwareGroup[];
    /**
     * @name program
     * @type string
     * @required
     */
    program: string;
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBProgramStateCloud
 * @description: Interface IBProgramStateCloud definition
 */
export interface IBProgramStateCloud {
    /**
     * @name instance
     * @type IHomerInstance
     */
    instance?: IHomerInstance;
    /**
     * @name server_name
     * @type string
     */
    server_name?: string;
}


/**
 * @name IBProgramStateLocal
 * @description: Interface IBProgramStateLocal definition
 */
export interface IBProgramStateLocal {
    /**
     * @name instance
     * @type IHomerInstance
     */
    instance?: IHomerInstance;
    /**
     * @name server
     * @type IPrivateHomerServer
     */
    server?: IPrivateHomerServer;
}


/**
 * @name IBadRequest
 * @description: When is something wrong
 */
export interface IBadRequest {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IBlockoBlock
 * @description: Interface IBlockoBlock definition
 */
export interface IBlockoBlock {
    /**
     * @name author_id
     * @type string
     * @description can be hide, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_id: string;
    /**
     * @name author_nick_name
     * @type string
     * @description can be hide, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_nick_name: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name general_description
     * @type string
     * @required
     */
    general_description: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name producer_id
     * @type string
     * @description can be hide, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @description can be hide, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name type_of_block_id
     * @type string
     * @readonly
     * @required
     */
    type_of_block_id: string;
    /**
     * @name type_of_block_name
     * @type string
     * @readonly
     * @required
     */
    type_of_block_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IBlockoBlockShortVersion[]
     * @readonly
     * @required
     */
    versions: IBlockoBlockShortVersion[];
}


/**
 * @name IBlockoBlockVersion
 * @description: Interface IBlockoBlockVersion definition
 */
export interface IBlockoBlockVersion {
    /**
     * @name create_permission
     * @type boolean
     * @readonly
     * @required
     */
    create_permission: boolean;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockBlockoVersionNew
 * @description: Json Model for crating new version and also content of BlockoBlock Model
 */
export interface IBlockoBlockBlockoVersionNew {
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name version_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockNew
 * @description: Json Model for crating new BlockoBlock Model
 */
export interface IBlockoBlockNew {
    /**
     * @name general_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    general_description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name type_of_block_id
     * @type string
     * @description Required valid type_of_block_id
     * @required
     */
    type_of_block_id: string;
}


/**
 * @name IBlockoBlockShortVersion
 * @description: Json Model for Version of BlockoBlock
 */
export interface IBlockoBlockShortVersion {
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IBlockoBlockFilter
 * @description: Json Model for getting Blocko_Block Filter List
 */
export interface IBlockoBlockFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Blocks of given project
     */
    project_id?: string;
}


/**
 * @name IBlockoBlockLight
 * @description: Blocko_Block Light (only few properties)
 */
export interface IBlockoBlockLight {
    /**
     * @name blocko_block_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_description: string;
    /**
     * @name blocko_block_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_id: string;
    /**
     * @name blocko_block_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_name: string;
    /**
     * @name blocko_block_type_of_block_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_description: string;
    /**
     * @name blocko_block_type_of_block_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_id: string;
    /**
     * @name blocko_block_type_of_block_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_name: string;
    /**
     * @name blocko_block_version_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_description: string;
    /**
     * @name blocko_block_version_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_id: string;
    /**
     * @name blocko_block_version_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_name: string;
}


/**
 * @name IBlockoBlockList
 * @description: Individual Blocko Block List
 */
export interface IBlockoBlockList {
    /**
     * @name content
     * @type IBlockoBlockLight[]
     * @readonly
     * @required
     */
    content: IBlockoBlockLight[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBoard
 * @description: Interface IBoard definition
 */
export interface IBoard {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name ethernet_mac_address
     * @type string
     */
    ethernet_mac_address?: string;
    /**
     * @name first_connect_permission
     * @type boolean
     * @description It will be visible in Json object, only if value is true. This is an extraordinary value
     * @readonly
     * @required
     */
    first_connect_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name isActive
     * @type boolean
     * @required
     */
    isActive: boolean;
    /**
     * @name main_board
     * @type boolean
     * @readonly
     * @required
     */
    main_board: boolean;
    /**
     * @name personal_description
     * @type string
     * @required
     */
    personal_description: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name project_name
     * @type string
     * @readonly
     * @required
     */
    project_name: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name status
     * @type IBoardStatus
     * @readonly
     * @required
     */
    status: IBoardStatus;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name up_to_date
     * @type boolean
     * @readonly
     * @required
     */
    up_to_date: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name wifi_mac_address
     * @type string
     */
    wifi_mac_address?: string;
}


/**
 * @name IBoardFilter
 * @description: Json Model for Filtering Boards
 */
export interface IBoardFilter {
    /**
     * @name active
     * @type string
     * @description Boolean - required in String! "true" or "false "
     */
    active?: string;
    /**
     * @name processors
     * @type string[]
     * @description List of processor.id
     */
    processors?: string[];
    /**
     * @name producers
     * @type string[]
     * @description List of producer.id
     */
    producers?: string[];
    /**
     * @name projects
     * @type string[]
     * @description List of project.id
     */
    projects?: string[];
    /**
     * @name typeOfBoards
     * @type string[]
     * @description List of typeOfBoard.id
     */
    typeOfBoards?: string[];
}


/**
 * @name IBoardList
 * @description: Individual Board List
 */
export interface IBoardList {
    /**
     * @name content
     * @type IBoard[]
     * @readonly
     * @required
     */
    content: IBoard[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBoardNew
 * @description: Json Model for create new Board
 */
export interface IBoardNew {
    /**
     * @name hardware_unique_ids
     * @type string[]
     * @description Must be unique!!!, The hardware_id must have 8 hexadecimal characters!
     * @required
     */
    hardware_unique_ids: string[];
    /**
     * @name type_of_board_id
     * @type string
     * @description Required valid type_of_post_id
     * @required
     */
    type_of_board_id: string;
}


/**
 * @name IBoardPersonalDescription
 * @description: Json Model for update personal description of Board
 */
export interface IBoardPersonalDescription {
    /**
     * @name personal_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    personal_description: string;
}


/**
 * @name IBoardDetail
 * @description: Interface IBoardDetail definition
 */
export interface IBoardDetail {
    /**
     * @name board_id
     * @type string
     * @readonly
     * @required
     */
    board_id: string;
    /**
     * @name personal_description
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    personal_description: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name IBoardStatus
 * @description: Json Model for Status and all information about embedded Hardware
 */
export interface IBoardStatus {
    /**
     * @name actual_c_program_id
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    actual_c_program_id: string;
    /**
     * @name actual_c_program_name
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    actual_c_program_name: string;
    /**
     * @name actual_c_program_version_id
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    actual_c_program_version_id: string;
    /**
     * @name actual_c_program_version_name
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    actual_c_program_version_name: string;
    /**
     * @name actual_program
     * @type string
     * @description It in Object only if user upload own binary firmware to hardware and cloud_blocko_server used file name for naming of this valueIf user used classic build with Byzance - its not visible in Json!
     * @readonly
     * @required
     */
    actual_program: string;
    /**
     * @name b_program_id
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name b_program_version_id
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    b_program_version_name: string;
    /**
     * @name required_c_program_id
     * @type string
     */
    required_c_program_id?: string;
    /**
     * @name required_c_program_name
     * @type string
     */
    required_c_program_name?: string;
    /**
     * @name required_c_program_version_id
     * @type string
     */
    required_c_program_version_id?: string;
    /**
     * @name required_c_program_version_name
     * @type string
     */
    required_c_program_version_name?: string;
    /**
     * @name where
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    where: string;
}


/**
 * @name IBoardsForBlocko
 * @description: Json Model for Blocko in Becki for accessible hardware and firmware versions
 */
export interface IBoardsForBlocko {
    /**
     * @name boards
     * @type IBoard[]
     * @readonly
     * @required
     */
    boards: IBoard[];
    /**
     * @name c_programs
     * @type ICProgram[]
     * @readonly
     * @required
     */
    c_programs: ICProgram[];
    /**
     * @name typeOfBoards
     * @type ITypeOfBoard[]
     * @readonly
     * @required
     */
    typeOfBoards: ITypeOfBoard[];
}


/**
 * @name ICProgram
 * @description: Object represented C_Program in database
 */
export interface ICProgram {
    /**
     * @name dateOfCreate
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    dateOfCreate: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name program_description
     * @type string
     * @description can be empty
     */
    program_description?: string;
    /**
     * @name program_name
     * @type string
     * @description minimal length is 8 characters
     * @required
     */
    program_name: string;
    /**
     * @name program_versions
     * @type ICProgramVersion[]
     * @readonly
     * @required
     */
    program_versions: ICProgramVersion[];
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name project_name
     * @type string
     * @readonly
     * @required
     */
    project_name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ICProgramFilter
 * @description: Json Model for getting C_Program Filter List
 */
export interface ICProgramFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get C_Programs of given project
     */
    project_id?: string;
}


/**
 * @name ICProgramLight
 * @description: C_Program Light (only few properties)
 */
export interface ICProgramLight {
    /**
     * @name c_program_id
     * @type string
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_name
     * @type string
     * @readonly
     * @required
     */
    c_program_name: string;
    /**
     * @name c_program_version_id
     * @type string
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @readonly
     * @required
     */
    c_program_version_name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name ICProgramList
 * @description: Individual C_Program List
 */
export interface ICProgramList {
    /**
     * @name content
     * @type ICProgramLight[]
     * @readonly
     * @required
     */
    content: ICProgramLight[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ICProgramNew
 * @description: Json Model for new C_Program
 */
export interface ICProgramNew {
    /**
     * @name program_description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    program_description?: string;
    /**
     * @name program_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    program_name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @required
     */
    type_of_board_id: string;
}


/**
 * @name ICProgramUpdatePlan
 * @description: Interface ICProgramUpdatePlan definition
 */
export interface ICProgramUpdatePlan {
    /**
     * @name binary_file_detail
     * @type IFileRecord
     * @description Is visible only if user send own binary file ( OR state for c_program_detail)
     * @readonly
     * @required
     */
    binary_file_detail: IFileRecord;
    /**
     * @name board_detail
     * @type IBoardDetail
     * @readonly
     * @required
     */
    board_detail: IBoardDetail;
    /**
     * @name c_program_detail
     * @type ICProgramUpdateProgram
     * @description Is visible only if user send compilation under C_program in system  ( OR state for binary_file)
     * @readonly
     * @required
     */
    c_program_detail: ICProgramUpdateProgram;
    /**
     * @name firmware_type
     * @type ("FIRMWARE_YODA_FIRMWARE"|"FIRMWARE_YODA_BOOTLOADER"|"FIRMWARE_YODA_BACKUP"|"FIRMWARE_DEVICE_FIRMWARE"|"FIRMWARE_DEVICE_BOOTLOADER")
     * @required
     */
    firmware_type: ("FIRMWARE_YODA_FIRMWARE"|"FIRMWARE_YODA_BOOTLOADER"|"FIRMWARE_YODA_BACKUP"|"FIRMWARE_DEVICE_FIRMWARE"|"FIRMWARE_DEVICE_BOOTLOADER");
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name server_detail
     * @type IServerDetail
     * @readonly
     * @required
     */
    server_detail: IServerDetail;
    /**
     * @name state
     * @type ("complete"|"canceled"|"in_progress"|"overwritten"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"critical_error")
     * @description Description on Model C_ProgramUpdater_State
     * @required
     */
    state: ("complete"|"canceled"|"in_progress"|"overwritten"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"critical_error");
}


/**
 * @name ICProgramUpdateProgram
 * @description: Interface ICProgramUpdateProgram definition
 */
export interface ICProgramUpdateProgram {
    /**
     * @name c_program_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_program_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_program_name: string;
    /**
     * @name c_program_version_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_version_name: string;
}


/**
 * @name ICProgramVersion
 * @description: Json Model for Version of C_program
 */
export interface ICProgramVersion {
    /**
     * @name compilable
     * @type boolean
     * @readonly
     * @required
     */
    compilable: boolean;
    /**
     * @name compilation_in_progress
     * @type boolean
     * @readonly
     * @required
     */
    compilation_in_progress: boolean;
    /**
     * @name compilation_restored
     * @type boolean
     * @readonly
     * @required
     */
    compilation_restored: boolean;
    /**
     * @name external_libraries
     * @type IExternalLibraries[]
     * @readonly
     * @required
     */
    external_libraries: IExternalLibraries[];
    /**
     * @name main
     * @type string
     * @readonly
     * @required
     */
    main: string;
    /**
     * @name runing_on_board
     * @type string[]
     * @readonly
     * @required
     */
    runing_on_board: string[];
    /**
     * @name successfully_compiled
     * @type boolean
     * @readonly
     * @required
     */
    successfully_compiled: boolean;
    /**
     * @name user_files
     * @type IUserFiles[]
     * @readonly
     * @required
     */
    user_files: IUserFiles[];
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @description Value can be empty, Server cannot guarantee that. External documentation: dsafsdfsdf
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name ICProgramVersionEdit
 * @description: Json Model for edit basic information of C_program Version
 */
export interface ICProgramVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionNew
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionNew {
    /**
     * @name external_libraries
     * @type IExternalLibraries[]
     */
    external_libraries?: IExternalLibraries[];
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
    /**
     * @name user_files
     * @type IUserFiles[]
     */
    user_files?: IUserFiles[];
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionUpdate
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionUpdate {
    /**
     * @name external_libraries
     * @type IExternalLibraries[]
     */
    external_libraries?: IExternalLibraries[];
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
    /**
     * @name type_of_board_id
     * @type string
     * @description Required only if user compile code not under C++ code version (where compilation can found type_of_board)
     */
    type_of_board_id?: string;
    /**
     * @name user_files
     * @type IUserFiles[]
     */
    user_files?: IUserFiles[];
}


/**
 * @name ICloudCompilationServer
 * @description: Interface ICloudCompilationServer definition
 */
export interface ICloudCompilationServer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name destination_address
     * @type string
     * @required
     */
    destination_address: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name server_is_online
     * @type boolean
     * @readonly
     * @required
     */
    server_is_online: boolean;
    /**
     * @name server_name
     * @type string
     * @required
     */
    server_name: string;
}


/**
 * @name ICloudHomerServer
 * @description: Interface ICloudHomerServer definition
 */
export interface ICloudHomerServer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name destination_address
     * @type string
     */
    destination_address?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name is_private
     * @type boolean
     */
    is_private?: boolean;
    /**
     * @name server_is_online
     * @type boolean
     * @readonly
     * @required
     */
    server_is_online: boolean;
    /**
     * @name server_name
     * @type string
     */
    server_name?: string;
}


/**
 * @name ICompilationBuildError
 * @description: Json Model for Compilation Result
 */
export interface ICompilationBuildError {
    /**
     * @name adjustedColumn
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    adjustedColumn: number;
    /**
     * @name code
     * @type string
     * @readonly
     * @required
     */
    code: string;
    /**
     * @name codeWhitespace
     * @type string
     * @readonly
     * @required
     */
    codeWhitespace: string;
    /**
     * @name column
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    column: number;
    /**
     * @name endIndex
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    endIndex: number;
    /**
     * @name filename
     * @type string
     * @readonly
     * @required
     */
    filename: string;
    /**
     * @name line
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    line: number;
    /**
     * @name startIndex
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    startIndex: number;
    /**
     * @name state
     * @type string
     * @description Value is build_error
     * @readonly
     * @required
     */
    state: string;
    /**
     * @name text
     * @type string
     * @readonly
     * @required
     */
    text: string;
    /**
     * @name type
     * @type string
     * @readonly
     * @required
     */
    type: string;
}


/**
 * @name ICompilationOk
 * @description: Json Model for Compilation Result
 */
export interface ICompilationOk {
    /**
     * @name state
     * @type string
     * @description Value is success
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name ICompilationServer
 * @description: Json Model for new Compilation Server
 */
export interface ICompilationServer {
    /**
     * @name server_name
     * @type string
     * @description Unique name For Compiler cloud_blocko_server, The name length must be between 6 and 60 characters
     * @required
     */
    server_name: string;
}


/**
 * @name IConnectedBoard
 * @description: Interface IConnectedBoard definition
 */
export interface IConnectedBoard {
    /**
     * @name board_id
     * @type string
     * @required
     */
    board_id: string;
    /**
     * @name c_program_version_id
     * @type string
     * @required
     */
    c_program_version_id: string;
}


/**
 * @name IEntityValidationIn
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationIn {
    /**
     * @name key
     * @type string
     * @description This field is required
     * @required
     */
    key: string;
    /**
     * @name value
     * @type string
     * @description This field is required
     * @required
     */
    value: string;
}


/**
 * @name IEntityValidationOut
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationOut {
    /**
     * @name message
     * @type string
     * @description If valid = false, Json probably contains message for user
     * @example Email is used
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name valid
     * @type boolean
     * @description Entity (Email, NickName.. etc) is valid if valid = true
     * @readonly
     * @required
     */
    valid: boolean;
}


/**
 * @name IExternalCloudBlockoServerIsOffline
 * @description: External servers (compilation, blocko cloud_blocko_server etc.) are offline
 */
export interface IExternalCloudBlockoServerIsOffline {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("Object not Found")
     * @description state
     * @readonly
     * @required
     */
    state: ("Object not Found");
}


/**
 * @name IExternalLibraries
 * @description: Interface IExternalLibraries definition
 */
export interface IExternalLibraries {
    /**
     * @name files
     * @type IFileLib[]
     */
    files?: IFileLib[];
    /**
     * @name library_name
     * @type string
     */
    library_name?: string;
}


/**
 * @name IFileRecord
 * @description: Interface IFileRecord definition
 */
export interface IFileRecord {
    /**
     * @name file_name
     * @type string
     * @required
     */
    file_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
}


/**
 * @name IFileLib
 * @description: Interface IFileLib definition
 */
export interface IFileLib {
    /**
     * @name content
     * @type string
     */
    content?: string;
    /**
     * @name file_name
     * @type string
     */
    file_name?: string;
}


/**
 * @name IFinancialSummary
 * @description: Json Model for details about Tariff - all financial details in one Json
 */
export interface IFinancialSummary {
    /**
     * @name products
     * @type IProduct[]
     * @readonly
     * @required
     */
    products: IProduct[];
}


/**
 * @name IFloatingPersonToken
 * @description: Interface IFloatingPersonToken definition
 */
export interface IFloatingPersonToken {
    /**
     * @name access_age
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    access_age: number;
    /**
     * @name connection_id
     * @type string
     * @required
     */
    connection_id: string;
    /**
     * @name created
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name notification_subscriber
     * @type boolean
     * @required
     */
    notification_subscriber: boolean;
    /**
     * @name providerKey
     * @type string
     * @required
     */
    providerKey: string;
    /**
     * @name providerUserId
     * @type string
     * @required
     */
    providerUserId: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name returnUrl
     * @type string
     * @required
     */
    returnUrl: string;
    /**
     * @name social_tokenVerified
     * @type boolean
     * @required
     */
    social_tokenVerified: boolean;
    /**
     * @name typeOfConnection
     * @type string
     * @required
     */
    typeOfConnection: string;
    /**
     * @name user_agent
     * @type string
     * @required
     */
    user_agent: string;
}


/**
 * @name IGoPayUrl
 * @description: Json Model with url for GoPay Terminal
 */
export interface IGoPayUrl {
    /**
     * @name gw_url
     * @type string
     * @readonly
     * @required
     */
    gw_url: string;
}


/**
 * @name IGridTerminal
 * @description: Interface IGridTerminal definition
 */
export interface IGridTerminal {
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     * @required
     */
    device_name: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     * @required
     */
    device_type: string;
    /**
     * @name m_program_access
     * @type boolean
     * @required
     */
    m_program_access: boolean;
    /**
     * @name terminal_id
     * @type string
     * @example Mobile, WebBrowser
     * @readonly
     * @required
     */
    terminal_id: string;
    /**
     * @name up_to_date
     * @type boolean
     * @required
     */
    up_to_date: boolean;
    /**
     * @name user_agent
     * @type string
     * @readonly
     * @required
     */
    user_agent: string;
    /**
     * @name ws_permission
     * @type boolean
     * @required
     */
    ws_permission: boolean;
}


/**
 * @name IGridTerminalIdentf
 * @description: Json Model for Identificator
 */
export interface IGridTerminalIdentf {
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     * @required
     */
    device_name: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     * @required
     */
    device_type: string;
}


/**
 * @name IHardwareGroup
 * @description: Interface IHardwareGroup definition
 */
export interface IHardwareGroup {
    /**
     * @name boards
     * @type IConnectedBoard[]
     * @description Connected boards (padavans)
     */
    boards?: IConnectedBoard[];
    /**
     * @name main_board
     * @type IConnectedBoard
     * @description This board must be connectible_to_internet = true! User can create new B_Program version without Main Board, but its not possible to upload that to cloud like new Instance
     * @required
     */
    main_board: IConnectedBoard;
}


/**
 * @name IHomerFilter
 * @description: Json Model representing Homer filter
 */
export interface IHomerFilter {
    /**
     * @name project_ids
     * @type string[]
     * @description Required valid project_id
     */
    project_ids?: string[];
}


/**
 * @name IHomerInstance
 * @description: Interface IHomerInstance definition
 */
export interface IHomerInstance {
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name private_instance_board
     * @type IBoard
     */
    private_instance_board?: IBoard;
    /**
     * @name running_from
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    running_from: number;
}


/**
 * @name IHomerList
 * @description: Individual Homer List
 */
export interface IHomerList {
    /**
     * @name content
     * @type IPrivateHomerServer[]
     * @readonly
     * @required
     */
    content: IPrivateHomerServer[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IHomerNew
 * @description: Json Model for new Homer
 */
export interface IHomerNew {
    /**
     * @name mac_address
     * @type string
     * @description Required unique value - its MacAddress of Homer
     * @required
     */
    mac_address: string;
    /**
     * @name project_id
     * @type string
     * @description Required if user want used Homer with project
     */
    project_id?: string;
    /**
     * @name type_of_device
     * @type string
     * @description Its a name of Device
     * @example Raspberry, ServerPC..
     * @required
     */
    type_of_device: string;
}


/**
 * @name IIndividualsTariff
 * @description: Interface IIndividualsTariff definition
 */
export interface IIndividualsTariff {
    /**
     * @name company_details_required
     * @type boolean
     * @description This value indicates that for creating new Product Tariff, you have to send all value with "company_"  
     * @readonly
     * @required
     */
    company_details_required: boolean;
    /**
     * @name identificator
     * @type string
     * @description return this value for registration new Product Tariff
     * @readonly
     * @required
     */
    identificator: string;
    /**
     * @name labels
     * @type ITariffLabel[]
     * @description Show each record in Product Tariff Object
     * @readonly
     * @required
     */
    labels: ITariffLabel[];
    /**
     * @name price
     * @type IPrice
     * @readonly
     * @required
     */
    price: IPrice;
    /**
     * @name required_payment_mode
     * @type boolean
     * @description This value indicates that for creating new Product Tariff  User have to pay throw the Credit-Card Gateway or send money via Bank Account
     * @readonly
     * @required
     */
    required_payment_mode: boolean;
    /**
     * @name tariff_name
     * @type string
     * @readonly
     * @required
     */
    tariff_name: string;
}


/**
 * @name IInvoice
 * @description: Interface IInvoice definition
 */
export interface IInvoice {
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     */
    date_of_create?: string;
    /**
     * @name id
     * @type number
     * @format int64
     */
    id?: number;
    /**
     * @name invoice_number
     * @type string
     */
    invoice_number?: string;
    /**
     * @name payment_method
     * @type string
     * @readonly
     * @required
     */
    payment_method: string;
    /**
     * @name payment_status
     * @type string
     * @readonly
     * @required
     */
    payment_status: string;
    /**
     * @name pdf_link
     * @type string
     * @description Visible only when the invoice is available
     * @readonly
     * @required
     */
    pdf_link: string;
    /**
     * @name require_payment
     * @type boolean
     * @description Visible only when the invoice is not paid
     * @readonly
     * @required
     */
    require_payment: boolean;
}


/**
 * @name IJsonNode
 * @description: Interface IJsonNode definition
 */
export interface IJsonNode {
    /**
     * @name array
     * @type boolean
     */
    array?: boolean;
    /**
     * @name bigDecimal
     * @type boolean
     */
    bigDecimal?: boolean;
    /**
     * @name bigInteger
     * @type boolean
     */
    bigInteger?: boolean;
    /**
     * @name binary
     * @type boolean
     */
    binary?: boolean;
    /**
     * @name boolean
     * @type boolean
     */
    boolean?: boolean;
    /**
     * @name containerNode
     * @type boolean
     */
    containerNode?: boolean;
    /**
     * @name double
     * @type boolean
     */
    double?: boolean;
    /**
     * @name float
     * @type boolean
     */
    float?: boolean;
    /**
     * @name floatingPointNumber
     * @type boolean
     */
    floatingPointNumber?: boolean;
    /**
     * @name int
     * @type boolean
     */
    int?: boolean;
    /**
     * @name integralNumber
     * @type boolean
     */
    integralNumber?: boolean;
    /**
     * @name long
     * @type boolean
     */
    long?: boolean;
    /**
     * @name missingNode
     * @type boolean
     */
    missingNode?: boolean;
    /**
     * @name nodeType
     * @type ("ARRAY"|"BINARY"|"BOOLEAN"|"MISSING"|"NULL"|"NUMBER"|"OBJECT"|"POJO"|"STRING")
     */
    nodeType?: ("ARRAY"|"BINARY"|"BOOLEAN"|"MISSING"|"NULL"|"NUMBER"|"OBJECT"|"POJO"|"STRING");
    /**
     * @name null
     * @type boolean
     */
    null?: boolean;
    /**
     * @name number
     * @type boolean
     */
    number?: boolean;
    /**
     * @name object
     * @type boolean
     */
    object?: boolean;
    /**
     * @name pojo
     * @type boolean
     */
    pojo?: boolean;
    /**
     * @name short
     * @type boolean
     */
    short?: boolean;
    /**
     * @name textual
     * @type boolean
     */
    textual?: boolean;
    /**
     * @name valueNode
     * @type boolean
     */
    valueNode?: boolean;
}


/**
 * @name IJsonValueMissingResult
 * @description: Some Json value missing - don't show that to users.. SERVER IS LOGGING THIS FRONTEND ISSUE
 */
export interface IJsonValueMissingResult {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name exception
     * @type IJsonNode
     * @readonly
     * @required
     */
    exception: IJsonNode;
    /**
     * @name message
     * @type string
     * @description message
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("Some Json value missing")
     * @description state
     * @readonly
     * @required
     */
    state: ("Some Json value missing");
}


/**
 * @name ILibraryGroup
 * @description: Interface ILibraryGroup definition
 */
export interface ILibraryGroup {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name group_name
     * @type string
     * @required
     */
    group_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name processors_id
     * @type string[]
     * @readonly
     * @required
     */
    processors_id: string[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions_id
     * @type string[]
     * @readonly
     * @required
     */
    versions_id: string[];
}


/**
 * @name ILibraryGroupFilter
 * @description: Json Model for Filtering LibraryGroups
 */
export interface ILibraryGroupFilter {
    /**
     * @name group_name
     * @type string
     */
    group_name?: string;
    /**
     * @name order
     * @type ("group_name"|"id"|"date_of_create")
     * @description Value of order
     */
    order?: ("group_name"|"id"|"date_of_create");
    /**
     * @name processors_id
     * @type string[]
     * @description List of processor.id
     */
    processors_id?: string[];
    /**
     * @name value
     * @type ("asc OR desc")
     * @description Set type of Order -> ascending / descending, If you used order - its required!!!
     */
    value?: ("asc OR desc");
}


/**
 * @name ILibraryGroupList
 * @description: Individual Library Group List
 */
export interface ILibraryGroupList {
    /**
     * @name content
     * @type ILibraryGroup[]
     * @readonly
     * @required
     */
    content: ILibraryGroup[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ILibraryGroupNew
 * @description: Json Model for new LibraryGroup
 */
export interface ILibraryGroupNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name group_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    group_name: string;
}


/**
 * @name ILibraryGroupVersion
 * @description: Json Model for new Version for LibraryGroup
 */
export interface ILibraryGroupVersion {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ILinkedPost
 * @description: Interface ILinkedPost definition
 */
export interface ILinkedPost {
    /**
     * @name answer
     * @type IPost
     * @required
     */
    answer: IPost;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name linkId
     * @type string
     * @required
     */
    linkId: string;
}


/**
 * @name IListOfBoards
 * @description: Json Model with List of Board ID
 */
export interface IListOfBoards {
    /**
     * @name board_id
     * @type string[]
     * @required
     */
    board_id: string[];
}


/**
 * @name ILogin
 * @description: Json Model for new Basic Login
 */
export interface ILogin {
    /**
     * @name mail
     * @type string
     * @required
     */
    mail: string;
    /**
     * @name password
     * @type string
     * @required
     */
    password: string;
}


/**
 * @name ILoginResult
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginResult {
    /**
     * @name permissions
     * @type string[]
     * @description List of all person permission (private and all collections from Person Roles ("SecurityRole") 
     * @readonly
     * @required
     */
    permissions: string[];
    /**
     * @name person
     * @type IPerson
     * @readonly
     * @required
     */
    person: IPerson;
    /**
     * @name roles
     * @type ISecurityRole[]
     * @description List of roles, that
     * @readonly
     * @required
     */
    roles: ISecurityRole[];
}


/**
 * @name ILoginToken
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginToken {
    /**
     * @name authToken
     * @type string
     * @description X-AUTH-TOKEN - used this token in HTML head for verifying the identities
     * @readonly
     * @required
     */
    authToken: string;
}


/**
 * @name IMProgram
 * @description: Interface IMProgram definition
 */
export interface IMProgram {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time stamp in millis
     * @example 1458315085338
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name height_lock
     * @type boolean
     * @required
     */
    height_lock: boolean;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name last_update
     * @type number
     * @description UNIX time stamp in millis
     * @example 1458315085338
     * @format int32
     * @readonly
     * @required
     */
    last_update: number;
    /**
     * @name m_code
     * @type string
     * @description Visible here only when the object IS specifically required. Inversion value for "m_code_url" THIS or THAT!
     */
    m_code?: string;
    /**
     * @name m_code_id
     * @type string
     * @description Visible here only when the object is NOT specifically required. Inversion value for "m_code" 
     * @readonly
     * @required
     */
    m_code_id: string;
    /**
     * @name m_project_id
     * @type string
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name program_description
     * @type string
     */
    program_description?: string;
    /**
     * @name program_name
     * @type string
     */
    program_name?: string;
    /**
     * @name qr_token
     * @type string
     * @required
     */
    qr_token: string;
    /**
     * @name read_qrToken_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_qrToken_permission: boolean;
    /**
     * @name screen_size_type_id
     * @type string
     * @readonly
     * @required
     */
    screen_size_type_id: string;
    /**
     * @name websocket_address
     * @type string
     * @description Its here only if its possible to connect to B_Program
     * @readonly
     * @required
     */
    websocket_address: string;
    /**
     * @name width_lock
     * @type boolean
     * @required
     */
    width_lock: boolean;
}


/**
 * @name IMProgramNew
 * @description: Json Model for new M_Program
 */
export interface IMProgramNew {
    /**
     * @name height_lock
     * @type boolean
     * @description If true - its possible turn on that on height
     * @required
     */
    height_lock: boolean;
    /**
     * @name m_code
     * @type string
     * @description Code in converted to String
     * @required
     */
    m_code: string;
    /**
     * @name program_description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    program_description?: string;
    /**
     * @name program_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    program_name: string;
    /**
     * @name screen_type_id
     * @type string
     * @description Required valid screen_type_id
     * @required
     */
    screen_type_id: string;
    /**
     * @name width_lock
     * @type boolean
     * @description If true - its possible turn on that on width
     * @required
     */
    width_lock: boolean;
}


/**
 * @name IMProject
 * @description: Interface IMProject definition
 */
export interface IMProject {
    /**
     * @name auto_incrementing
     * @type boolean
     * @required
     */
    auto_incrementing: boolean;
    /**
     * @name b_progam_connected_version_id
     * @type string
     * @description can be empty
     * @readonly
     * @required
     */
    b_progam_connected_version_id: string;
    /**
     * @name b_program_id
     * @type string
     * @description can be empty
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time stamp in millis
     * @example 14618543121234
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name m_programs
     * @type IMProgram[]
     * @required
     */
    m_programs: IMProgram[];
    /**
     * @name program_description
     * @type string
     * @description can be empty
     */
    program_description?: string;
    /**
     * @name program_name
     * @type string
     * @required
     */
    program_name: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IMProjectNew
 * @description: Json Model for update M_Project
 */
export interface IMProjectNew {
    /**
     * @name program_description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    program_description?: string;
    /**
     * @name program_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    program_name: string;
}


/**
 * @name INotification
 * @description: Interface INotification definition
 */
export interface INotification {
    /**
     * @name confirmation_required
     * @type boolean
     * @required
     */
    confirmation_required: boolean;
    /**
     * @name created
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name notification_body
     * @type INotificationElement[]
     * @readonly
     * @required
     */
    notification_body: INotificationElement[];
    /**
     * @name notification_level
     * @type ("info"|"success"|"warning"|"error"|"question")
     * @required
     */
    notification_level: ("info"|"success"|"warning"|"error"|"question");
    /**
     * @name was_read
     * @type boolean
     * @required
     */
    was_read: boolean;
}


/**
 * @name INotificationElement
 * @description: Json Model for Notification body=[Array of Notification_Element]
 */
export interface INotificationElement {
    /**
     * @name get_url
     * @type string
     */
    get_url?: string;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name label
     * @type string
     */
    label?: string;
    /**
     * @name required
     * @type boolean
     * @required
     */
    required: boolean;
    /**
     * @name type
     * @type ("confirmation"|"link"|"object"|"bold_text"|"text")
     * @required
     */
    type: ("confirmation"|"link"|"object"|"bold_text"|"text");
    /**
     * @name url
     * @type string
     */
    url?: string;
    /**
     * @name value
     * @type string
     */
    value?: string;
}


/**
 * @name INotificationList
 * @description: Individual Notification List
 */
export interface INotificationList {
    /**
     * @name content
     * @type INotification[]
     * @readonly
     * @required
     */
    content: INotification[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
    /**
     * @name unread_total
     * @type number
     * @description Total unread subjects
     * @format int32
     * @readonly
     * @required
     */
    unread_total: number;
}


/**
 * @name INotificationRead
 * @description: Json Model for List with ids of read notifications
 */
export interface INotificationRead {
    /**
     * @name notification_id
     * @type string[]
     * @description List of notification.id
     * @required
     */
    notification_id: string[];
}


/**
 * @name IObjectNotFound
 * @description: Called object is missing. You can show that to Person
 */
export interface IObjectNotFound {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("Object not Found")
     * @description state
     * @readonly
     * @required
     */
    state: ("Object not Found");
}


/**
 * @name IObjectDetail
 * @description: Json Model for objects details name / id
 */
export interface IObjectDetail {
    /**
     * @name id
     * @type string
     * @description ID of object for CRUD operations
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @description Name of object for users
     * @required
     */
    name: string;
}


/**
 * @name IPaymentDetails
 * @description: Interface IPaymentDetails definition
 */
export interface IPaymentDetails {
    /**
     * @name city
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     */
    company_account?: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_phone?: string;
    /**
     * @name company_invoice_email
     * @type string
     * @description Only if Product is for business
     */
    company_invoice_email?: string;
    /**
     * @name company_name
     * @type string
     * @description Only if Product is for business
     */
    company_name?: string;
    /**
     * @name company_registration_no
     * @type string
     * @description Only if Product is for business
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Only if Product is for business
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     * @description Only if Product is for business
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    country: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type number
     * @format int64
     */
    id?: number;
    /**
     * @name street
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street_number: string;
    /**
     * @name zip_code
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    zip_code: string;
}


/**
 * @name IPermissionRequired
 * @description: Some Json value missing - don't show that to users.. SERVER IS LOGGING THIS FRONTEND ISSUE
 */
export interface IPermissionRequired {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("Permission required")
     * @description state
     * @readonly
     * @required
     */
    state: ("Permission required");
}


/**
 * @name IPerson
 * @description: Interface IPerson definition
 */
export interface IPerson {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name full_name
     * @type string
     * @required
     */
    full_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name mail
     * @type string
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @required
     */
    nick_name: string;
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
}


/**
 * @name IPersonPermission
 * @description: Interface IPersonPermission definition
 */
export interface IPersonPermission {
    /**
     * @name description
     * @type string
     * @description Description for "(static key)"
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name edit_person_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_person_permission: boolean;
    /**
     * @name value
     * @type string
     * @description Permission key - "(static key)"
     * @readonly
     * @required
     */
    value: string;
}


/**
 * @name IPersonChangeProperty
 * @description: Json Model for changing Person property
 */
export interface IPersonChangeProperty {
    /**
     * @name email
     * @type string
     * @description Valid mail 
     */
    email?: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     */
    password?: string;
    /**
     * @name property
     * @type string
     * @description Required property ('password' or 'email')
     * @required
     */
    property: string;
}


/**
 * @name IPersonNew
 * @description: Json Model for creating new Person
 */
export interface IPersonNew {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
}


/**
 * @name IPersonPasswordNew
 * @description: Json Model for recovering person password
 */
export interface IPersonPasswordNew {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
    /**
     * @name password_recovery_token
     * @type string
     * @description Required password_recovery_token
     * @required
     */
    password_recovery_token: string;
}


/**
 * @name IPersonPasswordRecoveryEmail
 * @description: Json Model for sending password recovery email
 */
export interface IPersonPasswordRecoveryEmail {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
}


/**
 * @name IPersonUpdate
 * @description: Json Model for update Person. (For password or email, you have to used separate API)
 */
export interface IPersonUpdate {
    /**
     * @name full_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    full_name: string;
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
}


/**
 * @name IPost
 * @description: Interface IPost definition
 */
export interface IPost {
    /**
     * @name answer_permission
     * @type boolean
     * @readonly
     * @required
     */
    answer_permission: boolean;
    /**
     * @name answers
     * @type IPost[]
     * @description Only if Post is Main
     */
    answers?: IPost[];
    /**
     * @name author
     * @type IPerson
     * @required
     */
    author: IPerson;
    /**
     * @name comment_permission
     * @type boolean
     * @readonly
     * @required
     */
    comment_permission: boolean;
    /**
     * @name comments
     * @type IPost[]
     * @description Only if Post is Main or Answare
     */
    comments?: IPost[];
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_confirms_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_confirms_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name hashTags
     * @type string[]
     * @readonly
     * @required
     */
    hashTags: string[];
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name likes
     * @type number
     * @format int32
     * @required
     */
    likes: number;
    /**
     * @name linked_answers
     * @type ILinkedPost[]
     * @description Only if Post is Main
     * @readonly
     * @required
     */
    linked_answers: ILinkedPost[];
    /**
     * @name name
     * @type string
     * @description Only if Post is Main (not answers or comments)
     */
    name?: string;
    /**
     * @name text_of_post
     * @type string
     * @required
     */
    text_of_post: string;
    /**
     * @name type
     * @type ITypeOfPost
     * @description Only if Post is Main
     */
    type?: ITypeOfPost;
    /**
     * @name type_of_confirms
     * @type ITypeOfConfirms[]
     * @description Only if Post is Main
     * @readonly
     * @required
     */
    type_of_confirms: ITypeOfConfirms[];
    /**
     * @name updated
     * @type boolean
     * @required
     */
    updated: boolean;
    /**
     * @name views
     * @type number
     * @description Only if Post is Main
     * @format int32
     */
    views?: number;
}


/**
 * @name IPostAnswer
 * @description: Json Model for new Post
 */
export interface IPostAnswer {
    /**
     * @name hash_tags
     * @type string[]
     */
    hash_tags?: string[];
    /**
     * @name text_of_post
     * @type string
     * @description The text of post must have at least 4 characters
     * @required
     */
    text_of_post: string;
}


/**
 * @name IPostComment
 * @description: Json Model for new Comment
 */
export interface IPostComment {
    /**
     * @name hash_tags
     * @type string[]
     */
    hash_tags?: string[];
    /**
     * @name text_of_post
     * @type string
     * @description The text of post must have at least 4 characters
     * @required
     */
    text_of_post: string;
}


/**
 * @name IPostList
 * @description: Individual Post List
 */
export interface IPostList {
    /**
     * @name content
     * @type IPost[]
     * @readonly
     * @required
     */
    content: IPost[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IPostNew
 * @description: Json Model for new Post
 */
export interface IPostNew {
    /**
     * @name hash_tags
     * @type string[]
     */
    hash_tags?: string[];
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name text_of_post
     * @type string
     * @description The text must have at least 24 characters
     * @required
     */
    text_of_post: string;
    /**
     * @name type_of_post_id
     * @type string
     * @description Required valid type_of_post_id
     * @required
     */
    type_of_post_id: string;
}


/**
 * @name IPrice
 * @description: Interface IPrice definition
 */
export interface IPrice {
    /**
     * @name CZK
     * @type number
     * @description in Double - show CZK
     * @format double
     * @readonly
     * @required
     */
    CZK: number;
    /**
     * @name EUR
     * @type number
     * @description in Double - show €
     * @format double
     * @readonly
     * @required
     */
    EUR: number;
}


/**
 * @name IPrivateHomerServer
 * @description: Interface IPrivateHomerServer definition
 */
export interface IPrivateHomerServer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name mac_address
     * @type string
     */
    mac_address?: string;
    /**
     * @name online
     * @type boolean
     * @readonly
     * @required
     */
    online: boolean;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name type_of_device
     * @type string
     */
    type_of_device?: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version
     * @type string
     */
    version?: string;
}


/**
 * @name IProcessor
 * @description: Interface IProcessor definition
 */
export interface IProcessor {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name libraryGroups
     * @type string[]
     * @required
     */
    libraryGroups: string[];
    /**
     * @name processor_code
     * @type string
     * @required
     */
    processor_code: string;
    /**
     * @name processor_name
     * @type string
     * @required
     */
    processor_name: string;
    /**
     * @name singleLibraries
     * @type string[]
     * @required
     */
    singleLibraries: string[];
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
}


/**
 * @name IProcessorNew
 * @description: Json Model for new Processor
 */
export interface IProcessorNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name processor_code
     * @type string
     * @description The Processor Code must have at least 4 characters
     * @required
     */
    processor_code: string;
    /**
     * @name processor_name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    processor_name: string;
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
}


/**
 * @name IProducer
 * @description: Interface IProducer definition
 */
export interface IProducer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
}


/**
 * @name IProduct
 * @description: Interface IProduct definition
 */
export interface IProduct {
    /**
     * @name currency
     * @type ("CZK"|"EUR")
     * @required
     */
    currency: ("CZK"|"EUR");
    /**
     * @name id
     * @type number
     * @format int64
     */
    id?: number;
    /**
     * @name invoices
     * @type IInvoice[]
     */
    invoices?: IInvoice[];
    /**
     * @name paid_until_the_day
     * @type string
     * @format date-time
     */
    paid_until_the_day?: string;
    /**
     * @name payment_details
     * @type IPaymentDetails
     */
    payment_details?: IPaymentDetails;
    /**
     * @name payment_method
     * @type string
     * @readonly
     * @required
     */
    payment_method: string;
    /**
     * @name payment_mode
     * @type string
     * @readonly
     * @required
     */
    payment_mode: string;
    /**
     * @name product_individual_name
     * @type string
     */
    product_individual_name?: string;
    /**
     * @name product_type
     * @type string
     * @readonly
     * @required
     */
    product_type: string;
    /**
     * @name remaining_credit
     * @type number
     * @format double
     */
    remaining_credit?: number;
}


/**
 * @name IProgramActualization
 * @description: Interface IProgramActualization definition
 */
export interface IProgramActualization {
    /**
     * @name b_program_id
     * @type string
     * @description Can be empty
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @description Can be empty
     * @required
     */
    b_program_name: string;
    /**
     * @name b_program_version_id
     * @type string
     * @description Can be empty
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @description Can be empty
     * @required
     */
    b_program_version_name: string;
}


/**
 * @name IProject
 * @description: Interface IProject definition
 */
export interface IProject {
    /**
     * @name actual_procedures_id
     * @type string[]
     * @readonly
     * @required
     */
    actual_procedures_id: string[];
    /**
     * @name b_programs
     * @type IObjectDetail[]
     * @required
     */
    b_programs: IObjectDetail[];
    /**
     * @name boards_id
     * @type string[]
     * @readonly
     * @required
     */
    boards_id: string[];
    /**
     * @name bugs
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    bugs: number;
    /**
     * @name c_programs
     * @type IObjectDetail[]
     * @required
     */
    c_programs: IObjectDetail[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name errors
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    errors: number;
    /**
     * @name homers_id
     * @type string[]
     * @readonly
     * @required
     */
    homers_id: string[];
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name m_projects_id
     * @type string[]
     * @readonly
     * @required
     */
    m_projects_id: string[];
    /**
     * @name participants
     * @type IProjectParticipant[]
     * @readonly
     * @required
     */
    participants: IProjectParticipant[];
    /**
     * @name product_id
     * @type number
     * @format int64
     * @readonly
     * @required
     */
    product_id: number;
    /**
     * @name product_individual_name
     * @type string
     * @readonly
     * @required
     */
    product_individual_name: string;
    /**
     * @name project_description
     * @type string
     */
    project_description?: string;
    /**
     * @name project_name
     * @type string
     */
    project_name?: string;
    /**
     * @name screen_size_types_id
     * @type string[]
     * @readonly
     * @required
     */
    screen_size_types_id: string[];
    /**
     * @name share_permission
     * @type boolean
     * @readonly
     * @required
     */
    share_permission: boolean;
    /**
     * @name tier_name
     * @type string
     * @readonly
     * @required
     */
    tier_name: string;
    /**
     * @name type_of_blocks_id
     * @type string[]
     * @readonly
     * @required
     */
    type_of_blocks_id: string[];
    /**
     * @name unshare_permission
     * @type boolean
     * @readonly
     * @required
     */
    unshare_permission: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IProjectNew
 * @description: Json Model for new General Project
 */
export interface IProjectNew {
    /**
     * @name product_id
     * @type number
     * @description Id of Product (Tariff) where the project will be registered
     * @format int64
     * @required
     */
    product_id: number;
    /**
     * @name project_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    project_description: string;
    /**
     * @name project_name
     * @type string
     * @description Length must be between 8 and 60 characters, must be unique!
     * @required
     */
    project_name: string;
}


/**
 * @name IProjectParticipant
 * @description: Interface IProjectParticipant definition
 */
export interface IProjectParticipant {
    /**
     * @name full_name
     * @type string
     * @description Only if the user is already part of the project
     */
    full_name?: string;
    /**
     * @name id
     * @type string
     * @description Only if the user is already part of the project (for click operations)
     */
    id?: string;
    /**
     * @name pending_invitation
     * @type boolean
     * @description Its in object always
     * @required
     */
    pending_invitation: boolean;
    /**
     * @name state
     * @type string
     * @description Its in object always
     * @required
     */
    state: string;
    /**
     * @name user_email
     * @type string
     * @description Its in object always
     * @required
     */
    user_email: string;
}


/**
 * @name IResult
 * @description: Interface IResult definition
 */
export interface IResult {
}


/**
 * @name IResultOk
 * @description: Some Json value missing - don't show that to users.. 
 */
export interface IResultOk {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User. Server fills the message only when it is important.
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("Ok Status")
     * @description state
     * @readonly
     * @required
     */
    state: ("Ok Status");
}


/**
 * @name IResultUnauthorized
 * @description: Interface IResultUnauthorized definition
 */
export interface IResultUnauthorized {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Unauthorized access - please log in
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("Unauthorized")
     * @description state
     * @readonly
     * @required
     */
    state: ("Unauthorized");
}


/**
 * @name IScreeSizeTypeNew
 * @description: Json Model for new Scree Size Type 
 */
export interface IScreeSizeTypeNew {
    /**
     * @name height_lock
     * @type boolean
     * @required
     */
    height_lock: boolean;
    /**
     * @name landscape_height
     * @type number
     * @format int32
     * @required
     */
    landscape_height: number;
    /**
     * @name landscape_max_screens
     * @type number
     * @format int32
     * @required
     */
    landscape_max_screens: number;
    /**
     * @name landscape_min_screens
     * @type number
     * @format int32
     * @required
     */
    landscape_min_screens: number;
    /**
     * @name landscape_square_height
     * @type number
     * @format int32
     * @required
     */
    landscape_square_height: number;
    /**
     * @name landscape_square_width
     * @type number
     * @format int32
     * @required
     */
    landscape_square_width: number;
    /**
     * @name landscape_width
     * @type number
     * @format int32
     * @required
     */
    landscape_width: number;
    /**
     * @name name
     * @type string
     * @description The name length must be between 3 and 60 characters. Must be unique if its not private!
     * @required
     */
    name: string;
    /**
     * @name portrait_height
     * @type number
     * @format int32
     * @required
     */
    portrait_height: number;
    /**
     * @name portrait_max_screens
     * @type number
     * @format int32
     * @required
     */
    portrait_max_screens: number;
    /**
     * @name portrait_min_screens
     * @type number
     * @format int32
     * @required
     */
    portrait_min_screens: number;
    /**
     * @name portrait_square_height
     * @type number
     * @format int32
     * @required
     */
    portrait_square_height: number;
    /**
     * @name portrait_square_width
     * @type number
     * @format int32
     * @required
     */
    portrait_square_width: number;
    /**
     * @name portrait_width
     * @type number
     * @format int32
     * @required
     */
    portrait_width: number;
    /**
     * @name project_id
     * @type string
     * @description When you want create private screen
     */
    project_id?: string;
    /**
     * @name touch_screen
     * @type boolean
     * @required
     */
    touch_screen: boolean;
    /**
     * @name width_lock
     * @type boolean
     * @required
     */
    width_lock: boolean;
}


/**
 * @name IScreenSizeType
 * @description: Interface IScreenSizeType definition
 */
export interface IScreenSizeType {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name height_lock
     * @type boolean
     * @required
     */
    height_lock: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name landscape_height
     * @type number
     * @format int32
     * @required
     */
    landscape_height: number;
    /**
     * @name landscape_max_screens
     * @type number
     * @format int32
     * @required
     */
    landscape_max_screens: number;
    /**
     * @name landscape_min_screens
     * @type number
     * @format int32
     * @required
     */
    landscape_min_screens: number;
    /**
     * @name landscape_square_height
     * @type number
     * @format int32
     * @required
     */
    landscape_square_height: number;
    /**
     * @name landscape_square_width
     * @type number
     * @format int32
     * @required
     */
    landscape_square_width: number;
    /**
     * @name landscape_width
     * @type number
     * @format int32
     * @required
     */
    landscape_width: number;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name portrait_height
     * @type number
     * @format int32
     * @required
     */
    portrait_height: number;
    /**
     * @name portrait_max_screens
     * @type number
     * @format int32
     * @required
     */
    portrait_max_screens: number;
    /**
     * @name portrait_min_screens
     * @type number
     * @format int32
     * @required
     */
    portrait_min_screens: number;
    /**
     * @name portrait_square_height
     * @type number
     * @format int32
     * @required
     */
    portrait_square_height: number;
    /**
     * @name portrait_square_width
     * @type number
     * @format int32
     * @required
     */
    portrait_square_width: number;
    /**
     * @name portrait_width
     * @type number
     * @format int32
     * @required
     */
    portrait_width: number;
    /**
     * @name touch_screen
     * @type boolean
     * @required
     */
    touch_screen: boolean;
    /**
     * @name width_lock
     * @type boolean
     * @required
     */
    width_lock: boolean;
}


/**
 * @name IScreenSizeTypeCombination
 * @description: Json Model with two lists<Screen_Size_Type>
 */
export interface IScreenSizeTypeCombination {
    /**
     * @name private_types
     * @type IScreenSizeType[]
     * @readonly
     * @required
     */
    private_types: IScreenSizeType[];
    /**
     * @name public_types
     * @type IScreenSizeType[]
     * @readonly
     * @required
     */
    public_types: IScreenSizeType[];
}


/**
 * @name ISecurityRole
 * @description: Interface ISecurityRole definition
 */
export interface ISecurityRole {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name person_permissions_id
     * @type string[]
     * @readonly
     * @required
     */
    person_permissions_id: string[];
    /**
     * @name persons_id
     * @type string[]
     * @readonly
     * @required
     */
    persons_id: string[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ISecurityRoleNew
 * @description: Json Model for new SecurityRole (Group)
 */
export interface ISecurityRoleNew {
    /**
     * @name description
     * @type string
     * @description Not required, But strongly recommended, Maximum length is 255 characters
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IServerDetail
 * @description: Interface IServerDetail definition
 */
export interface IServerDetail {
    /**
     * @name instnace_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    instnace_id: string;
    /**
     * @name is_private
     * @type boolean
     * @readonly
     * @required
     */
    is_private: boolean;
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
}


/**
 * @name IShareProjectPerson
 * @description: Json Model for sharing project with Persons
 */
export interface IShareProjectPerson {
    /**
     * @name persons_mail
     * @type string[]
     * @required
     */
    persons_mail: string[];
}


/**
 * @name ISingleLibrary
 * @description: Interface ISingleLibrary definition
 */
export interface ISingleLibrary {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name library_name
     * @type string
     * @required
     */
    library_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions_id
     * @type string[]
     * @readonly
     * @required
     */
    versions_id: string[];
}


/**
 * @name ISingleLibraryFilter
 * @description: Json Model for getting Single Library by Filter
 */
export interface ISingleLibraryFilter {
    /**
     * @name library_name
     * @type string
     */
    library_name?: string;
    /**
     * @name order
     * @type ("group_name"|"id")
     * @description Value of order
     */
    order?: ("group_name"|"id");
    /**
     * @name processors_id
     * @type string[]
     * @description List of processor.id
     */
    processors_id?: string[];
    /**
     * @name value
     * @type ("asc OR desc")
     * @description Set type of Order -> ascending / descending, If you used order - its required!!!
     */
    value?: ("asc OR desc");
}


/**
 * @name ISingleLibraryNew
 * @description: Json Model for new Single Library
 */
export interface ISingleLibraryNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name library_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    library_name: string;
}


/**
 * @name ISingleLibraryVersion
 * @description: Json Model for new Version for SingleLibrary
 */
export interface ISingleLibraryVersion {
    /**
     * @name version_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ISingleLibraryList
 * @description: Individual SingleLibrary List
 */
export interface ISingleLibraryList {
    /**
     * @name content
     * @type ISingleLibrary[]
     * @readonly
     * @required
     */
    content: ISingleLibrary[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ISocialLogin
 * @description: Json Model for new Basic Login throw the social networks
 */
export interface ISocialLogin {
    /**
     * @name authToken
     * @type string
     * @description token, that you have to used in HTML head for verifying the identities
     * @readonly
     * @required
     */
    authToken: string;
    /**
     * @name redirect_url
     * @type string
     * @description URL that you have to redirect user
     * @readonly
     * @required
     */
    redirect_url: string;
    /**
     * @name type
     * @type ("Facebook"|"GitHub")
     * @readonly
     * @required
     */
    type: ("Facebook"|"GitHub");
}


/**
 * @name ISwaggerTariffDetailsEdit
 * @description: Interface ISwaggerTariffDetailsEdit definition
 */
export interface ISwaggerTariffDetailsEdit {
    /**
     * @name city
     * @type string
     * @description Required: alwaysThe city must have at least 4 characters
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     * @description Required: only if user want have business account
     * @required
     */
    company_account: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_invoice_email
     * @type string
     * @description Required: only if company_account = trueEmail must be valid
     */
    company_invoice_email?: string;
    /**
     * @name company_name
     * @type string
     * @description Required: only if company_account = trueThe company_name must have at least 4 characters
     */
    company_name?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if company_account = trueThe company_web url must be valid 
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Required: alwaysThe country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name registration_no
     * @type string
     * @description Required: only if company_account = trueThe company_registration_no must have at least 4 characters
     */
    registration_no?: string;
    /**
     * @name street
     * @type string
     * @description Required: alwaysThe street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: alwaysBut The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name vat_number
     * @type string
     * @description Required: only if company_account = true And VAT_number is required only for EU Customers.The VAT_number must have at least 4 characters
     * @example CZ28496639
     */
    vat_number?: string;
    /**
     * @name zip_code
     * @type string
     * @description Required: alwaysThe zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name ISwaggerTariffGeneralEdit
 * @description: Interface ISwaggerTariffGeneralEdit definition
 */
export interface ISwaggerTariffGeneralEdit {
    /**
     * @name currency_type
     * @type string
     * @description Length must be 3 characters
     * @required
     */
    currency_type: string;
    /**
     * @name product_individual_name
     * @type string
     * @description Required: always.The product_individual_name length must be between 4 and 60 characters
     * @required
     */
    product_individual_name: string;
}


/**
 * @name ISystemAccess
 * @description: Json Model for System Access>
 */
export interface ISystemAccess {
    /**
     * @name permissions
     * @type IPersonPermission[]
     * @readonly
     * @required
     */
    permissions: IPersonPermission[];
    /**
     * @name roles
     * @type ISecurityRole[]
     * @readonly
     * @required
     */
    roles: ISecurityRole[];
}


/**
 * @name ITariff
 * @description: Json Model for specific Tariff and price plan
 */
export interface ITariff {
    /**
     * @name packages
     * @type IAdditionalPackage[]
     * @description List of Additional Packages - More Slots for IoT, Projects etc..
     * @readonly
     * @required
     */
    packages: IAdditionalPackage[];
    /**
     * @name tariffs
     * @type IIndividualsTariff[]
     * @description List of Individual Tariffs
     * @readonly
     * @required
     */
    tariffs: IIndividualsTariff[];
}


/**
 * @name ITariffLabel
 * @description: Json Model for details about Tariff
 */
export interface ITariffLabel {
    /**
     * @name description
     * @type string
     * @description If not null or empty description="" value - Show this text under the mouse pointer
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name label
     * @type string
     * @description Basic Text value - for each line
     * @readonly
     * @required
     */
    label: string;
}


/**
 * @name ITariffRegister
 * @description: Json Model if user want create new Tariff for projects
 */
export interface ITariffRegister {
    /**
     * @name city
     * @type string
     * @description Required: alwaysThe city must have at least 4 characters
     * @required
     */
    city: string;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if account is businessThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if account is businessThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_invoice_email
     * @type string
     * @description Required: only if account is businessEmail must be valid
     */
    company_invoice_email?: string;
    /**
     * @name company_name
     * @type string
     * @description Required: only if account is businessThe company_name must have at least 4 characters
     */
    company_name?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if account is businessThe company_web must have at least 4 characters
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Required: alwaysThe country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name currency_type
     * @type string
     */
    currency_type?: string;
    /**
     * @name payment_method
     * @type string
     * @description Required: only in if required_payment_mode is true  values =>[bank, credit_card]
     * @required
     */
    payment_method: string;
    /**
     * @name payment_mode
     * @type string
     * @description Required: only in if required_payment_mode is true
     * @required
     */
    payment_mode: string;
    /**
     * @name product_individual_name
     * @type string
     * @description Required: always.The street must have at least 4 characters
     * @required
     */
    product_individual_name: string;
    /**
     * @name registration_no
     * @type string
     * @description Required: only if account is businessThe company_registration_no must have at least 4 characters
     */
    registration_no?: string;
    /**
     * @name street
     * @type string
     * @description Required: alwaysThe street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: alwaysBut The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name tariff_type
     * @type string
     */
    tariff_type?: string;
    /**
     * @name vat_number
     * @type string
     * @description Required: only if account is business & from EU!!! CZ28496639 The VAT_number must have at least 4 characters
     */
    vat_number?: string;
    /**
     * @name zip_code
     * @type string
     * @description Required: alwaysThe zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name ITypeOfBlock
 * @description: Interface ITypeOfBlock definition
 */
export interface ITypeOfBlock {
    /**
     * @name blockoBlocks
     * @type IBlockoBlock[]
     * @required
     */
    blockoBlocks: IBlockoBlock[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name general_description
     * @type string
     * @required
     */
    general_description: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description This value will be in Json only if TypeOfBlock is private!
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBlockNew
 * @description: Json Model for new TypeOfBlock
 */
export interface ITypeOfBlockNew {
    /**
     * @name general_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    general_description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type ("Value can be null or contains project_id")
     * @description 
     *     
     *     if you want make private TypeOfBlock group. You have to have "project_id" parameter in Json.
     */
    project_id?: ("Value can be null or contains project_id");
}


/**
 * @name ITypeOfBoard
 * @description: Interface ITypeOfBoard definition
 */
export interface ITypeOfBoard {
    /**
     * @name connectible_to_internet
     * @type boolean
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name processor_id
     * @type string
     * @readonly
     * @required
     */
    processor_id: string;
    /**
     * @name processor_name
     * @type string
     * @readonly
     * @required
     */
    processor_name: string;
    /**
     * @name producer_id
     * @type string
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name register_new_device_permission
     * @type boolean
     * @readonly
     * @required
     */
    register_new_device_permission: boolean;
    /**
     * @name revision
     * @type string
     * @required
     */
    revision: string;
}


/**
 * @name ITypeOfBoardNew
 * @description: Json Model for new TypeOfBoard
 */
export interface ITypeOfBoardNew {
    /**
     * @name compiler_target_name
     * @type string
     * @description The description must have at least 4 characters
     * @required
     */
    compiler_target_name: string;
    /**
     * @name connectible_to_internet
     * @type boolean
     * @description If device can connect to internet
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name description
     * @type string
     * @description The description must have at least 4 characters
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name processor_id
     * @type string
     * @description Required valid processor_id
     * @required
     */
    processor_id: string;
    /**
     * @name producer_id
     * @type string
     * @description Required valid producer_id
     * @required
     */
    producer_id: string;
}


/**
 * @name ITypeOfConfirms
 * @description: Interface ITypeOfConfirms definition
 */
export interface ITypeOfConfirms {
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name size
     * @type number
     * @format int32
     * @required
     */
    size: number;
    /**
     * @name type
     * @type string
     * @required
     */
    type: string;
}


/**
 * @name ITypeOfConfirmsNew
 * @description: Json Model for new TypeOfConfirms
 */
export interface ITypeOfConfirmsNew {
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name size
     * @type number
     * @description must be positive
     * @format int32
     * @required
     */
    size: number;
    /**
     * @name type
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    type: string;
}


/**
 * @name ITypeOfPost
 * @description: Interface ITypeOfPost definition
 */
export interface ITypeOfPost {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name type
     * @type string
     * @required
     */
    type: string;
}


/**
 * @name ITypeOfPostNew
 * @description: Json Model for create new TypeOfPost
 */
export interface ITypeOfPostNew {
    /**
     * @name type
     * @type string
     * @description Length must be between 3 and 60 characters.
     * @required
     */
    type: string;
}


/**
 * @name ITypeOfBlockFilter
 * @description: Json Model for getting Type_Of_Block Filter List
 */
export interface ITypeOfBlockFilter {
    /**
     * @name private_type
     * @type boolean
     * @description Use 'true' for private Type_Of_Block or 'false' for non-private
     * @required
     */
    private_type: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Type_Of_Blocks of given project
     */
    project_id?: string;
}


/**
 * @name ITypeOfBlockLight
 * @description: Type_Of_Block Light (only few properties)
 */
export interface ITypeOfBlockLight {
    /**
     * @name type_of_block_description
     * @type string
     * @readonly
     * @required
     */
    type_of_block_description: string;
    /**
     * @name type_of_block_id
     * @type string
     * @readonly
     * @required
     */
    type_of_block_id: string;
    /**
     * @name type_of_block_name
     * @type string
     * @readonly
     * @required
     */
    type_of_block_name: string;
}


/**
 * @name ITypeOfBlockList
 * @description: Individual Type_Of_Block List
 */
export interface ITypeOfBlockList {
    /**
     * @name content
     * @type ITypeOfBlockLight[]
     * @readonly
     * @required
     */
    content: ITypeOfBlockLight[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IUserFiles
 * @description: Interface IUserFiles definition
 */
export interface IUserFiles {
    /**
     * @name code
     * @type string
     */
    code?: string;
    /**
     * @name file_name
     * @type string
     */
    file_name?: string;
}


/**
 * @name IVersionObject
 * @description: Interface IVersionObject definition
 */
export interface IVersionObject {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IWebSocketString
 * @description: Interface IWebSocketString definition
 */
export interface IWebSocketString {
    /**
     * @name actor
     * @type boolean
     */
    actor?: boolean;
}


/**
 * @name IWebSocketToken
 * @description: Json Model that you will get, if login was successful
 */
export interface IWebSocketToken {
    /**
     * @name websocket_token
     * @type string
     * @description Swagger_Websocket_Token - used this token for WebSocket access. The lifetime of the token is 5 seconds. It is disposable. It can not be used twice. In the event of the expiration of the life of the disabled. 
     * @readonly
     * @required
     */
    websocket_token: string;
}




export abstract class TyrionAPI {

    protected abstract requestRestPath<T>(method:string, path:string, body:Object, success:number[]):Promise<T>;

    /**
     * @name __login
     * @summary login
     * @operationId login
     * @tags Access, Person, APP-Api
     *
     * @description Get access Token
     *
     * @param {ILogin} body - Contains Json with values
     *
     * @returns {ILoginToken} [code 200] Successfully logged
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public __login(body:ILogin):Promise<ILoginToken> {
        return this.requestRestPath("POST", `/coreClient/person/permission/login`, body, [200]);
    }

    /**
     * @name __loginFacebook
     * @summary login with Facebook
     * @operationId Facebook
     * @tags Access, Social-Facebook
     *
     * @description For login via Facebook 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {string} return_link - this is return url address in format  ?return_link=/link/link
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public __loginFacebook(return_link:string):Promise<ISocialLogin> {
        return_link = encodeURIComponent(return_link);
        return this.requestRestPath("GET", `/login/facebook?return_link=${return_link}`, {}, [200]);
    }

    /**
     * @name __loginGitHub
     * @summary login with GitHub
     * @operationId GitHub
     * @tags Access, Social-GitHub
     *
     * @description For login via GitHub 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {string} return_link - this is return url address in format  /link/link
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public __loginGitHub(return_link:string):Promise<ISocialLogin> {
        return_link = encodeURIComponent(return_link);
        return this.requestRestPath("GET", `/login/github?return_link=${return_link}`, {}, [200]);
    }

    /**
     * @name __logout
     * @summary logout
     * @operationId logout
     * @tags Access, Person, APP-Api
     *
     * @description for logout person - that's deactivate person token 
     *
     *
     * @returns {IResultOk} [code 200] Successfully logged out
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public __logout():Promise<IResultOk> {
        return this.requestRestPath("POST", `/coreClient/person/permission/logout`, {}, [200]);
    }

    /**
     * @name addProjectParticipant
     * @summary add participant to a Project
     * @operationId addParticipantToProject
     * @tags Project
     *
     * @description adds Person to a Project, every piece of information is held in Invitation
     *
     * @param {string} invitation_id
     * @param {boolean} decision
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws [code 500] Server side Error
     */
    public addProjectParticipant(invitation_id:string, decision:boolean):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/project/addParticipant/${invitation_id}/${decision}`, {}, [200]);
    }

    /**
     * @name compileCProgram
     * @summary compile C_program with Code
     * @operationId compile_C_Program_code
     * @tags C_Program
     *
     * @description Compile code
     *
     * @param {ICProgramVersionUpdate} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Compilation successful
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws {ICompilationBuildError[]} [code 422] Compilation unsuccessful
     * @throws {IBadRequest} [code 477] External server is offline
     * @throws {IPermissionRequired} [code 478] External server side Error
     * @throws [code 500] Server side Error
     */
    public compileCProgram(body:ICProgramVersionUpdate):Promise<IResultOk> {
        return this.requestRestPath("POST", `/compilation/c_program/version/compile`, body, [200]);
    }

    /**
     * @name compileCProgramVersion
     * @summary compile C_program Version
     * @operationId compile_C_Program_version
     * @tags C_Program
     *
     * @description Compile specific version of C_program - before compilation - you have to update (save) version code
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ICompilationOk} [code 200] Compilation successful
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws {ICompilationBuildError[]} [code 422] Compilation unsuccessful
     * @throws {IBadRequest} [code 477] External server is offline
     * @throws {IBadRequest} [code 478] External server side Error
     * @throws [code 500] Server side Error
     */
    public compileCProgramVersion(version_id:string):Promise<ICompilationOk> {
        return this.requestRestPath("PUT", `/compilation/c_program/version/compile/${version_id}`, {}, [200]);
    }

    /**
     * @name confirmNotification
     * @operationId notification_confirm
     * @tags Not Documented API - InProgress or Stuck
     *
     * @param {string} notification_id
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public confirmNotification(notification_id:string):Promise<IResult> {
        return this.requestRestPath("PUT", `/notification/confirm/${notification_id}`, {}, [200]);
    }

    /**
     * @name connectBoard
     * @summary connect Board with Project
     * @operationId connect_Board_with_Project
     * @tags Board
     *
     * @description This Api is used by Users for connection of Board with their Project
     *
     * @param {string} board_id
     * @param {string} project_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public connectBoard(board_id:string, project_id:string):Promise<IBoard> {
        return this.requestRestPath("PUT", `/compilation/board/${board_id}/${project_id}`, {}, [200]);
    }

    /**
     * @name connectHomer
     * @summary connect Homer with Project
     * @operationId connectHomerWithProject
     * @tags Homer, Project
     *
     * @description remove Homer
     *
     * @param {string} project_id - project_id String path
     * @param {string} homer_id - id String path
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public connectHomer(project_id:string, homer_id:string):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/homer/${project_id}/${homer_id}`, {}, [200]);
    }

    /**
     * @name connectMProject
     * @summary connect M_Project with B_program
     * @operationId connect_M_Program_with_B_Program
     * @tags M_Program
     *
     * @description connect M_project with B_program ( respectively with version of B_program - where is Blocko-Code)
     *
     * @param {string} m_project_id - m_project_id String
     * @param {string} version_id - version_id String
     * @param {boolean} auto_incrementing - auto_incrementing Boolean value
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public connectMProject(m_project_id:string, version_id:string, auto_incrementing:boolean):Promise<IMProject> {
        return this.requestRestPath("PUT", `/grid/m_project/connect/${m_project_id}/${version_id}/${auto_incrementing}`, {}, [200]);
    }

    /**
     * @name createBProgram
     * @summary create new B_Program
     * @operationId new_b_Program
     * @tags B_Program
     *
     * @description create new B_Program
     *
     * @param {string} project_id
     * @param {IBProgramNew} body - Contains Json with values
     *
     * @returns {IBProgram} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBProgram(project_id:string, body:IBProgramNew):Promise<IBProgram> {
        return this.requestRestPath("POST", `/project/b_program/${project_id}`, body, [201]);
    }

    /**
     * @name createBProgramVersion
     * @summary create new Version of B Program
     * @operationId update_b_program
     * @tags B_Program
     *
     * @description edit basic information in B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     * @param {IBProgramVersionNew} body - Contains Json with values
     *
     * @returns {IBProgramVersion} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBProgramVersion(b_program_id:string, body:IBProgramVersionNew):Promise<IBProgramVersion> {
        return this.requestRestPath("PUT", `/project/b_program/update/${b_program_id}`, body, [200]);
    }

    /**
     * @name createBlockoBlock
     * @summary create new Block
     * @operationId new_Block
     * @tags Blocko-Block
     *
     * @description creating new independent Block object for Blocko tools
     *
     * @param {IBlockoBlockNew} body - Contains Json with values
     *
     * @returns {IBlockoBlock} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBlockoBlock(body:IBlockoBlockNew):Promise<IBlockoBlock> {
        return this.requestRestPath("POST", `/project/blockoBlock`, body, [201]);
    }

    /**
     * @name createBlockoBlockVersion
     * @summary create BlockoBlock version
     * @operationId new_BlockoBlock_Version
     * @tags Blocko-Block
     *
     * @description new BlockoBlock version
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockBlockoVersionNew} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBlockoBlockVersion(blocko_block_id:string, body:IBlockoBlockBlockoVersionNew):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("POST", `/project/blockoBlock/version/${blocko_block_id}`, body, [201]);
    }

    /**
     * @name createBlockoServer
     * @summary Create new Blocko Server
     * @operationId create_Blocko_Server
     * @tags External Server
     *
     * @description Create new Gate for Blocko Server
     *
     * @param {ICloudHomerServer} body - Contains Json with values
     *
     * @returns {ICloudHomerServer} [code 201] Successfully created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBlockoServer(body:ICloudHomerServer):Promise<ICloudHomerServer> {
        return this.requestRestPath("POST", `/project/blocko/server`, body, [201]);
    }

    /**
     * @name createBoard
     * @summary create Board
     * @operationId new_Board
     * @tags Board
     *
     * @description This Api is using only for developing mode, for registration of our Board - in future it will be used only by machine in factory or boards themselves with "registration procedure". Its not allowed to delete that! Only deactivate. Classic User can registed that to own project or own account
     *
     * @param {IBoardNew} body - Contains Json with values
     *
     * @returns {IBoard[]} [code 201] Successful created
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBoard(body:IBoardNew):Promise<IBoard[]> {
        return this.requestRestPath("POST", `/compilation/board`, body, [201]);
    }

    /**
     * @name createCProgram
     * @summary Create new C_Program
     * @operationId create_C_Program
     * @tags C_Program
     *
     * @description If you want create new C_program in project.id = {project_id}. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} project_id - project_id String query
     * @param {ICProgramNew} body - Contains Json with values
     *
     * @returns {ICProgram} [code 201] Successful created
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createCProgram(project_id:string, body:ICProgramNew):Promise<ICProgram> {
        return this.requestRestPath("POST", `/compilation/c_program/c_program/${project_id}`, body, [201]);
    }

    /**
     * @name createCProgramVersion
     * @summary new Version of C_Program
     * @operationId new_C_Program_Version
     * @tags C_Program
     *
     * @description If you want add new code to C_program by query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id - version_id String query
     * @param {ICProgramVersionNew} body - Contains Json with values
     *
     * @returns {ICProgramVersion} [code 201] Successful created
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createCProgramVersion(c_program_id:string, body:ICProgramVersionNew):Promise<ICProgramVersion> {
        return this.requestRestPath("POST", `/compilation/c_program/version/create/${c_program_id}`, body, [201]);
    }

    /**
     * @name createCompilationServer
     * @summary Create new Compilation Server
     * @operationId create_Compilation_Server
     * @tags External Server
     *
     * @description Create new Gate for Compilation Server
     *
     * @param {ICompilationServer} body - Contains Json with values
     *
     * @returns {ICloudCompilationServer} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createCompilationServer(body:ICompilationServer):Promise<ICloudCompilationServer> {
        return this.requestRestPath("POST", `/compilation/server`, body, [201]);
    }

    /**
     * @name createHomer
     * @summary create new Homer
     * @operationId newHomer
     * @tags Homer
     *
     * @description create new Homer
     *
     * @param {IHomerNew} body - Contains Json with values
     *
     * @returns {IPrivateHomerServer} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createHomer(body:IHomerNew):Promise<IPrivateHomerServer> {
        return this.requestRestPath("POST", `/project/homer`, body, [201]);
    }

    /**
     * @name createLibrary
     * @summary create new SingleLibrary
     * @operationId new_SingleLibrary
     * @tags SingleLibrary
     *
     * @description if you want create new SingleLibrary for C_program compilation
     *
     * @param {ISingleLibraryNew} body - Contains Json with values
     *
     * @returns {ISingleLibrary} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createLibrary(body:ISingleLibraryNew):Promise<ISingleLibrary> {
        return this.requestRestPath("POST", `/compilation/library`, body, [201]);
    }

    /**
     * @name createLibraryGroup
     * @summary Create new LibraryGroup
     * @operationId new_LibraryGroup
     * @tags LibraryGroup
     *
     * @description If you want create new LibraryGroup. Send required json values and server respond with new object
     *
     * @param {ILibraryGroupNew} body - Contains Json with values
     *
     * @returns {ILibraryGroup} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createLibraryGroup(body:ILibraryGroupNew):Promise<ILibraryGroup> {
        return this.requestRestPath("POST", `/compilation/libraryGroup`, body, [201]);
    }

    /**
     * @name createLibraryGroupVersion
     * @summary Create new Version in LibraryGroup
     * @operationId new_LibraryGroup_Version
     * @tags LibraryGroup
     *
     * @description If you want create new versinon in LibraryGroup query = libraryGroup_id. Send required json values and server respond with new object
     *
     * @param {string} libraryGroup_id - libraryGroup_id String query
     * @param {ILibraryGroupVersion} body - Contains Json with values
     *
     * @returns {IVersionObject} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createLibraryGroupVersion(libraryGroup_id:string, body:ILibraryGroupVersion):Promise<IVersionObject> {
        return this.requestRestPath("POST", `/compilation/libraryGroup/version/${libraryGroup_id}`, body, [201]);
    }

    /**
     * @name createLibraryVersion
     * @summary create new SingleLibrary
     * @operationId new_SingleLibrary_Version
     * @tags SingleLibrary
     *
     * @description if you want create new SingleLibrary for C_program compilation
     *
     * @param {string} library_id - library_id String query
     * @param {ISingleLibraryVersion} body - Contains Json with values
     *
     * @returns {IVersionObject} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createLibraryVersion(library_id:string, body:ISingleLibraryVersion):Promise<IVersionObject> {
        return this.requestRestPath("POST", `/compilation/library/version/${library_id}`, body, [201]);
    }

    /**
     * @name createMProgram
     * @summary Create new M_Program
     * @operationId new_M_Program
     * @tags M_Program
     *
     * @description creating new M_Program
     *
     * @param {string} m_project_id - m_project_id
     * @param {IMProgramNew} body - Contains Json with values
     *
     * @returns {IMProgram} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createMProgram(m_project_id:string, body:IMProgramNew):Promise<IMProgram> {
        return this.requestRestPath("POST", `/grid/m_program/${m_project_id}`, body, [201]);
    }

    /**
     * @name createMProject
     * @summary Create new M_Project
     * @operationId new_M_Project
     * @tags M_Program
     *
     * @description M_Project is package for M_Programs -> presupposition is that you need more control terminal for your IoT project. Different screens for family members, for employee etc.. But of course - you can used that for only one M_program
     *
     * @param {string} project_id
     * @param {IMProjectNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createMProject(project_id:string, body:IMProjectNew):Promise<IMProject> {
        return this.requestRestPath("POST", `/grid/m_project/${project_id}`, body, [201]);
    }

    /**
     * @name createOverflowAnswer
     * @summary add Answer to the Post
     * @operationId addAnswer
     * @tags Blocko-OverFlow
     *
     * @description You can  answer to Main Post. But you cannot answer another answer!
     *
     * @param {string} post_id - post_id String path
     * @param {IPostAnswer} body - Contains Json with values
     *
     * @returns {IPost} [code 200] Ok Result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public createOverflowAnswer(post_id:string, body:IPostAnswer):Promise<IPost> {
        return this.requestRestPath("POST", `/overflow/answer/${post_id}`, body, [200]);
    }

    /**
     * @name createOverflowComment
     * @summary add comment to the Post
     * @operationId addComment
     * @tags Blocko-OverFlow, Post
     *
     * @description You can comment Main Post and all answers in Main Post. But you cannot comment another comment!
     *
     * @param {string} post_id - post_id String path
     * @param {IPostComment} body - Contains Json with values
     *
     * @returns {IPost} [code 200] Ok Result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public createOverflowComment(post_id:string, body:IPostComment):Promise<IPost> {
        return this.requestRestPath("POST", `/overflow/comment/${post_id}`, body, [200]);
    }

    /**
     * @name createOverflowLink
     * @summary answer to Post with link
     * @operationId linkWithPreviousAnswer
     * @tags Blocko-OverFlow
     *
     * @description You can connect question (main Post) with previous version
     *
     * @param {string} question_post_id - question_post_id String path
     * @param {string} answer_post_id - This is Answer Id (main post)
     *
     * @returns {ILinkedPost} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public createOverflowLink(question_post_id:string, answer_post_id:string):Promise<ILinkedPost> {
        return this.requestRestPath("POST", `/overflow/link/${question_post_id}/${answer_post_id}`, {}, [200]);
    }

    /**
     * @name createOverflowPost
     * @summary Create new Post
     * @operationId new_Post
     * @tags Blocko-OverFlow, Post
     *
     * @description Create new Post. 
     *
     * @param {IPostNew} body - Contains Json with values
     *
     * @returns {IPost} [code 201] Successfully created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public createOverflowPost(body:IPostNew):Promise<IPost> {
        return this.requestRestPath("POST", `/overflow/post`, body, [201]);
    }

    /**
     * @name createOverflowTypeOfConfirm
     * @summary new Type of Confirms
     * @operationId new_TypeOfConfirms
     * @tags Blocko-OverFlow, Type-Of-Confirms
     *
     * @description Create new type of Confirms. Its only for Blocko-OverFlow Administrators!
     *
     * @param {ITypeOfConfirmsNew} body - Contains Json with values
     *
     * @returns {ITypeOfConfirms} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createOverflowTypeOfConfirm(body:ITypeOfConfirmsNew):Promise<ITypeOfConfirms> {
        return this.requestRestPath("POST", `/overflow/typeOfConfirm`, body, [201]);
    }

    /**
     * @name createOverflowTypeOfPost
     * @summary new Type of Post
     * @operationId new_TypeOfPost
     * @tags Blocko-OverFlow, Type-Of-Post
     *
     * @description Create new type of post. Its only for Blocko-OverFlow Administrators!
     *
     * @param {ITypeOfPostNew} body - Contains Json with values
     *
     * @returns {ITypeOfPost} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createOverflowTypeOfPost(body:ITypeOfPostNew):Promise<ITypeOfPost> {
        return this.requestRestPath("POST", `/overflow/typeOfPost`, body, [201]);
    }

    /**
     * @name createPerson
     * @summary register new Person
     * @operationId registred_Person
     * @tags Person
     *
     * @description create new Person with unique email and nick_name, for standard registration leave invitationToken empty, it's used only if someone is invited via email
     *
     * @param {IPersonNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createPerson(body:IPersonNew):Promise<IResultOk> {
        return this.requestRestPath("POST", `/coreClient/person/person`, body, [201]);
    }

    /**
     * @name createPersonChangeProperty
     * @summary change person login info
     * @operationId changePersonLoginProperty
     * @tags Person
     *
     * @description Request password or email change. API does not change password or email, only sends email for authorization of the change and holds values in different object.JSON value 'property' contains only 'password' or 'email'
     *
     * @param {IPersonChangeProperty} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public createPersonChangeProperty(body:IPersonChangeProperty):Promise<IResultOk> {
        return this.requestRestPath("POST", `/coreClient/person/changeProperty`, body, [200]);
    }

    /**
     * @name createProject
     * @summary create new Project
     * @operationId postNewProject
     * @tags Project
     *
     * @description create new Project
     *
     * @param {IProjectNew} body - Contains Json with values
     *
     * @returns {IProject} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createProject(body:IProjectNew):Promise<IProject> {
        return this.requestRestPath("POST", `/project/project`, body, [201]);
    }

    /**
     * @name createScreenType
     * @summary create ScreenType
     * @operationId new_Screen_Size_Type
     * @tags Screen_Size_Type
     *
     * @description Create type of screen - its used for describe Grid dimensions for regular users - (Iphone 5, Samsung Galaxy S3 etc..). Its also possible create private Screen for Personal/Enterprises projects if you add to json parameter { "project_id" : "{1576}"} If json not contain project_id - you need Permission For that!!
     *
     * @param {IScreeSizeTypeNew} body - Contains Json with values
     *
     * @returns {IScreenSizeType[]} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createScreenType(body:IScreeSizeTypeNew):Promise<IScreenSizeType[]> {
        return this.requestRestPath("POST", `/grid/screen_type`, body, [201]);
    }

    /**
     * @name createSecureRole
     * @summary create new Role
     * @operationId new_Role
     * @tags Role
     *
     * @description If you want create new Role in system. You need permission for that or have right system Roles
     *
     * @param {ISecurityRoleNew} body - Contains Json with values
     *
     * @returns {ISecurityRole} [code 201] Successfully created
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createSecureRole(body:ISecurityRoleNew):Promise<ISecurityRole> {
        return this.requestRestPath("POST", `/secure/role`, body, [201]);
    }

    /**
     * @name createTarif
     * @summary create Product under Tariff
     * @operationId set_tariff_with_account
     * @tags Price & Invoice & Tariffs
     *
     * @description Its basic object. Peak of Pyramid :). This Api is used for its creation. You can get two kind of response: 
     *    
     *    First(201):  System create new Object - Object Product 
     *    
     *    Second(200): The product requires payment - The server creates an object, but returns the payment details - payment go_url for GoPay Terminal!
     *
     * @param {ITariffRegister} body - Contains Json with values
     *
     * @returns {IGoPayUrl|IProduct} [code 200|201] Created successfully - but payment is required|Created successfully - payment not required
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createTarif(body:ITariffRegister):Promise<IGoPayUrl|IProduct> {
        return this.requestRestPath("POST", `/product/tarif`, body, [200,201]);
    }

    /**
     * @name createTypeOfBlock
     * @summary create new Type of Block
     * @operationId newTypeOfBlock
     * @tags Type-of-Block
     *
     * @description creating group for BlockoBlocks -> Type of block
     *
     * @param {ITypeOfBlockNew} body - Contains Json with values
     *
     * @returns {ITypeOfBlock} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createTypeOfBlock(body:ITypeOfBlockNew):Promise<ITypeOfBlock> {
        return this.requestRestPath("POST", `/project/typeOfBlock`, body, [201]);
    }

    /**
     * @name createTypeOfBoard
     * @summary create TypeOfBoard
     * @operationId new_TypeOfBoard
     * @tags Type-Of-Board
     *
     * @description The TypeOfBoard is category for IoT. Like Raspberry2, Arduino-Uno etc. 
     *    
     *    We using that for compilation, sorting libraries, filtres and more..
     *
     * @param {ITypeOfBoardNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoard} [code 201] Successfully created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createTypeOfBoard(body:ITypeOfBoardNew):Promise<ITypeOfBoard> {
        return this.requestRestPath("POST", `/compilation/typeOfBoard`, body, [201]);
    }

    /**
     * @name deleteBProgram
     * @summary remove B Program
     * @operationId remove_b_Program
     * @tags B_Program
     *
     * @description remove B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBProgram(b_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name deleteBProgramVersion
     * @summary remove B Program version
     * @operationId remove_b_Program_version
     * @tags B_Program
     *
     * @description remove B_Program version object
     *
     * @param {string} version_id - version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBProgramVersion(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name deleteBlockoBlock
     * @summary delete BlockoBlock
     * @operationId deleteBlock
     * @tags Blocko-Block
     *
     * @description delete BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBlockoBlock(blocko_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/blockoBlock/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name deleteBlockoBlockVersion
     * @summary delete BlockoBlock version
     * @operationId delete_BlockoBlock_Version
     * @tags Blocko-Block
     *
     * @description delete BlockoBlock version
     *
     * @param {string} blocko_block_version_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBlockoBlockVersion(blocko_block_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/blockoBlock/version/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name deleteBlockoServer
     * @summary remove Compilation Servers
     * @operationId delete_Blocko_Server
     * @tags External Server
     *
     * @description remove Compilation Servers
     *
     * @param {string} server_id - server_id 
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBlockoServer(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/blocko/server/${server_id}`, {}, [200]);
    }

    /**
     * @name deleteBoard
     * @summary deactivate Board
     * @operationId deactivate_Board
     * @tags Board
     *
     * @description Permanent exclusion from the system - for some reason it is not allowed to remove the Board from database
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBoard(board_id:string):Promise<IBoard> {
        return this.requestRestPath("DELETE", `/compilation/board/deactivateBoard/${board_id}`, {}, [200]);
    }

    /**
     * @name deleteCProgram
     * @summary delete C_program
     * @operationId delete_C_Program
     * @tags C_Program
     *
     * @description delete C_program by query = c_program_id, query = version_id
     *
     * @param {string} c_program_id - c_program_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteCProgram(c_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/c_program/c_program/${c_program_id}`, {}, [200]);
    }

    /**
     * @name deleteCProgramVersion
     * @summary delete Version in C_program
     * @operationId delete_C_Program_Version
     * @tags C_Program
     *
     * @description delete Version.id = version_id in C_program by query = c_program_id, query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteCProgramVersion(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/c_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name deleteCompilationServer
     * @summary remove Compilation Servers
     * @operationId delete_Compilation_Server
     * @tags External Server
     *
     * @description remove Compilation Servers
     *
     * @param {string} server_id - server_id 
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteCompilationServer(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/server/${server_id}`, {}, [200]);
    }

    /**
     * @name deleteConnection
     * @summary terminate logging
     * @operationId remove_Person_Connection
     * @tags Person
     *
     * @description You know where the user is logged in. And you can log out this connection. (Terminate token)
     *
     * @param {string} connection_id
     *
     * @returns {IResultOk} [code 200] Its possible used that
     *
     * @throws {IObjectNotFound} [code 400] Not Found object
     * @throws [code 500] Server side Error
     */
    public deleteConnection(connection_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/coreClient/connection/${connection_id}`, {}, [200]);
    }

    /**
     * @name deleteHomer
     * @summary remove Homer
     * @operationId removeHomer
     * @tags Homer
     *
     * @description remove Homer
     *
     * @param {string} homer_id - b_program_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteHomer(homer_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/homer/${homer_id}`, {}, [200]);
    }

    /**
     * @name deleteLibrary
     * @summary delete SingleLibrary
     * @operationId delete_SingleLibrary
     * @tags SingleLibrary
     *
     * @description If you want delete SingleLibrary by query = library_id
     *
     * @param {string} library_id - library_id String query
     *
     * @returns {IResultOk} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteLibrary(library_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/library/${library_id}`, {}, [200]);
    }

    /**
     * @name deleteLibraryGroup
     * @summary delete LibraryGroup
     * @operationId delete_LibraryGroup
     * @tags LibraryGroup
     *
     * @description If you want delete LibraryGroup by query = libraryGroup_id
     *
     * @param {string} libraryGroup_id - libraryGroup_id String query
     *
     * @returns {IResultOk} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteLibraryGroup(libraryGroup_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/libraryGroup/${libraryGroup_id}`, {}, [200]);
    }

    /**
     * @name deleteMProgram
     * @summary remove M_Program
     * @operationId remove_M_Program
     * @tags M_Program
     *
     * @description remove M_Program by quarry = m_program_id
     *
     * @param {string} m_progrm_id - m_program_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteMProgram(m_progrm_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid/m_program/${m_progrm_id}`, {}, [200]);
    }

    /**
     * @name deleteMProject
     * @summary remove M_Project
     * @operationId remove_M_Project
     * @tags M_Program
     *
     * @description remove M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteMProject(m_project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid/m_project/${m_project_id}`, {}, [200]);
    }

    /**
     * @name deleteNotification
     * @summary delete notification
     * @operationId delete_notification
     * @tags Notifications
     *
     * @description remove notification by id
     *
     * @param {string} notification_id
     *
     * @returns {IResultOk} [code 200] Delete Successful
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public deleteNotification(notification_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/notification/${notification_id}`, {}, [200]);
    }

    /**
     * @name deleteOverflowLink
     * @summary remove link to Post
     * @operationId unlinkWithPreviousAnswer
     * @tags Blocko-OverFlow, Post
     *
     * @description Remove connection (Link) between Posts
     *
     * @param {string} linked_post_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteOverflowLink(linked_post_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/overflow/link/${linked_post_id}`, {}, [200]);
    }

    /**
     * @name deleteOverflowPost
     * @summary delete Post
     * @operationId delete_Post
     * @tags Blocko-OverFlow
     *
     * @description You can delete Main Post, Answers to post and comments.. 
     *
     * @param {string} post_id - post_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteOverflowPost(post_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/overflow/post/${post_id}`, {}, [200]);
    }

    /**
     * @name deleteOverflowTypeOfConfirm
     * @summary edit Type of Confirms
     * @operationId delete_TypeOfConfirms
     * @tags Blocko-OverFlow, Type-Of-Confirms
     *
     * @description edit  type of Confirms. Its only for Blocko-OverFlow Administrators!
     *
     * @param {string} type_of_confirm_id - type_of_confirm_id String path
     * @param {ITypeOfConfirmsNew} body - Contains Json with values
     *
     * @returns {ITypeOfConfirms} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteOverflowTypeOfConfirm(type_of_confirm_id:string, body:ITypeOfConfirmsNew):Promise<ITypeOfConfirms> {
        return this.requestRestPath("DELETE", `/overflow/typeOfConfirm/${type_of_confirm_id}`, body, [200]);
    }

    /**
     * @name deleteOverflowTypeOfPost
     * @summary delete Type of Post
     * @operationId delete_TypeOfPost
     * @tags Blocko-OverFlow, Type-Of-Post
     *
     * @description delete type of post. Its required special permission!
     *
     * @param {string} type_of_post_id - type_of_post_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteOverflowTypeOfPost(type_of_post_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/overflow/typeOfPost/${type_of_post_id}`, {}, [200]);
    }

    /**
     * @name deleteProject
     * @summary delete Project
     * @operationId deleteProject
     * @tags Project
     *
     * @description delete Projects by project_id
     *
     * @param {string} project_id - project_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteProject(project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/project/${project_id}`, {}, [200]);
    }

    /**
     * @name deleteProjectDeleteInvitation
     * @summary delete Invitation into Project
     * @operationId deleteProjectInvitation
     * @tags Project
     *
     * @description Deletes invitation into the Project, also deletes notification about this invitation.
     *
     * @param {string} invitation_id - invitation_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public deleteProjectDeleteInvitation(invitation_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/project/deleteInvitation/${invitation_id}`, {}, [200]);
    }

    /**
     * @name deleteScreenType
     * @summary remove ScreenType
     * @operationId remove_Screen_Size_Type
     * @tags Screen_Size_Type
     *
     * @description remove ScreenType
     *
     * @param {string} screen_size_type_id - screen_size_type_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteScreenType(screen_size_type_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid/screen_type/${screen_size_type_id}`, {}, [200]);
    }

    /**
     * @name deleteTypeOfBlock
     * @summary delete Type of Block
     * @operationId deleteTypeOfBlock
     * @tags Type-of-Block
     *
     * @description delete group for BlockoBlocks -> Type of block
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteTypeOfBlock(type_of_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/typeOfBlock/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name deleteTypeOfBoard
     * @summary delete TypeOfBoard
     * @operationId delete_TypeOfBoard
     * @tags Type-Of-Board
     *
     * @description if you want delete TypeOfBoard object by query = type_of_board_id
     *
     * @param {string} type_of_board_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteTypeOfBoard(type_of_board_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/typeOfBoard/${type_of_board_id}`, {}, [200]);
    }

    /**
     * @name disconnectBoard
     * @summary disconnect Board from Project
     * @operationId disconnect_Board_from_Project
     * @tags Board
     *
     * @description This Api is used by Users for disconnection of Board from their Project, its not meaning that Board is removed from system, only disconnect and another user can registred that (connect that with different account/project etc..)
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public disconnectBoard(board_id:string):Promise<IBoard> {
        return this.requestRestPath("DELETE", `/compilation/board/${board_id}`, {}, [200]);
    }

    /**
     * @name disconnectHomer
     * @summary connect Homer with Project
     * @operationId disconnectHomerWithProject
     * @tags Homer, Project
     *
     * @description remove Homer
     *
     * @param {string} project_id - project_id String path
     * @param {string} homer_id - id String path
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public disconnectHomer(project_id:string, homer_id:string):Promise<IProject> {
        return this.requestRestPath("DELETE", `/project/homer/${project_id}/${homer_id}`, {}, [200]);
    }

    /**
     * @name disconnectMProject
     * @summary disconnect M_Project from B_program
     * @operationId disconnect_M_Program_from_B_Program
     * @tags M_Program
     *
     * @description disconnect M_project from B_program ( respectively with version of B_program - where is Blocko-Code)
     *
     * @param {string} m_project_id - m_project_id String
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public disconnectMProject(m_project_id:string):Promise<IMProject> {
        return this.requestRestPath("PUT", `/grid/m_project/disconnect/${m_project_id}`, {}, [200]);
    }

    /**
     * @name editBProgram
     * @summary edit B_Program
     * @operationId edit_b_Program
     * @tags B_Program
     *
     * @description edit basic information in B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     * @param {IBProgramNew} body - Contains Json with values
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editBProgram(b_program_id:string, body:IBProgramNew):Promise<IBProgram> {
        return this.requestRestPath("PUT", `/project/b_program/${b_program_id}`, body, [200]);
    }

    /**
     * @name editBProgramInstanceBlockoVersion
     * @operationId update_blocko_code_in_instance_verison
     * @tags Not Documented API - InProgress or Stuck
     *
     * @param {string} instance_id
     * @param {string} version_id
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public editBProgramInstanceBlockoVersion(instance_id:string, version_id:string):Promise<IResult> {
        return this.requestRestPath("PUT", `/project/b_program/instance/update_blocko/version/${instance_id}/${version_id}`, {}, [200]);
    }

    /**
     * @name editBlockoBlock
     * @summary edit basic information of the BlockoBlock
     * @operationId edit_Block
     * @tags Blocko-Block
     *
     * @description update basic information (name, and desription) of the independent BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockNew} body - Contains Json with values
     *
     * @returns {IBlockoBlock} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editBlockoBlock(blocko_block_id:string, body:IBlockoBlockNew):Promise<IBlockoBlock> {
        return this.requestRestPath("PUT", `/project/blockoBlock/${blocko_block_id}`, body, [200]);
    }

    /**
     * @name editBlockoServer
     * @summary edit Compilation Server
     * @operationId edit_Blocko_Server
     * @tags External Server
     *
     * @description Edit basic information Compilation Server
     *
     * @param {string} server_id - server_id 
     * @param {ICloudHomerServer} body - Contains Json with values
     *
     * @returns {ICloudHomerServer} [code 200] Updated successfully
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editBlockoServer(server_id:string, body:ICloudHomerServer):Promise<ICloudHomerServer> {
        return this.requestRestPath("PUT", `/project/blocko/server/${server_id}`, body, [200]);
    }

    /**
     * @name editBoardUserDescription
     * @summary edit Board - update personal description
     * @operationId edit_Board_User_Description
     * @tags Board
     *
     * @description Used for add descriptions by owners. "Persons" who registred "Board" to own "Projec" 
     *
     * @param {string} type_of_board_id
     * @param {IBoardPersonalDescription} body - Contains Json with values
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editBoardUserDescription(type_of_board_id:string, body:IBoardPersonalDescription):Promise<IBoard> {
        return this.requestRestPath("PUT", `/compilation/board/userDescription/${type_of_board_id}`, body, [200]);
    }

    /**
     * @name editCProgram
     * @summary Edit C_Program
     * @operationId edit_C_Program_Description
     * @tags C_Program
     *
     * @description If you want edit base information about C_program by  query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id - c_program_id String query
     * @param {ICProgramNew} body - Contains Json with values
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editCProgram(c_program_id:string, body:ICProgramNew):Promise<ICProgram> {
        return this.requestRestPath("PUT", `/compilation/c_program/c_program/${c_program_id}`, body, [200]);
    }

    /**
     * @name editCProgramBinary
     * @summary update Embedded Hardware with  binary file
     * @operationId uploadBinaryFileToBoard
     * @tags C_Program, Actualization
     *
     * @description Upload Binary file and choose hardware_id for update. Result (HTML code) will be every time 200. - Its because upload, restart, etc.. operation need more than ++30 second There is also problem / chance that Tyrion didn't find where Embedded hardware is. So you have to listening Server Sent Events (SSE) and show "future" message to the user!
     *
     * @param {string} board_id - version_id 
     * @param {string} command - version_id 
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws {IExternalCloudBlockoServerIsOffline} [code 477] External Cloud_Homer_server where is hardware is offline
     * @throws [code 500] Server side Error
     */
    public editCProgramBinary(board_id:string, command:string):Promise<IResultOk> {
        return this.requestRestPath("POST", `/compilation/c_program/binary/${board_id}/${command}`, {}, [200]);
    }

    /**
     * @name editCProgramVersion
     * @summary update basic information in Version of C_program
     * @operationId edit_C_Program_version
     * @tags C_Program
     *
     * @description For update basic (name and description) information in Version of C_program. If you want update code. You have to create new version. And after that you can delete previous version
     *
     * @param {string} version_id - version_id String query
     * @param {ICProgramVersionEdit} body - Contains Json with values
     *
     * @returns {IVersionObject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editCProgramVersion(version_id:string, body:ICProgramVersionEdit):Promise<IVersionObject> {
        return this.requestRestPath("PUT", `/compilation/c_program/version/edit/${version_id}`, body, [200]);
    }

    /**
     * @name editCompilationServer
     * @summary edit Compilation Server
     * @operationId edit_Compilation_Server
     * @tags External Server
     *
     * @description Edit basic information Compilation Server
     *
     * @param {string} server_id - server_id 
     * @param {ICompilationServer} body - Contains Json with values
     *
     * @returns {ICloudCompilationServer} [code 200] Update successfuly
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editCompilationServer(server_id:string, body:ICompilationServer):Promise<ICloudCompilationServer> {
        return this.requestRestPath("PUT", `/compilation/server/${server_id}`, body, [200]);
    }

    /**
     * @name editLibrary
     * @summary edit SingleLibrary
     * @operationId edit_SingleLibrary
     * @tags SingleLibrary
     *
     * @description if you want edit name or description of SingleLibrary by query = library_id
     *
     * @param {string} library_id - library_id String query
     * @param {ISingleLibraryNew} body - Contains Json with values
     *
     * @returns {ISingleLibrary} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editLibrary(library_id:string, body:ISingleLibraryNew):Promise<ISingleLibrary> {
        return this.requestRestPath("PUT", `/compilation/library/${library_id}`, body, [200]);
    }

    /**
     * @name editLibraryGroup
     * @summary edit LibraryGroup
     * @operationId editLibraryGroup
     * @tags LibraryGroup
     *
     * @description If you want edit LibraryGroup by query libraryGroup_id. Send required json values and server respond with new object
     *
     * @param {string} libraryGroup_id - libraryGroup_id String query
     * @param {ILibraryGroupNew} body - Contains Json with values
     *
     * @returns {ILibraryGroup} [code 200] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editLibraryGroup(libraryGroup_id:string, body:ILibraryGroupNew):Promise<ILibraryGroup> {
        return this.requestRestPath("PUT", `/compilation/libraryGroup/${libraryGroup_id}`, body, [200]);
    }

    /**
     * @name editMProgram
     * @summary update M_Program
     * @operationId edit_M_Program
     * @tags M_Program
     *
     * @description update m_project - in this case we are not support versions of m_project
     *
     * @param {string} m_progrm_id - m_program_id String query
     * @param {IMProgramNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editMProgram(m_progrm_id:string, body:IMProgramNew):Promise<IMProject> {
        return this.requestRestPath("PUT", `/grid/m_program/${m_progrm_id}`, body, [200]);
    }

    /**
     * @name editMProject
     * @summary edit M_Project
     * @operationId edit_M_Project
     * @tags M_Program
     *
     * @description edit basic information in M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     * @param {IMProjectNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editMProject(m_project_id:string, body:IMProjectNew):Promise<IMProject> {
        return this.requestRestPath("PUT", `/grid/m_project/${m_project_id}`, body, [200]);
    }

    /**
     * @name editOverflowAnswer
     * @summary edit Comment or Answer Post
     * @operationId edit_Comment_or_Answer
     * @tags Blocko-OverFlow, Post
     *
     * @description You can update Comment post
     *
     * @param {string} post_id - post_id String path
     * @param {IPostComment} body - Contains Json with values
     *
     * @returns {IPost} [code 200] Ok Result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editOverflowAnswer(post_id:string, body:IPostComment):Promise<IPost> {
        return this.requestRestPath("PUT", `/overflow/answer/${post_id}`, body, [200]);
    }

    /**
     * @name editOverflowPost
     * @summary edit Post
     * @operationId edit_Post
     * @tags Blocko-OverFlow, Post
     *
     * @description You can edit main post
     *
     * @param {string} post_id - post_id String path
     * @param {IPostNew} body - Contains Json with values
     *
     * @returns {IPost} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editOverflowPost(post_id:string, body:IPostNew):Promise<IPost> {
        return this.requestRestPath("PUT", `/overflow/post/${post_id}`, body, [200]);
    }

    /**
     * @name editOverflowTypeOfConfirm
     * @summary edit Type of Confirms
     * @operationId edit_TypeOfConfirms
     * @tags Blocko-OverFlow, Type-Of-Confirms
     *
     * @description edit  type of Confirms. Its only for Blocko-OverFlow Administrators!
     *
     * @param {string} type_of_confirm_id - type_of_confirm_id String path
     * @param {ITypeOfConfirmsNew} body - Contains Json with values
     *
     * @returns {ITypeOfConfirms} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editOverflowTypeOfConfirm(type_of_confirm_id:string, body:ITypeOfConfirmsNew):Promise<ITypeOfConfirms> {
        return this.requestRestPath("PUT", `/overflow/typeOfConfirm/${type_of_confirm_id}`, body, [200]);
    }

    /**
     * @name editOverflowTypeOfPost
     * @summary edit Type of Post
     * @operationId edit_TypeOfPost
     * @tags Blocko-OverFlow, Type-Of-Post
     *
     * @description edit type of post. Its required special permission!
     *
     * @param {string} type_of_post_id - type_of_post_id String path
     * @param {ITypeOfPostNew} body - Contains Json with values
     *
     * @returns {ITypeOfPost} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editOverflowTypeOfPost(type_of_post_id:string, body:ITypeOfPostNew):Promise<ITypeOfPost> {
        return this.requestRestPath("PUT", `/overflow/typeOfPost/${type_of_post_id}`, body, [200]);
    }

    /**
     * @name editPerson
     * @summary edit Person basic information
     * @operationId edit_Person_Information
     * @tags Person
     *
     * @description Edit person basic information
     *
     * @param {string} person_id
     * @param {IPersonUpdate} body - Contains Json with values
     *
     * @returns {IPerson} [code 200] Successful updated
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editPerson(person_id:string, body:IPersonUpdate):Promise<IPerson> {
        return this.requestRestPath("PUT", `/coreClient/person/person/${person_id}`, body, [200]);
    }

    /**
     * @name editProcessor
     * @summary update Processor
     * @operationId update_Processor
     * @tags Processor
     *
     * @description If you want update Processor.id by query = processor_id . Send required json values and server respond with update object
     *
     * @param {string} processor_id - processor_id String query
     * @param {IProcessorNew} body - Contains Json with values
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editProcessor(processor_id:string, body:IProcessorNew):Promise<IProcessor> {
        return this.requestRestPath("PUT", `/compilation/processor/${processor_id}`, body, [200]);
    }

    /**
     * @name editProject
     * @summary edit Project
     * @operationId edit_Project
     * @tags Project
     *
     * @description edit ne Project
     *
     * @param {string} project_id - project_id String path
     * @param {IProjectNew} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editProject(project_id:string, body:IProjectNew):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/project/${project_id}`, body, [200]);
    }

    /**
     * @name editScreenType
     * @summary edit ScreenType
     * @operationId edit_Screen_Size_Type
     * @tags Screen_Size_Type
     *
     * @description Edit all ScreenType information
     *
     * @param {string} screen_size_type_id - screen_size_type_id String query
     * @param {IScreeSizeTypeNew} body - Contains Json with values
     *
     * @returns {IScreenSizeType} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editScreenType(screen_size_type_id:string, body:IScreeSizeTypeNew):Promise<IScreenSizeType> {
        return this.requestRestPath("PUT", `/grid/screen_type/${screen_size_type_id}`, body, [200]);
    }

    /**
     * @name editTarifDetails
     * @summary edit Tariff payment details
     * @operationId edit_payment_details
     * @tags Price & Invoice & Tariffs
     *
     * @description edit payments details in Tariff
     *
     * @param {number} payment_details_id
     * @param {ISwaggerTariffDetailsEdit} body - Contains Json with values
     *
     * @returns {IPaymentDetails} [code 200] Successfully updated
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editTarifDetails(payment_details_id:number, body:ISwaggerTariffDetailsEdit):Promise<IPaymentDetails> {
        return this.requestRestPath("PUT", `/product/tarif/details/${payment_details_id}`, body, [200]);
    }

    /**
     * @name editTarifGeneral
     * @summary edit Tariff general details
     * @operationId edit_general_product_details
     * @tags Price & Invoice & Tariffs
     *
     * @description edit basic details on user Tariff
     *
     * @param {number} product_id
     * @param {ISwaggerTariffGeneralEdit} body - Contains Json with values
     *
     * @returns {IProduct} [code 200] Successfully updated
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editTarifGeneral(product_id:number, body:ISwaggerTariffGeneralEdit):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/tarif/general/${product_id}`, body, [200]);
    }

    /**
     * @name editTypeOfBlock
     * @summary edit Type of Block
     * @operationId editTypeOfBlock
     * @tags Type-of-Block
     *
     * @description edit Type of block object
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     * @param {ITypeOfBlockNew} body - Contains Json with values
     *
     * @returns {ITypeOfBlock} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editTypeOfBlock(type_of_block_id:string, body:ITypeOfBlockNew):Promise<ITypeOfBlock> {
        return this.requestRestPath("PUT", `/project/typeOfBlock/${type_of_block_id}`, body, [200]);
    }

    /**
     * @name editTypeOfBoard
     * @summary edit TypeOfBoard
     * @operationId edit_TypeOfBoard
     * @tags Type-Of-Board
     *
     * @description if you want edit base TypeOfBoard information
     *
     * @param {string} type_of_board_id
     * @param {ITypeOfBoardNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoard} [code 200] Ok Result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editTypeOfBoard(type_of_board_id:string, body:ITypeOfBoardNew):Promise<ITypeOfBoard> {
        return this.requestRestPath("PUT", `/compilation/typeOfBoard/${type_of_board_id}`, body, [200]);
    }

    /**
     * @name getAllBlockoBlockVersions
     * @summary get all BlockoBlock version
     * @operationId get_BlockoBlock_all_versions
     * @tags Blocko-Block
     *
     * @description get all versions (content) from independent BlockoBlock
     *
     * @param {string} blocko_block_id
     * @param {IBlockoBlockBlockoVersionNew} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion[]} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllBlockoBlockVersions(blocko_block_id:string, body:IBlockoBlockBlockoVersionNew):Promise<IBlockoBlockVersion[]> {
        return this.requestRestPath("GET", `/project/blockoBlock/version/all/${blocko_block_id}`, body, [200]);
    }

    /**
     * @name getAllBlockoServers
     * @summary get all Blocko Servers
     * @operationId get_All_Blocko_Server
     * @tags External Server
     *
     * @description get all Blocko Servers
     *
     *
     * @returns {ICloudHomerServer} [code 200] Ok Result
     *
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllBlockoServers():Promise<ICloudHomerServer> {
        return this.requestRestPath("GET", `/project/blocko/server`, {}, [200]);
    }

    /**
     * @name getAllBoardDetails
     * @summary get Boards details for integration to Blocko program
     * @operationId board_all_details_for_blocko
     * @tags Blocko, B_Program
     *
     * @description get all boards that user can integrate to Blocko program
     *
     * @param {string} project_id
     *
     * @returns {IBoardsForBlocko} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllBoardDetails(project_id:string):Promise<IBoardsForBlocko> {
        return this.requestRestPath("GET", `/project/board/all_details/${project_id}`, {}, [200]);
    }

    /**
     * @name getAllCompilationServers
     * @summary get all Compilation Servers
     * @operationId get_All_Compilation_Server
     * @tags External Server
     *
     * @description get Compilation Servers
     *
     *
     * @returns {ICloudCompilationServer} [code 200] Ok Result
     *
     * @throws [code 500] Server side Error
     */
    public getAllCompilationServers():Promise<ICloudCompilationServer> {
        return this.requestRestPath("GET", `/compilation/server`, {}, [200]);
    }

    /**
     * @name getAllConnections
     * @summary get logged connections
     * @operationId get_Person_Connections
     * @tags Person
     *
     * @description get all connections, where user is logged
     *
     *
     * @returns {IFloatingPersonToken[]} [code 200] Its possible used that
     *
     * @throws {IObjectNotFound} [code 400] Not Found object
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllConnections():Promise<IFloatingPersonToken[]> {
        return this.requestRestPath("GET", `/coreClient/connections`, {}, [200]);
    }

    /**
     * @name getAllFinanceSummaries
     * @summary get all Financial Summary for logged User
     * @operationId get_financial_summary
     * @tags Price & Invoice & Tariffs
     *
     * @description get all Financial Summary for logged User
     *
     *
     * @returns {IFinancialSummary} [code 200] Successfully updated
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllFinanceSummaries():Promise<IFinancialSummary> {
        return this.requestRestPath("GET", `/product/finance/summary`, {}, [200]);
    }

    /**
     * @name getAllMPrograms
     * @summary get all M_Program b yLogged Person
     * @operationId get_M_Program_all_forMobile
     * @tags APP-Api
     *
     * @description get list of M_Programs by logged Person
     *
     *
     * @returns {IMProgram[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllMPrograms():Promise<IMProgram[]> {
        return this.requestRestPath("GET", `/grid/m_program/app/m_programs`, {}, [200]);
    }

    /**
     * @name getAllMProjects
     * @summary get all M_Project by Logged Person
     * @operationId get_M_Projects_ByLoggedPerson
     * @tags M_Program
     *
     * @description get List<M_Project> by logged person ->that's required valid token in html head
     *
     *
     * @returns {IMProject[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllMProjects():Promise<IMProject[]> {
        return this.requestRestPath("GET", `/grid/m_project/person`, {}, [200]);
    }

    /**
     * @name getAllOverflowTypeOfConfirms
     * @summary get Type of Confirms
     * @operationId get_TypeOfConfirms_all
     * @tags Blocko-OverFlow, Type-Of-Confirms
     *
     * @description get  type of Confirms. Its only for Blocko-OverFlow Administrators!
     *
     *
     * @returns {ITypeOfConfirms[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllOverflowTypeOfConfirms():Promise<ITypeOfConfirms[]> {
        return this.requestRestPath("GET", `/overflow/typeOfConfirm/all`, {}, [200]);
    }

    /**
     * @name getAllOverflowTypeOfPosts
     * @summary get all Type of Post
     * @operationId get_TypeOfPost_all
     * @tags Blocko-OverFlow, Type-Of-Post
     *
     * @description get All Type of Post. (Its for all logged users)
     *
     *
     * @returns {ITypeOfPost[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public getAllOverflowTypeOfPosts():Promise<ITypeOfPost[]> {
        return this.requestRestPath("GET", `/overflow/typeOfPost/all`, {}, [200]);
    }

    /**
     * @name getAllPersons
     * @summary get all Person
     * @operationId get_Person_all
     * @tags Person
     *
     * @description get all Persons
     *
     *
     * @returns {IPerson[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllPersons():Promise<IPerson[]> {
        return this.requestRestPath("GET", `/coreClient/person/person/all`, {}, [200]);
    }

    /**
     * @name getAllProcessors
     * @summary get all Processors
     * @operationId get_Processor_All
     * @tags Processor
     *
     * @description If you want get Processor by query processor_id.
     *
     *
     * @returns {IProcessor[]} [code 200] Ok Result
     *
     * @throws [code 500] Server side Error
     */
    public getAllProcessors():Promise<IProcessor[]> {
        return this.requestRestPath("GET", `/compilation/processor`, {}, [200]);
    }

    /**
     * @name getAllProducers
     * @summary get all Producers
     * @operationId get_Producers
     * @tags Producer
     *
     * @description if you want get list of Producers. Its list of companies owned physical boards and we used that for filtering
     *
     *
     * @returns {IProducer[]} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllProducers():Promise<IProducer[]> {
        return this.requestRestPath("GET", `/compilation/producer/all`, {}, [200]);
    }

    /**
     * @name getAllProjects
     * @summary get Project by logged Person
     * @operationId getProjectsByUserAccount
     * @tags Project
     *
     * @description get all Projects by logged Person
     *
     *
     * @returns {IProject[]} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllProjects():Promise<IProject[]> {
        return this.requestRestPath("GET", `/project/project`, {}, [200]);
    }

    /**
     * @name getAllScreenTypes
     * @summary get all ScreenType
     * @operationId get_Screen_Size_Type_Combination
     * @tags Screen_Size_Type
     *
     * @description get all ScreenType. Private_types areon every Persons projects
     *
     *
     * @returns {IScreenSizeTypeCombination} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllScreenTypes():Promise<IScreenSizeTypeCombination> {
        return this.requestRestPath("GET", `/grid/screen_type/all`, {}, [200]);
    }

    /**
     * @name getAllSecurePermissions
     * @summary get all system Permissions
     * @operationId get_Permission_All
     * @tags Permission
     *
     * @description Get all user Permission. You need permission for that or have right system Roles
     *
     *
     * @returns {IPersonPermission[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllSecurePermissions():Promise<IPersonPermission[]> {
        return this.requestRestPath("GET", `/secure/permission/all`, {}, [200]);
    }

    /**
     * @name getAllSecureRoles
     * @summary get all Role from system
     * @operationId get_Role_All
     * @tags Role
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     *
     * @returns {ISecurityRole[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllSecureRoles():Promise<ISecurityRole[]> {
        return this.requestRestPath("GET", `/secure/role/all`, {}, [200]);
    }

    /**
     * @name getAllTarifsForRegistrations
     * @summary get all Product Tariffs
     * @operationId get_poducts_tariffs
     * @tags Price & Invoice & Tariffs
     *
     * @description get all Tariffs - required for every else action in system. For example: Project is created under the Product tariff
     *
     *
     * @returns {ITariff[]} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllTarifsForRegistrations():Promise<ITariff[]> {
        return this.requestRestPath("GET", `/product/tarifs/for_registration`, {}, [200]);
    }

    /**
     * @name getAllTarifsUserApplicables
     * @summary get all the products that the User can use
     * @operationId get_applicable_products_for_creating_new_project
     * @tags Price & Invoice & Tariffs
     *
     * @description get all the products that the user can use when creating new projects
     *
     *
     * @returns {IApplicableProduct[]} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllTarifsUserApplicables():Promise<IApplicableProduct[]> {
        return this.requestRestPath("GET", `/product/tarifs/user_applicable`, {}, [200]);
    }

    /**
     * @name getAllTypeOfBlocks
     * @summary get all Type of Block list
     * @operationId getAllTypeOfBlocks
     * @tags Type-of-Block
     *
     * @description delete group for BlockoBlocks -> Type of block
     *
     *
     * @returns {ITypeOfBlock[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllTypeOfBlocks():Promise<ITypeOfBlock[]> {
        return this.requestRestPath("GET", `/project/typeOfBlock`, {}, [200]);
    }

    /**
     * @name getAllTypeOfBoards
     * @summary get list of all TypeOfBoard
     * @operationId get_TypeOfBoard_all
     * @tags Type-Of-Board
     *
     * @description if you want get all TypeOfBoard objects
     *
     *
     * @returns {ITypeOfBoard[]} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllTypeOfBoards():Promise<ITypeOfBoard[]> {
        return this.requestRestPath("GET", `/compilation/typeOfBoard/all`, {}, [200]);
    }

    /**
     * @name getAllUnconfirmedNotifications
     * @summary get unconfirmed notifications
     * @operationId get_unconfirmed_notifications
     * @tags Notifications
     *
     * @description This API should by called right after user logs in. Sends notifications which require confirmation via websocket.
     *
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public getAllUnconfirmedNotifications():Promise<IResultOk> {
        return this.requestRestPath("GET", `/notification/unconfirmed`, {}, [200]);
    }

    /**
     * @name getBProgram
     * @summary get B Program
     * @operationId get_b_Program
     * @tags B_Program
     *
     * @description get B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBProgram(b_program_id:string):Promise<IBProgram> {
        return this.requestRestPath("GET", `/project/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name getBProgramInstanceListOfHomersWaitingForUpload
     * @operationId listOfHomersWaitingForUpload
     * @tags Not Documented API - InProgress or Stuck
     *
     * @param {string} id
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public getBProgramInstanceListOfHomersWaitingForUpload(id:string):Promise<IResult> {
        return this.requestRestPath("GET", `/project/b_program/instance/listOfHomersWaitingForUpload/${id}`, {}, [200]);
    }

    /**
     * @name getBProgramInstanceListOfUploadedHomers
     * @operationId listOfUploadedHomers
     * @tags Not Documented API - InProgress or Stuck
     *
     * @param {string} id
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public getBProgramInstanceListOfUploadedHomers(id:string):Promise<IResult> {
        return this.requestRestPath("GET", `/project/b_program/instance/listOfUploadedHomers/${id}`, {}, [200]);
    }

    /**
     * @name getBProgramVersion
     * @summary get B Program version
     * @operationId get_b_Program_version
     * @tags B_Program
     *
     * @description get B_Program version object
     *
     * @param {string} version_id - version_id String path
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBProgramVersion(version_id:string):Promise<IBProgram> {
        return this.requestRestPath("GET", `/project/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name getBlockoBlock
     * @summary get BlockoBlock
     * @operationId getBlockoBlock
     * @tags Blocko-Block
     *
     * @description get independent BlockoBlock object
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     *
     * @returns {IBlockoBlock} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBlockoBlock(blocko_block_id:string):Promise<IBlockoBlock> {
        return this.requestRestPath("GET", `/project/blockoBlock/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name getBlockoBlockVersion
     * @summary get version of the BlockoBlock
     * @operationId get_BlockoBlock_Version
     * @tags Blocko-Block
     *
     * @description get version (content) from independent BlockoBlock
     *
     * @param {string} blocko_block_version_id
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBlockoBlockVersion(blocko_block_version_id:string):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("GET", `/project/blockoBlock/version/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name getBoard
     * @summary get Board
     * @operationId get_Board
     * @tags Board
     *
     * @description if you want get Board object by query = board_id. User can get only boards from project, whitch user owning or user need Permission key "Board_rea".
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBoard(board_id:string):Promise<IBoard> {
        return this.requestRestPath("GET", `/compilation/board/${board_id}`, {}, [200]);
    }

    /**
     * @name getCProgram
     * @summary get C_program
     * @operationId get_C_Program
     * @tags C_Program
     *
     * @description get C_program by query = c_program_id
     *
     * @param {string} c_program_id - c_program_id String query
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getCProgram(c_program_id:string):Promise<ICProgram> {
        return this.requestRestPath("GET", `/compilation/c_program/c_program/${c_program_id}`, {}, [200]);
    }

    /**
     * @name getCProgramVersion
     * @summary get C_program Version
     * @operationId get_C_Program_Version
     * @tags C_Program
     *
     * @description get Version of C_program by query = verison_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ICProgramVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getCProgramVersion(version_id:string):Promise<ICProgramVersion> {
        return this.requestRestPath("GET", `/compilation/c_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name getHomer
     * @summary remove Homer
     * @operationId getHomer
     * @tags Homer
     *
     * @description remove Homer
     *
     * @param {string} homer_id - b_program_id String path
     *
     * @returns {IPrivateHomerServer} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getHomer(homer_id:string):Promise<IPrivateHomerServer> {
        return this.requestRestPath("GET", `/project/homer/${homer_id}`, {}, [200]);
    }

    /**
     * @name getInvoicePay
     * @summary reimbursement of an unpaid invoice
     * @operationId pay_send_invoice
     * @tags Price & Invoice & Tariffs
     *
     * @description reimbursement of an unpaid invoice - with settings from creating product before
     *
     * @param {number} invoice_id
     *
     * @returns {IGoPayUrl} [code 200] Ok Result- payment is required
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getInvoicePay(invoice_id:number):Promise<IGoPayUrl> {
        return this.requestRestPath("GET", `/product/invoice/pay/${invoice_id}`, {}, [200]);
    }

    /**
     * @name getLibrary
     * @summary get SingleLibrary
     * @operationId get_SingleLibrary
     * @tags SingleLibrary
     *
     * @description if you want get SingleLibrary by query = library_id
     *
     * @param {string} library_id - library_id String query
     *
     * @returns {ISingleLibrary} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getLibrary(library_id:string):Promise<ISingleLibrary> {
        return this.requestRestPath("GET", `/compilation/library/${library_id}`, {}, [200]);
    }

    /**
     * @name getLibraryGroup
     * @summary get LibraryGroup
     * @operationId get_LibraryGroup
     * @tags LibraryGroup
     *
     * @description If you want get LibraryGroup by query = libraryGroup_id
     *
     * @param {string} libraryGroup_id - libraryGroup_id String query
     *
     * @returns {ILibraryGroup} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getLibraryGroup(libraryGroup_id:string):Promise<ILibraryGroup> {
        return this.requestRestPath("GET", `/compilation/libraryGroup/${libraryGroup_id}`, {}, [200]);
    }

    /**
     * @name getLibraryGroupVersion
     * @summary get version from LibraryGroup
     * @operationId get_LibraryGroup_Version
     * @tags LibraryGroup
     *
     * @description get version from LibraryGroup
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IVersionObject} [code 200] Ok result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws [code 500] Server side Error
     */
    public getLibraryGroupVersion(version_id:string):Promise<IVersionObject> {
        return this.requestRestPath("GET", `/compilation/libraryGroup/version/${version_id}`, {}, [200]);
    }

    /**
     * @name getLibraryGroupVersionLibraries
     * @summary get Libraries from LibraryGroup Version
     * @operationId get_LibraryGroup_Version_Libraries
     * @tags LibraryGroup
     *
     * @description If you want get Libraries from LibraryGroup.Version by query = version_id
     *
     * @param {string} version_id
     *
     * @returns {IVersionObject} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getLibraryGroupVersionLibraries(version_id:string):Promise<IVersionObject> {
        return this.requestRestPath("GET", `/file/listOfFiles/${version_id}`, {}, [200]);
    }

    /**
     * @name getLoggedInPerson
     * @summary get Person by token (after Oauth2 Login -> Facebook, GitHub, Twitter)
     * @operationId getPersonByToken
     * @tags Access, Person, Social-GitHub, Social-Facebook
     *
     * @description If you want login to system with social networks - you can used facebook, github or twitter api just ask for token, server responds with object where is token and redirection link. Redirect user to this link and after returning to success page that you filled in ask for token, ask again to this api and server respond with Person Object and with Roles and Permissions lists
     *
     *
     * @returns {ILoginResult} [code 200] Successfully logged
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public getLoggedInPerson():Promise<ILoginResult> {
        return this.requestRestPath("GET", `/login/person`, {}, [200]);
    }

    /**
     * @name getMProgram
     * @summary get M_Program
     * @operationId get_M_Program
     * @tags M_Program
     *
     * @description get M_Program by quarry m_program_id
     *
     * @param {string} m_progrm_id - m_program_id String query
     *
     * @returns {IMProgram} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProgram(m_progrm_id:string):Promise<IMProgram> {
        return this.requestRestPath("GET", `/grid/m_program/${m_progrm_id}`, {}, [200]);
    }

    /**
     * @name getMProgramAppToken
     * @summary get M_Program by generated token
     * @operationId get_M_Program_byQR_Token_forMobile
     * @tags APP-Api
     *
     * @description get M_Program by token
     *
     * @param {string} qr_token - qr_token String query
     *
     * @returns {IMProgram} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProgramAppToken(qr_token:string):Promise<IMProgram> {
        return this.requestRestPath("GET", `/grid/m_program/app/token/${qr_token}`, {}, [200]);
    }

    /**
     * @name getMProject
     * @summary get M_Project
     * @operationId get_M_Project
     * @tags M_Program
     *
     * @description get M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProject(m_project_id:string):Promise<IMProject> {
        return this.requestRestPath("GET", `/grid/m_project/${m_project_id}`, {}, [200]);
    }

    /**
     * @name getNotificationTest
     * @summary try notifications
     * @operationId test_notifications
     * @tags Notifications
     *
     * @description This API you can use for testing our notification. Second parameter 'level' is used for setting notification level (allowable values = info, success, warning, error, question.
     *
     * @param {string} email
     * @param {string} level
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public getNotificationTest(email:string, level:string):Promise<IResultOk> {
        return this.requestRestPath("GET", `/notification/test/${email}/${level}`, {}, [200]);
    }

    /**
     * @name getOverflowPost
     * @summary get Post
     * @operationId get_Post
     * @tags Blocko-OverFlow, Post
     *
     * @description create new Project
     *
     * @param {string} post_id - post_id String path
     *
     * @returns {IPost} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws [code 500] Server side Error
     */
    public getOverflowPost(post_id:string):Promise<IPost> {
        return this.requestRestPath("GET", `/overflow/post/${post_id}`, {}, [200]);
    }

    /**
     * @name getOverflowTypeOfConfirm
     * @summary get Type of Confirms
     * @operationId get_TypeOfConfirms
     * @tags Blocko-OverFlow, Type-Of-Confirms
     *
     * @description get  type of Confirms. Its only for Blocko-OverFlow Administrators!
     *
     * @param {string} type_of_confirm_id - type_of_confirm_id String path
     *
     * @returns {ITypeOfConfirms} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getOverflowTypeOfConfirm(type_of_confirm_id:string):Promise<ITypeOfConfirms> {
        return this.requestRestPath("GET", `/overflow/typeOfConfirm/${type_of_confirm_id}`, {}, [200]);
    }

    /**
     * @name getOverflowTypeOfPost
     * @summary get Type of Post
     * @operationId get_TypeOfPost
     * @tags Blocko-OverFlow, Type-Of-Post
     *
     * @description get Type of Post by path id. (Its for all logged users)
     *
     * @param {string} type_of_post_id - type_of_post_id String path
     *
     * @returns {ITypeOfPost} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public getOverflowTypeOfPost(type_of_post_id:string):Promise<ITypeOfPost> {
        return this.requestRestPath("GET", `/overflow/typeOfPost/${type_of_post_id}`, {}, [200]);
    }

    /**
     * @name getPerson
     * @summary get Person
     * @operationId get_Person
     * @tags Person
     *
     * @description get Person by id
     *
     * @param {string} person_id - person_id String query
     *
     * @returns {IPerson} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getPerson(person_id:string):Promise<IPerson> {
        return this.requestRestPath("GET", `/coreClient/person/person/${person_id}`, {}, [200]);
    }

    /**
     * @name getProcessor
     * @summary get Processor
     * @operationId get_Processor
     * @tags Processor
     *
     * @description If you get Processor by query processor_id.
     *
     * @param {string} processor_id - processor_id String query
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws [code 500] Server side Error
     */
    public getProcessor(processor_id:string):Promise<IProcessor> {
        return this.requestRestPath("GET", `/compilation/processor/${processor_id}`, {}, [200]);
    }

    /**
     * @name getProducer
     * @summary get Producer
     * @operationId get_Producer
     * @tags Producer
     *
     * @description if you want get Producer. Its company owned physical boards and we used that for filtering
     *
     * @param {string} producer_id
     *
     * @returns {IProducer} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getProducer(producer_id:string):Promise<IProducer> {
        return this.requestRestPath("GET", `/compilation/producer/${producer_id}`, {}, [200]);
    }

    /**
     * @name getProject
     * @summary get Project
     * @operationId getProject
     * @tags Project
     *
     * @description get Projects by project_id
     *
     * @param {string} project_id - project_id String path
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getProject(project_id:string):Promise<IProject> {
        return this.requestRestPath("GET", `/project/project/${project_id}`, {}, [200]);
    }

    /**
     * @name getProjectActualizationProcedure
     * @summary get actualization Procedure
     * @operationId get_Actualization_Procedure
     * @tags Actualization
     *
     * @description get all versions (content) from independent BlockoBlock
     *
     * @param {string} actualization_procedure_id
     *
     * @returns {IActualizationProcedure} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getProjectActualizationProcedure(actualization_procedure_id:string):Promise<IActualizationProcedure> {
        return this.requestRestPath("GET", `/project/actualization_procedure/${actualization_procedure_id}`, {}, [200]);
    }

    /**
     * @name getScreenType
     * @summary get ScreenType
     * @operationId get_Screen_Size_Type
     * @tags Screen_Size_Type
     *
     * @description get ScreenType. If you want get private ScreenType you have to owned that. Public are without person_permissions
     *
     * @param {string} screen_size_type_id - screen_size_type_id String query
     *
     * @returns {IScreenSizeType} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getScreenType(screen_size_type_id:string):Promise<IScreenSizeType> {
        return this.requestRestPath("GET", `/grid/screen_type/${screen_size_type_id}`, {}, [200]);
    }

    /**
     * @name getSecurePersonSystemAcces
     * @summary get all system person_permissions & Roles
     * @operationId get_System_Acces
     * @tags Role, Permission, Person
     *
     * @description This api return List of Roles and List of Permission
     *
     * @param {string} person_id
     *
     * @returns {ISystemAccess} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getSecurePersonSystemAcces(person_id:string):Promise<ISystemAccess> {
        return this.requestRestPath("GET", `/secure/person/system_acces/${person_id}`, {}, [200]);
    }

    /**
     * @name getTypeOfBlock
     * @summary get TypeOfBlock 
     * @operationId get_TypeOfBlock
     * @tags Type-of-Block
     *
     * @description get BlockoBlock 
     *
     * @param {string} type_of_block_id
     *
     * @returns {ITypeOfBlock} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getTypeOfBlock(type_of_block_id:string):Promise<ITypeOfBlock> {
        return this.requestRestPath("GET", `/project/typeOfBlock/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name getTypeOfBoard
     * @summary get TypeOfBoard
     * @operationId get_TypeOfBoard
     * @tags Type-Of-Board
     *
     * @description if you want get TypeOfBoard object by query = type_of_board_id
     *
     * @param {string} type_of_board_id
     *
     * @returns {ITypeOfBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getTypeOfBoard(type_of_board_id:string):Promise<ITypeOfBoard> {
        return this.requestRestPath("GET", `/compilation/typeOfBoard/${type_of_board_id}`, {}, [200]);
    }

    /**
     * @name getWebsocketAccessToken
     * @summary get temporary Connection Token
     * @operationId get_Websocket_token
     * @tags Access, WebSocket
     *
     * @description for connection to websocket, you have to connect with temporary unique token. This Api return 
     *
     *
     * @returns {IWebSocketToken} [code 200] Token succesfuly generated
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public getWebsocketAccessToken():Promise<IWebSocketToken> {
        return this.requestRestPath("GET", `/websocket/access_token`, {}, [200]);
    }

    /**
     * @name listBPrograms
     * @summary get B_Program by Filter
     * @operationId get_b_Program_by_Filter
     * @tags B_Program
     *
     * @description get B_Program List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBProgramFilter} body - Contains Json with values
     *
     * @returns {IBProgramList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listBPrograms(page_number:number, body:IBProgramFilter):Promise<IBProgramList> {
        return this.requestRestPath("PUT", `/project/b_program/list/${page_number}`, body, [200]);
    }

    /**
     * @name listBlockoBlocks
     * @summary get BlockoBlock by Filter
     * @operationId get_BlockoBlock_by_Filter
     * @tags Blocko-Block
     *
     * @description get BlockoBlock List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBlockoBlockFilter} body - Contains Json with values
     *
     * @returns {IBlockoBlockList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listBlockoBlocks(page_number:number, body:IBlockoBlockFilter):Promise<IBlockoBlockList> {
        return this.requestRestPath("PUT", `/project/blockoBlock/list/${page_number}`, body, [200]);
    }

    /**
     * @name listBoards
     * @summary get Boards with filter parameters
     * @operationId get_Board_Filter
     * @tags Board
     *
     * @description Get List of boards. Acording by permission - system return only hardware from project, where is user owner or all boards if user have static Permission key
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...n. For first call, use 1
     * @param {IBoardFilter} body - Contains Json with values
     *
     * @returns {IBoardList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public listBoards(page_number:number, body:IBoardFilter):Promise<IBoardList> {
        return this.requestRestPath("PUT", `/compilation/board/filter/${page_number}`, body, [200]);
    }

    /**
     * @name listCPrograms
     * @summary get C_program List
     * @operationId get_C_Program_by_Filter
     * @tags C_Program
     *
     * @description get all C_Programs that belong to logged person
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {ICProgramFilter} body - Contains Json with values
     *
     * @returns {ICProgramList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listCPrograms(page_number:number, body:ICProgramFilter):Promise<ICProgramList> {
        return this.requestRestPath("PUT", `/compilation/c_program/list/${page_number}`, body, [200]);
    }

    /**
     * @name listHomers
     * @summary get Homers with Filters parameters
     * @operationId get_Homers_by_Filter
     * @tags Homer
     *
     * @description If you want get all or only some Homers you can use filter parameters in Json. But EveryTime server return maximal 25 objects 
     *    
     *    so, you have to used that limit for frontend pagination -> first round (0,25), second round (26, 50) etc... in Json we help you with pages list 
     *     
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IHomerFilter} body - Contains Json with values
     *
     * @returns {IHomerList} [code 200] Ok result
     *
     * @throws [code 500] Server side Error
     */
    public listHomers(page_number:number, body:IHomerFilter):Promise<IHomerList> {
        return this.requestRestPath("PUT", `/project/homer/filter/${page_number}`, body, [200]);
    }

    /**
     * @name listLibraries
     * @summary get Library with Filters parameters
     * @operationId get_SingleLibrary_Filter
     * @tags SingleLibrary
     *
     * @description If you want get all or only some SingleLibraries you can use filter parameters in Json. But EveryTime i will return maximal 25 objects 
     *    
     *    so, you have to used that limit for frontend pagination -> first round (0,25), second round (26, 50) etc... I will give you alsoinformation how many results you can show 
     *     
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n For first call, use 1
     * @param {ISingleLibraryFilter} body - Contains Json with values
     *
     * @returns {ISingleLibraryList} [code 200] Ok result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public listLibraries(page_number:number, body:ISingleLibraryFilter):Promise<ISingleLibraryList> {
        return this.requestRestPath("PUT", `/compilation/library/filter/${page_number}`, body, [200]);
    }

    /**
     * @name listLibraryGroups
     * @summary get LibraryGroup with Filters parameters
     * @operationId get_LibraryGroup_Filter
     * @tags LibraryGroup
     *
     * @description If you want get all or only some LibraryGroups you can use filter parameters in Json. But EveryTime server will return maximal 25 objects 
     *    
     *    so, you have to used that limit for frontend pagination -> first round (0,25), second round (26, 50) etc... in Json we help you with pages list 
     *     
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n For first call, use 1 (first page of list) 
     * @param {ILibraryGroupFilter} body - Contains Json with values
     *
     * @returns {ILibraryGroupList} [code 200] Ok result
     *
     * @throws [code 500] Server side Error
     */
    public listLibraryGroups(page_number:number, body:ILibraryGroupFilter):Promise<ILibraryGroupList> {
        return this.requestRestPath("PUT", `/compilation/libraryGroup/filter/${page_number}`, body, [200]);
    }

    /**
     * @name listNotifications
     * @summary get latest notification
     * @operationId get_notification_page
     * @tags Notifications
     *
     * @description Get list of latest user notifications. Server return maximum 25 latest objects. 
     *    
     *     For get another page (next 25 notifications) call this api with "page_number" path parameter. 
     *    
     *     May missing or you can insert Integer values from page[1,2...,n] in JsonNotification body cannot by documented through swagger. Visit documentation.byzance.cz
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...  For first call, use 1
     *
     * @returns {INotificationList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listNotifications(page_number:number):Promise<INotificationList> {
        return this.requestRestPath("GET", `/notification/list/${page_number}`, {}, [200]);
    }

    /**
     * @name listOverflows
     * @summary get Posts by Filter
     * @operationId get_Post_ByFilter
     * @tags Blocko-OverFlow, Post
     *
     * @description get Post by Filter parameters in JSON. 
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...n. For first call, use 1
     * @param {IPostNew} body - Contains Json with values
     *
     * @returns {IPostList} [code 200] Ok Result
     *
     * @throws [code 500] Server side Error
     */
    public listOverflows(page_number:number, body:IPostNew):Promise<IPostList> {
        return this.requestRestPath("POST", `/overflow/filter/${page_number}`, body, [200]);
    }

    /**
     * @name listTypeOfBlocks
     * @summary get TypeOfBlock by Filter
     * @operationId get_TypeOfBlock_by_Filter
     * @tags Type-of-Block
     *
     * @description get TypeOfBlock List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {ITypeOfBlockFilter} body - Contains Json with values
     *
     * @returns {ITypeOfBlockList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listTypeOfBlocks(page_number:number, body:ITypeOfBlockFilter):Promise<ITypeOfBlockList> {
        return this.requestRestPath("PUT", `/project/typeOfBlock/list/${page_number}`, body, [200]);
    }

    /**
     * @name markNotificationRead
     * @summary mark notifications as read
     * @operationId mark_as_read_notification
     * @tags Notifications
     *
     * @description Mark notifications as read. Send list with ids
     *
     * @param {INotificationRead} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Delete Successful
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public markNotificationRead(body:INotificationRead):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/notification/read`, body, [200]);
    }

    /**
     * @name putInvoiceSendRemainder
     * @operationId send_remainder_to_custumer
     * @tags Not Documented API - InProgress or Stuck
     *
     * @param {number} invoice_id
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public putInvoiceSendRemainder(invoice_id:number):Promise<IResult> {
        return this.requestRestPath("PUT", `/product/invoice/send_remainder/${invoice_id}`, {}, [200]);
    }

    /**
     * @name putInvoiceSetPay
     * @operationId set_invoice_as_Paid
     * @tags Not Documented API - InProgress or Stuck
     *
     * @param {number} invoice_id
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public putInvoiceSetPay(invoice_id:number):Promise<IResult> {
        return this.requestRestPath("PUT", `/product/invoice/set_pay/${invoice_id}`, {}, [200]);
    }

    /**
     * @name putPersonRemovePicture
     * @summary remove Person picture
     * @operationId removePersonPicture
     * @tags Person
     *
     * @description Removes picture of logged person
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public putPersonRemovePicture():Promise<IResultOk> {
        return this.requestRestPath("PUT", `/coreClient/person/removePicture`, {}, [200]);
    }

    /**
     * @name putPersonUploadPicture
     * @summary upload Person picture
     * @operationId uploadPersonPicture
     * @tags Person
     *
     * @description Uploads personal photo. Picture must be smaller than 500 KB and its dimensions must be between 50 and 400 pixels. If user already has a picture, it will be replaced by the new one. API requires 'multipart/form-data' Content-Type, name of the property is 'file'.
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public putPersonUploadPicture():Promise<IResultOk> {
        return this.requestRestPath("PUT", `/coreClient/person/uploadPicture`, {}, [200]);
    }

    /**
     * @name putSecureRolePerson
     * @summary add Person to Role (Group) 
     * @operationId add_Role_Person
     * @tags Role, Person
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     * @param {string} mail
     * @param {string} role_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putSecureRolePerson(mail:string, role_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/secure/role/person/${mail}/${role_id}`, {}, [200]);
    }

    /**
     * @name recoveryMailPersonPassword
     * @summary send password recovery email
     * @operationId sendPasswordRecoveryEmail
     * @tags Access
     *
     * @description sends email with link for changing forgotten password
     *
     * @param {IPersonPasswordRecoveryEmail} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws [code 500] Server side Error
     */
    public recoveryMailPersonPassword(body:IPersonPasswordRecoveryEmail):Promise<IResultOk> {
        return this.requestRestPath("POST", `/coreClient/mail_person_password_recovery`, body, [200]);
    }

    /**
     * @name recoveryPersonPassword
     * @summary change person password
     * @operationId personPasswordRecovery
     * @tags Access
     *
     * @description changes password if password_recovery_token is not older than 24 hours, deletes all FloatingPersonTokens
     *
     * @param {IPersonPasswordNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws [code 500] Server side Error
     */
    public recoveryPersonPassword(body:IPersonPasswordNew):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/coreClient/person_password_recovery`, body, [200]);
    }

    /**
     * @name setOverflowHashTag
     * @summary add HashTag to Post
     * @operationId add_HashTag_to_Post
     * @tags Blocko-OverFlow, Post
     *
     * @description add HashTag to post
     *
     * @param {string} post_id - post_id String path
     * @param {string} hashTag - hash_tag String path
     *
     * @returns {IPost} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public setOverflowHashTag(post_id:string, hashTag:string):Promise<IPost> {
        return this.requestRestPath("PUT", `/overflow/hashTag/${post_id}/${hashTag}`, {}, [200]);
    }

    /**
     * @name setOverflowTypeOfConfirm
     * @summary set Type of Confirms to Post
     * @operationId set_TypeOfConfirm_to_Post
     * @tags Blocko-OverFlow, Type-Of-Confirms, Post
     *
     * @description set type of Confirms to post. Its allowed only for system or Blocko-OverFlow Administrators
     *
     * @param {string} post_id - post_id String path
     * @param {string} type_of_confirm_id - type_of_confirm_id String path
     *
     * @returns {IPost} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public setOverflowTypeOfConfirm(post_id:string, type_of_confirm_id:string):Promise<IPost> {
        return this.requestRestPath("PUT", `/overflow/typeOfConfirm/${post_id}/${type_of_confirm_id}`, {}, [200]);
    }

    /**
     * @name shareProject
     * @summary share Project with Users
     * @operationId shareProjectWithUsers
     * @tags Project
     *
     * @description sends Invitation to all users in list: List<persons_mail>
     *
     * @param {string} project_id - project_id String path
     * @param {IShareProjectPerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public shareProject(project_id:string, body:IShareProjectPerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/project/shareProject/${project_id}`, body, [200]);
    }

    /**
     * @name touchOverflowLikeMinus
     * @summary like minus on Post
     * @operationId likeMinus
     * @tags Blocko-OverFlow, Post
     *
     * @description touch like minus - And user can do that only once! 
     *
     * @param {string} post_id - post_id String path
     *
     * @returns {ITypeOfConfirms} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public touchOverflowLikeMinus(post_id:string):Promise<ITypeOfConfirms> {
        return this.requestRestPath("PUT", `/overflow/likeMinus/${post_id}`, {}, [200]);
    }

    /**
     * @name touchOverflowLikePlus
     * @summary like plus on Post
     * @operationId likePlus
     * @tags Blocko-OverFlow, Post
     *
     * @description touch like plus - And user can do that only once! 
     *
     * @param {string} post_id - post_id String path
     *
     * @returns {ITypeOfConfirms} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public touchOverflowLikePlus(post_id:string):Promise<ITypeOfConfirms> {
        return this.requestRestPath("PUT", `/overflow/likePlus/${post_id}`, {}, [200]);
    }

    /**
     * @name unsetOverflowHashTag
     * @summary remove HashTag from Post
     * @operationId remove_HashTag_from_Post
     * @tags Blocko-OverFlow, Post
     *
     * @description remove HashTag to post
     *
     * @param {string} post_id - post_id String path
     * @param {string} hashTag - hash_tag String path
     *
     * @returns {IPost} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public unsetOverflowHashTag(post_id:string, hashTag:string):Promise<IPost> {
        return this.requestRestPath("DELETE", `/overflow/hashTag/${post_id}/${hashTag}`, {}, [200]);
    }

    /**
     * @name unsetOverflowTypeOfConfirm
     * @summary remove Type of Confirms from Post
     * @operationId remove_TypeOfConfirm_to_Post
     * @tags Blocko-OverFlow, Type-Of-Confirms, Post
     *
     * @description set type of Confirms to post. Its allowed only for system or Blocko-OverFlow Administrators
     *
     * @param {string} post_id - post_id String path
     * @param {string} type_of_confirm_id - type_of_confirm_id String path
     *
     * @returns {IPost} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public unsetOverflowTypeOfConfirm(post_id:string, type_of_confirm_id:string):Promise<IPost> {
        return this.requestRestPath("DELETE", `/overflow/typeOfConfirm/${post_id}/${type_of_confirm_id}`, {}, [200]);
    }

    /**
     * @name unshareProject
     * @summary unshare Project with Persons
     * @operationId unshareProjectWithUsers
     * @tags Project
     *
     * @description unshare Project with all users in list: List<person_id>
     *
     * @param {string} project_id - project_id String path
     * @param {IShareProjectPerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public unshareProject(project_id:string, body:IShareProjectPerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/project/unshareProject/${project_id}`, body, [200]);
    }

    /**
     * @name uploadBProgramToCloud
     * @summary upload B Program (version) to cloud
     * @operationId upload_b_Program_ToCloud
     * @tags B_Program
     *
     * @description upload version of B Program to cloud. Its possible have only one version from B program in cloud. If you uploud new one - old one will be replaced
     *
     * @param {string} version_id - version_id String path
     *
     * @returns {IHomerInstance} [code 200] Successful Uploaded
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public uploadBProgramToCloud(version_id:string):Promise<IHomerInstance> {
        return this.requestRestPath("PUT", `/project/b_program/uploadToCloud/${version_id}`, {}, [200]);
    }

    /**
     * @name uploadBProgramToHomer
     * @summary upload B_Program (version) to Homer
     * @operationId uploadProgramToHomer_Immediately
     * @tags B_Program, Homer
     *
     * @description If you want upload program (!Immediately!) to Homer -> Homer must be online and connect to Cloud Server, you are uploading B_program version. And if connected M_Project is set to "Auto_update", it will automatically update all Grid Terminals.
     *
     * @param {string} b_program_id - b_program_id
     * @param {string} version_id - version_id
     * @param {string} homer_id - homer_id
     *
     * @returns {IResultOk} [code 200] Successful Uploaded
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public uploadBProgramToHomer(b_program_id:string, version_id:string, homer_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/project/b_program/uploadToHomer/${b_program_id}/${version_id}/${homer_id}`, {}, [200]);
    }

    /**
     * @name uploadCProgramVersion
     * @summary update Embedded Hardware with C_program compilation
     * @operationId uploadCompilationToBoard
     * @tags C_Program, Actualization
     *
     * @description Upload compilation to list of hardware. Compilation is on Version oc C_program. And before uplouding compilation, you must succesfuly compile required version before! Result (HTML code) will be every time 200. - Its because upload, restart, etc.. operation need more than ++30 second There is also problem / chance that Tyrion didn't find where Embedded hardware is. So you have to listening Server Sent Events (SSE) and show "future" message to the user!
     *
     * @param {string} version_id - version_id 
     * @param {IListOfBoards} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public uploadCProgramVersion(version_id:string, body:IListOfBoards):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/compilation/c_program/version/upload/${version_id}`, body, [200]);
    }

    /**
     * @name uploadLibrary
     * @summary Upload file to SingleLibrary
     * @operationId upload_SingleLibrary_Version
     * @tags SingleLibrary
     *
     * @description Upload file to SingleLibrary in file format
     *
     * @param {string} version_id
     * @param {string} body - File in file.txt format
     *
     * @returns {IResultOk} [code 200] Successfully uploaded
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public uploadLibrary(version_id:string, body:string):Promise<IResultOk> {
        return this.requestRestPath("POST", `/compilation/library/upload/${version_id}`, body, [200]);
    }

    /**
     * @name uploadLibraryGroup
     * @summary upload files to Version in LibraryGroup
     * @operationId upload_Library_To_LibraryGroup
     * @tags LibraryGroup
     *
     * @description Its not possible now describe uploud file in Swagger. But file name must be longer than 5 chars.in body of html content is "files"
     *
     * @param {string} version_id
     *
     * @returns {any} [code 200] Ok result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public uploadLibraryGroup(version_id:string):Promise<any> {
        return this.requestRestPath("POST", `/compilation/libraryGroup/upload/${version_id}`, {}, [200]);
    }

    /**
     * @name validatePersonEntity
     * @summary validate some Entity
     * @operationId validate_Entity
     * @tags Person
     *
     * @description for cyclical validation during registration, key contains 'mail' or 'nick_name'
     *
     * @param {IEntityValidationIn} body - Contains Json with values
     *
     * @returns {IEntityValidationOut} [code 200] Result if its possible to used that
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws [code 500] Server side Error
     */
    public validatePersonEntity(body:IEntityValidationIn):Promise<IEntityValidationOut> {
        return this.requestRestPath("POST", `/coreClient/person/validate_entity`, body, [200]);
    }

}
