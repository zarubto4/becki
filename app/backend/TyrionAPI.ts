/**************************************************************/
/*                                                            */
/*   Generated Tyrion API backend file                        */
/*   © 2015-2016 Becki Authors.                               */
/*                                                            */
/*   Build date: 2016-12-08 18:07:57                          */
/*   Tyrion version: 1.07.3                                   */
/*                                                            */
/*   Generated by automated script from Swagger JSON.         */
/*   Script author: David Hrádek (david@hradyho.net)          */
/*                                                            */
/**************************************************************/


/**
 * @name IActualizationProcedure
 * @description: Interface IActualizationProcedure definition
 */
export interface IActualizationProcedure {
    /**
     * @name date_of_create
     * @type string
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_finish
     * @type string
     * @description can be empty, which means that the procedure is not done yet. UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_finish: string;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name state
     * @type ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet")
     * @required
     */
    state: ("successful_complete"|"complete"|"complete_with_error"|"canceled"|"in_progress"|"not_start_yet");
    /**
     * @name state_fraction
     * @type string
     * @readonly
     * @required
     */
    state_fraction: string;
    /**
     * @name state_percentage
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    state_percentage: number;
    /**
     * @name updates
     * @type ICProgramUpdatePlan[]
     * @description Can be empty
     * @required
     */
    updates: ICProgramUpdatePlan[];
}


/**
 * @name IApplicableProduct
 * @description: Json Model for selecting Product for registration new project
 */
export interface IApplicableProduct {
    /**
     * @name product_id
     * @type number
     * @format int64
     * @readonly
     * @required
     */
    product_id: number;
    /**
     * @name product_individual_name
     * @type string
     * @readonly
     * @required
     */
    product_individual_name: string;
    /**
     * @name product_type
     * @type string
     * @readonly
     * @required
     */
    product_type: string;
}


/**
 * @name IBPair
 * @description: Interface IBPair definition
 */
export interface IBPair {
    /**
     * @name board_id
     * @type string
     * @readonly
     * @required
     */
    board_id: string;
    /**
     * @name board_personal_description
     * @type string
     * @readonly
     * @required
     */
    board_personal_description: string;
    /**
     * @name c_program_description
     * @type string
     * @readonly
     * @required
     */
    c_program_description: string;
    /**
     * @name c_program_name
     * @type string
     * @readonly
     * @required
     */
    c_program_name: string;
    /**
     * @name c_program_version_id
     * @type string
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @readonly
     * @required
     */
    c_program_version_name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name IBProgram
 * @description: Interface IBProgram definition
 */
export interface IBProgram {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name instance_details
     * @type IBProgramState
     * @readonly
     * @required
     */
    instance_details: IBProgramState;
    /**
     * @name last_update
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    last_update: number;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name program_versions
     * @type IBProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    program_versions: IBProgramVersionShortDetail[];
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBProgramFilter
 * @description: Json Model for getting B_Program Filter List
 */
export interface IBProgramFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get b_programs of given project
     */
    project_id?: string;
}


/**
 * @name IBProgramInstance
 * @description: Json Model for B_Program state
 */
export interface IBProgramInstance {
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name b_program_version_id
     * @type string
     * @readonly
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @readonly
     * @required
     */
    b_program_version_name: string;
    /**
     * @name date_of_created
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    date_of_created: string;
    /**
     * @name hardware_group
     * @type IHardwareGroup[]
     * @description can be empty
     * @readonly
     * @required
     */
    hardware_group: IHardwareGroup[];
    /**
     * @name instance_is_online
     * @type boolean
     * @readonly
     * @required
     */
    instance_is_online: boolean;
    /**
     * @name instance_record_id
     * @type string
     * @readonly
     * @required
     */
    instance_record_id: string;
    /**
     * @name instance_status_detail
     * @type string
     * @readonly
     * @required
     */
    instance_status_detail: string;
    /**
     * @name m_project_program_snapshots
     * @type IMProjectSnapShotDetail[]
     * @description can be empty
     * @readonly
     * @required
     */
    m_project_program_snapshots: IMProjectSnapShotDetail[];
    /**
     * @name planed_when
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    planed_when: string;
    /**
     * @name running_from
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    running_from: string;
    /**
     * @name running_to
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    running_to: string;
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_is_online
     * @type boolean
     * @readonly
     * @required
     */
    server_is_online: boolean;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
}


/**
 * @name IBProgramList
 * @description: Individual B_Program List
 */
export interface IBProgramList {
    /**
     * @name content
     * @type IBProgramShortDetail[]
     * @readonly
     * @required
     */
    content: IBProgramShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBProgramNew
 * @description: Json Model for new B_Program
 */
export interface IBProgramNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IBProgramShortDetail
 * @description: B_Program Light (only few properties)
 */
export interface IBProgramShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBProgramState
 * @description: Json Model for B_Program state
 */
export interface IBProgramState {
    /**
     * @name instance_id
     * @type string
     * @description Id of Instance -its independent object!
     * @readonly
     * @required
     */
    instance_id: string;
    /**
     * @name instance_online
     * @type boolean
     * @readonly
     * @required
     */
    instance_online: boolean;
    /**
     * @name instance_remote_url
     * @type string
     * @description WebSocket URL without Personal AUTH_ID for remove control and webView streaming
     * @readonly
     * @required
     */
    instance_remote_url: string;
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
    /**
     * @name server_online
     * @type boolean
     * @readonly
     * @required
     */
    server_online: boolean;
    /**
     * @name uploaded
     * @type boolean
     * @readonly
     * @required
     */
    uploaded: boolean;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IBProgramUploadInstance
 * @description: Json Model for new Version of B_Program
 */
export interface IBProgramUploadInstance {
    /**
     * @name upload_time
     * @type string
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format date-time
     */
    upload_time?: string;
}


/**
 * @name IBProgramVersion
 * @description: Json Model of Version of B_Program
 */
export interface IBProgramVersion {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name hardware_group
     * @type IHardwareGroup[]
     * @readonly
     * @required
     */
    hardware_group: IHardwareGroup[];
    /**
     * @name m_project_program_snapshots
     * @type IMProjectSnapShotDetail[]
     * @readonly
     * @required
     */
    m_project_program_snapshots: IMProjectSnapShotDetail[];
    /**
     * @name program
     * @type string
     * @description Json/Javascript Code
     * @readonly
     * @required
     */
    program: string;
    /**
     * @name remove_permission
     * @type boolean
     * @readonly
     * @required
     */
    remove_permission: boolean;
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
}


/**
 * @name IBProgramVersionNew
 * @description: Json Model for new Version of B_Program
 */
export interface IBProgramVersionNew {
    /**
     * @name hardware_group
     * @type IHardwareGroup[]
     * @description Connected groups of hardware - User can create Blocko program without hardware.
     */
    hardware_group?: IHardwareGroup[];
    /**
     * @name m_project_snapshots
     * @type IMProjectSnapShot[]
     * @description Connected groups of m_programs.versions under imported m_programs
     */
    m_project_snapshots?: IMProjectSnapShot[];
    /**
     * @name program
     * @type string
     * @required
     */
    program: string;
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBProgramVersionShortDetail
 * @description: B_Program Version Light (only few properties)
 */
export interface IBProgramVersionShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     */
    delete_permission?: boolean;
    /**
     * @name update_permission
     * @type boolean
     */
    update_permission?: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IBadRequest
 * @description: When is something wrong
 */
export interface IBadRequest {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("error")
     * @description state
     * @readonly
     * @required
     */
    state: ("error");
}


/**
 * @name IBlockoBlock
 * @description: Interface IBlockoBlock definition
 */
export interface IBlockoBlock {
    /**
     * @name author_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_id: string;
    /**
     * @name author_nick_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_nick_name: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name producer_id
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @description can be hidden, if BlockoBlock is created by User not by Company
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name type_of_block_id
     * @type string
     * @readonly
     * @required
     */
    type_of_block_id: string;
    /**
     * @name type_of_block_name
     * @type string
     * @readonly
     * @required
     */
    type_of_block_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IBlockoBlockVersionShortDetail[]
     * @readonly
     * @required
     */
    versions: IBlockoBlockVersionShortDetail[];
}


/**
 * @name IBlockoBlockVersion
 * @description: Interface IBlockoBlockVersion definition
 */
export interface IBlockoBlockVersion {
    /**
     * @name approval_state
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @required
     */
    approval_state: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name create_permission
     * @type boolean
     * @readonly
     * @required
     */
    create_permission: boolean;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockBlockoVersionEdit
 * @description: Json Model for editing BlockoVersion
 */
export interface IBlockoBlockBlockoVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockBlockoVersionNew
 * @description: Json Model for crating new version and also content of BlockoBlock Model
 */
export interface IBlockoBlockBlockoVersionNew {
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name version_description
     * @type string
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IBlockoBlockNew
 * @description: Json Model for crating new BlockoBlock Model
 */
export interface IBlockoBlockNew {
    /**
     * @name general_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    general_description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name type_of_block_id
     * @type string
     * @description Required valid type_of_block id
     * @required
     */
    type_of_block_id: string;
}


/**
 * @name IBlockoBlockVersionShortDetail
 * @description: Json Model details of Version of BlockoBlock
 */
export interface IBlockoBlockVersionShortDetail {
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     * @readonly
     * @required
     */
    date_of_create: string;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name design_json
     * @type string
     * @readonly
     * @required
     */
    design_json: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IBlockoBlockFilter
 * @description: Json Model for getting Blocko_Block Filter List
 */
export interface IBlockoBlockFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Blocks of given project
     */
    project_id?: string;
}


/**
 * @name IBlockoBlockList
 * @description: Individual Blocko Block List
 */
export interface IBlockoBlockList {
    /**
     * @name content
     * @type IBlockoBlockShortDetail[]
     * @readonly
     * @required
     */
    content: IBlockoBlockShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBlockoBlockShortDetail
 * @description: Blocko_Block Light (only few properties)
 */
export interface IBlockoBlockShortDetail {
    /**
     * @name blocko_block_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_description: string;
    /**
     * @name blocko_block_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_id: string;
    /**
     * @name blocko_block_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_name: string;
    /**
     * @name blocko_block_type_of_block_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_description: string;
    /**
     * @name blocko_block_type_of_block_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_id: string;
    /**
     * @name blocko_block_type_of_block_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_type_of_block_name: string;
    /**
     * @name blocko_block_version_description
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_description: string;
    /**
     * @name blocko_block_version_id
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_id: string;
    /**
     * @name blocko_block_version_name
     * @type string
     * @readonly
     * @required
     */
    blocko_block_version_name: string;
}


/**
 * @name IBoard
 * @description: Interface IBoard definition
 */
export interface IBoard {
    /**
     * @name backup_mode
     * @type boolean
     * @required
     */
    backup_mode: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name ethernet_mac_address
     * @type string
     */
    ethernet_mac_address?: string;
    /**
     * @name hash_for_adding
     * @type string
     */
    hash_for_adding?: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name mac_address
     * @type string
     */
    mac_address?: string;
    /**
     * @name main_board
     * @type boolean
     * @readonly
     * @required
     */
    main_board: boolean;
    /**
     * @name personal_description
     * @type string
     * @required
     */
    personal_description: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name project_name
     * @type string
     * @readonly
     * @required
     */
    project_name: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name status
     * @type IBoardStatus
     * @readonly
     * @required
     */
    status: IBoardStatus;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name up_to_date_firmware
     * @type boolean
     * @readonly
     * @required
     */
    up_to_date_firmware: boolean;
    /**
     * @name update_boot_loader_required
     * @type boolean
     * @readonly
     * @required
     */
    update_boot_loader_required: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name wifi_mac_address
     * @type string
     */
    wifi_mac_address?: string;
}


/**
 * @name IBoardList
 * @description: Individual Board List
 */
export interface IBoardList {
    /**
     * @name content
     * @type IBoard[]
     * @readonly
     * @required
     */
    content: IBoard[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IBoardPersonalDescription
 * @description: Json Model for update personal description of Board
 */
export interface IBoardPersonalDescription {
    /**
     * @name personal_description
     * @type string
     * @description Length must be between 0 and 255 characters.
     * @required
     */
    personal_description: string;
}


/**
 * @name IBoardShortDetail
 * @description: Json Model Board - only basic information
 */
export interface IBoardShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name personal_description
     * @type string
     * @readonly
     * @required
     */
    personal_description: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IBoardStatus
 * @description: Json Model for Status and all information about embedded Hardware
 */
export interface IBoardStatus {
    /**
     * @name actual_c_program_id
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    actual_c_program_id: string;
    /**
     * @name actual_c_program_name
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    actual_c_program_name: string;
    /**
     * @name actual_c_program_version_id
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    actual_c_program_version_id: string;
    /**
     * @name actual_c_program_version_name
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    actual_c_program_version_name: string;
    /**
     * @name actual_program
     * @type string
     * @description It in Object only if user upload own binary firmware to hardware and cloud_blocko_server used file name for naming of this valueIf user used classic build with Byzance - its not visible in Json!
     * @readonly
     * @required
     */
    actual_program: string;
    /**
     * @name b_program_id
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name b_program_version_id
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    b_program_version_name: string;
    /**
     * @name required_c_program_id
     * @type string
     */
    required_c_program_id?: string;
    /**
     * @name required_c_program_name
     * @type string
     */
    required_c_program_name?: string;
    /**
     * @name required_c_program_version_id
     * @type string
     */
    required_c_program_version_id?: string;
    /**
     * @name required_c_program_version_name
     * @type string
     */
    required_c_program_version_name?: string;
    /**
     * @name where
     * @type string
     * @description Can be with null value
     * @readonly
     * @required
     */
    where: string;
}


/**
 * @name IBoardDetail
 * @description: Interface IBoardDetail definition
 */
export interface IBoardDetail {
    /**
     * @name board_id
     * @type string
     * @readonly
     * @required
     */
    board_id: string;
    /**
     * @name personal_description
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    personal_description: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
}


/**
 * @name IBoardFilter
 * @description: Json Model for Filtering Boards
 */
export interface IBoardFilter {
    /**
     * @name active
     * @type string
     * @description Boolean - required in String! "true" or "false "
     */
    active?: string;
    /**
     * @name processors
     * @type string[]
     * @description List of processor.id
     */
    processors?: string[];
    /**
     * @name producers
     * @type string[]
     * @description List of producer.id
     */
    producers?: string[];
    /**
     * @name projects
     * @type string[]
     * @description List of project.id
     */
    projects?: string[];
    /**
     * @name type_of_boards
     * @type string[]
     * @description List of typeOfBoard.id
     */
    type_of_boards?: string[];
}


/**
 * @name IBoardsForBlocko
 * @description: Json Model for Blocko in Becki for accessible hardware and firmware versions
 */
export interface IBoardsForBlocko {
    /**
     * @name boards
     * @type IBoardShortDetail[]
     * @readonly
     * @required
     */
    boards: IBoardShortDetail[];
    /**
     * @name c_programs
     * @type ICProgramShortDetail[]
     * @readonly
     * @required
     */
    c_programs: ICProgramShortDetail[];
    /**
     * @name m_projects
     * @type IMProjectShortDetail[]
     * @readonly
     * @required
     */
    m_projects: IMProjectShortDetail[];
    /**
     * @name type_of_boards
     * @type ITypeOfBoard[]
     * @readonly
     * @required
     */
    type_of_boards: ITypeOfBoard[];
}


/**
 * @name IBootLoader
 * @description: Interface IBootLoader definition
 */
export interface IBootLoader {
    /**
     * @name changing_note
     * @type string
     */
    changing_note?: string;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name version_identificator
     * @type string
     */
    version_identificator?: string;
}


/**
 * @name ICProgram
 * @description: Object represented C_Program in database
 */
export interface ICProgram {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @description can be empty
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name name
     * @type string
     * @description minimal length is 8 characters
     * @required
     */
    name: string;
    /**
     * @name program_versions
     * @type ICProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    program_versions: ICProgramVersionShortDetail[];
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name project_name
     * @type string
     * @readonly
     * @required
     */
    project_name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ICProgramFilter
 * @description: Json Model for getting C_Program Filter List
 */
export interface ICProgramFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get C_Programs of given project
     */
    project_id?: string;
}


/**
 * @name ICProgramList
 * @description: Individual C_Program List
 */
export interface ICProgramList {
    /**
     * @name content
     * @type ICProgramShortDetail[]
     * @readonly
     * @required
     */
    content: ICProgramShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ICProgramNew
 * @description: Json Model for new C_Program
 */
export interface ICProgramNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    project_id: string;
    /**
     * @name type_of_board_id
     * @type string
     * @required
     */
    type_of_board_id: string;
}


/**
 * @name ICProgramUpdatePlan
 * @description: Interface ICProgramUpdatePlan definition
 */
export interface ICProgramUpdatePlan {
    /**
     * @name binary_file_detail
     * @type IFileRecord
     * @description Is visible only if user send own binary file ( OR state for c_program_detail)
     * @readonly
     * @required
     */
    binary_file_detail: IFileRecord;
    /**
     * @name board_detail
     * @type IBoardDetail
     * @readonly
     * @required
     */
    board_detail: IBoardDetail;
    /**
     * @name c_program_detail
     * @type ICProgramUpdateProgram
     * @description Is visible only if user send compilation under C_program in system  ( OR state for binary_file)
     * @readonly
     * @required
     */
    c_program_detail: ICProgramUpdateProgram;
    /**
     * @name date_of_create
     * @type string
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_create: string;
    /**
     * @name date_of_finish
     * @type string
     * @description can be empty, which means that the procedure is not done yet. UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format date-time
     * @required
     */
    date_of_finish: string;
    /**
     * @name firmware_type
     * @type ("FIRMWARE"|"BOOTLOADER"|"BACKUP")
     * @required
     */
    firmware_type: ("FIRMWARE"|"BOOTLOADER"|"BACKUP");
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name state
     * @type ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"critical_error")
     * @description Description on Model C_ProgramUpdater_State
     * @required
     */
    state: ("complete"|"canceled"|"bin_file_not_found"|"not_start_yet"|"in_progress"|"overwritten"|"waiting_for_device"|"instance_inaccessible"|"homer_server_is_offline"|"critical_error");
}


/**
 * @name ICProgramUpdateProgram
 * @description: Interface ICProgramUpdateProgram definition
 */
export interface ICProgramUpdateProgram {
    /**
     * @name c_program_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_id: string;
    /**
     * @name c_program_program_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_program_name: string;
    /**
     * @name c_program_version_id
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_version_id: string;
    /**
     * @name c_program_version_name
     * @type string
     * @description Can be empty
     * @readonly
     * @required
     */
    c_program_version_name: string;
}


/**
 * @name ICProgramVersion
 * @description: Json Model for Version of C_program
 */
export interface ICProgramVersion {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name external_libraries
     * @type IExternalLibraries[]
     * @readonly
     * @required
     */
    external_libraries: IExternalLibraries[];
    /**
     * @name main
     * @type string
     * @readonly
     * @required
     */
    main: string;
    /**
     * @name remove_permission
     * @type boolean
     * @readonly
     * @required
     */
    remove_permission: boolean;
    /**
     * @name status
     * @type ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"undefined")
     * @readonly
     * @required
     */
    status: ("compilation_in_progress"|"file_with_code_not_found"|"json_code_is_broken"|"server_was_offline"|"compilation_server_error"|"compiled_with_code_errors"|"successfully_compiled_not_restored"|"successfully_compiled_and_restored"|"undefined");
    /**
     * @name user_files
     * @type IUserFiles[]
     * @readonly
     * @required
     */
    user_files: IUserFiles[];
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @description Value can be empty, Server cannot guarantee that. External documentation: dsafsdfsdf
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name ICProgramVersionEdit
 * @description: Json Model for edit basic information of C_program Version
 */
export interface ICProgramVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionNew
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionNew {
    /**
     * @name external_libraries
     * @type IExternalLibraries[]
     */
    external_libraries?: IExternalLibraries[];
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
    /**
     * @name user_files
     * @type IUserFiles[]
     */
    user_files?: IUserFiles[];
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionPublicList
 * @description: Json Model for Public Version of C_program List
 */
export interface ICProgramVersionPublicList {
    /**
     * @name content
     * @type ICProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    content: ICProgramVersionShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ICProgramVersionShortDetail
 * @description: Json Model for Public Version of C_program
 */
export interface ICProgramVersionShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     */
    delete_permission?: boolean;
    /**
     * @name update_permission
     * @type boolean
     */
    update_permission?: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name ICProgramVersionUpdate
 * @description: Json Model for new Version of C_Program
 */
export interface ICProgramVersionUpdate {
    /**
     * @name external_libraries
     * @type IExternalLibraries[]
     */
    external_libraries?: IExternalLibraries[];
    /**
     * @name main
     * @type string
     * @required
     */
    main: string;
    /**
     * @name type_of_board_id
     * @type string
     * @description Required only if user compile code not under C++ code version (where compilation can found type_of_board)
     */
    type_of_board_id?: string;
    /**
     * @name user_files
     * @type IUserFiles[]
     */
    user_files?: IUserFiles[];
}


/**
 * @name ICProgramShortDetail
 * @description: Json Model with details of C_program>
 */
export interface ICProgramShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name type_of_board_id
     * @type string
     * @readonly
     * @required
     */
    type_of_board_id: string;
    /**
     * @name type_of_board_name
     * @type string
     * @readonly
     * @required
     */
    type_of_board_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ICloudHomerServer
 * @description: Interface ICloudHomerServer definition
 */
export interface ICloudHomerServer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name grid_port
     * @type string
     */
    grid_port?: string;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name mqtt_password
     * @type string
     */
    mqtt_password?: string;
    /**
     * @name mqtt_port
     * @type string
     */
    mqtt_port?: string;
    /**
     * @name mqtt_username
     * @type string
     */
    mqtt_username?: string;
    /**
     * @name server_is_online
     * @type boolean
     * @readonly
     * @required
     */
    server_is_online: boolean;
    /**
     * @name server_url
     * @type string
     */
    server_url?: string;
    /**
     * @name webView_port
     * @type string
     */
    webView_port?: string;
}


/**
 * @name ICompilationBuildError
 * @description: Json Model for Compilation Result
 */
export interface ICompilationBuildError {
    /**
     * @name adjustedColumn
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    adjustedColumn: number;
    /**
     * @name code
     * @type string
     * @readonly
     * @required
     */
    code: string;
    /**
     * @name codeWhitespace
     * @type string
     * @readonly
     * @required
     */
    codeWhitespace: string;
    /**
     * @name column
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    column: number;
    /**
     * @name endIndex
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    endIndex: number;
    /**
     * @name filename
     * @type string
     * @readonly
     * @required
     */
    filename: string;
    /**
     * @name line
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    line: number;
    /**
     * @name startIndex
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    startIndex: number;
    /**
     * @name state
     * @type string
     * @description Value is build_error
     * @readonly
     * @required
     */
    state: string;
    /**
     * @name text
     * @type string
     * @readonly
     * @required
     */
    text: string;
    /**
     * @name type
     * @type string
     * @readonly
     * @required
     */
    type: string;
}


/**
 * @name ICompilationOk
 * @description: Json Model for Compilation Result
 */
export interface ICompilationOk {
    /**
     * @name state
     * @type string
     * @description Value is success
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IEntityValidationIn
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationIn {
    /**
     * @name key
     * @type ("mail"|"nick_name"|"vat_number")
     * @description This field is required
     * @required
     */
    key: ("mail"|"nick_name"|"vat_number");
    /**
     * @name value
     * @type string
     * @description This field is required
     * @required
     */
    value: string;
}


/**
 * @name IEntityValidationOut
 * @description: Json Model for Validation of *-some Entity
 */
export interface IEntityValidationOut {
    /**
     * @name message
     * @type string
     * @description If valid = false, Json probably contains message for user
     * @example Email is used
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name valid
     * @type boolean
     * @description Entity (Email, NickName.. etc) is valid if valid = true
     * @readonly
     * @required
     */
    valid: boolean;
}


/**
 * @name IExternalLibraries
 * @description: Interface IExternalLibraries definition
 */
export interface IExternalLibraries {
    /**
     * @name files
     * @type IFileLib[]
     */
    files?: IFileLib[];
    /**
     * @name library_name
     * @type string
     */
    library_name?: string;
}


/**
 * @name IFileRecord
 * @description: Interface IFileRecord definition
 */
export interface IFileRecord {
    /**
     * @name file_name
     * @type string
     * @required
     */
    file_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
}


/**
 * @name IFileLib
 * @description: Interface IFileLib definition
 */
export interface IFileLib {
    /**
     * @name content
     * @type string
     */
    content?: string;
    /**
     * @name file_name
     * @type string
     */
    file_name?: string;
}


/**
 * @name IFloatingPersonToken
 * @description: Interface IFloatingPersonToken definition
 */
export interface IFloatingPersonToken {
    /**
     * @name access_age
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    access_age: number;
    /**
     * @name connection_id
     * @type string
     * @required
     */
    connection_id: string;
    /**
     * @name created
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name notification_subscriber
     * @type boolean
     * @required
     */
    notification_subscriber: boolean;
    /**
     * @name provider_key
     * @type string
     * @required
     */
    provider_key: string;
    /**
     * @name provider_user_id
     * @type string
     * @required
     */
    provider_user_id: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name return_url
     * @type string
     * @required
     */
    return_url: string;
    /**
     * @name social_token_verified
     * @type boolean
     * @required
     */
    social_token_verified: boolean;
    /**
     * @name type_of_connection
     * @type string
     * @required
     */
    type_of_connection: string;
    /**
     * @name user_agent
     * @type string
     * @required
     */
    user_agent: string;
}


/**
 * @name IGeneralTariff
 * @description: Interface IGeneralTariff definition
 */
export interface IGeneralTariff {
    /**
     * @name color
     * @type string
     */
    color?: string;
    /**
     * @name company_details_required
     * @type boolean
     */
    company_details_required?: boolean;
    /**
     * @name extensionses
     * @type IGeneralTariffExtensions[]
     */
    extensionses?: IGeneralTariffExtensions[];
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name identificator
     * @type string
     */
    identificator?: string;
    /**
     * @name labels
     * @type IGeneralTariffLabel[]
     */
    labels?: IGeneralTariffLabel[];
    /**
     * @name payment_currency
     * @type string[]
     * @readonly
     * @required
     */
    payment_currency: string[];
    /**
     * @name payment_methods
     * @type IPair[]
     * @readonly
     * @required
     */
    payment_methods: IPair[];
    /**
     * @name payment_modes
     * @type IPair[]
     * @readonly
     * @required
     */
    payment_modes: IPair[];
    /**
     * @name price
     * @type IPrice
     * @readonly
     * @required
     */
    price: IPrice;
    /**
     * @name required_payment_method
     * @type boolean
     */
    required_payment_method?: boolean;
    /**
     * @name required_payment_mode
     * @type boolean
     */
    required_payment_mode?: boolean;
    /**
     * @name tariff_description
     * @type string
     */
    tariff_description?: string;
    /**
     * @name tariff_name
     * @type string
     */
    tariff_name?: string;
}


/**
 * @name IGeneralTariffLabel
 * @description: Interface IGeneralTariffLabel definition
 */
export interface IGeneralTariffLabel {
    /**
     * @name description
     * @type string
     */
    description?: string;
    /**
     * @name icon
     * @type string
     */
    icon?: string;
    /**
     * @name label
     * @type string
     */
    label?: string;
}


/**
 * @name IGeneralTariffExtensions
 * @description: Interface IGeneralTariffExtensions definition
 */
export interface IGeneralTariffExtensions {
    /**
     * @name color
     * @type string
     */
    color?: string;
    /**
     * @name description
     * @type string
     */
    description?: string;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name labels
     * @type IGeneralTariffLabel[]
     */
    labels?: IGeneralTariffLabel[];
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name price
     * @type IPrice
     * @readonly
     * @required
     */
    price: IPrice;
}


/**
 * @name IGoPayUrl
 * @description: Json Model with url for GoPay Terminal
 */
export interface IGoPayUrl {
    /**
     * @name gw_url
     * @type string
     * @readonly
     * @required
     */
    gw_url: string;
}


/**
 * @name IGridWidget
 * @description: Interface IGridWidget definition
 */
export interface IGridWidget {
    /**
     * @name author_id
     * @type string
     * @description can be hidden, if GridWidget is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_id: string;
    /**
     * @name author_nick_name
     * @type string
     * @description can be hidden, if GridWidget is created by Byzance or Other Company
     * @readonly
     * @required
     */
    author_nick_name: string;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name type_of_widget_id
     * @type string
     * @readonly
     * @required
     */
    type_of_widget_id: string;
    /**
     * @name type_of_widget_name
     * @type string
     * @readonly
     * @required
     */
    type_of_widget_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions
     * @type IGridWidgetVersionShort[]
     * @readonly
     * @required
     */
    versions: IGridWidgetVersionShort[];
}


/**
 * @name IGridWidgetVersion
 * @description: Interface IGridWidgetVersion definition
 */
export interface IGridWidgetVersion {
    /**
     * @name approval_state
     * @type ("pending"|"approved"|"disapproved"|"edited")
     * @required
     */
    approval_state: ("pending"|"approved"|"disapproved"|"edited");
    /**
     * @name create_permission
     * @type boolean
     * @readonly
     * @required
     */
    create_permission: boolean;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name read_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_permission: boolean;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetVersionEdit
 * @description: Json Model for editing GridWidgetVersion
 */
export interface IGridWidgetVersionEdit {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetVersionNew
 * @description: Json Model for crating new version and also content of GridWidget Model
 */
export interface IGridWidgetVersionNew {
    /**
     * @name design_json
     * @type string
     * @required
     */
    design_json: string;
    /**
     * @name logic_json
     * @type string
     * @required
     */
    logic_json: string;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IGridWidgetVersionShort
 * @description: Json Model for Version of GridWidgetVersion short
 */
export interface IGridWidgetVersionShort {
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     * @readonly
     * @required
     */
    date_of_create: string;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name design_json
     * @type string
     * @readonly
     * @required
     */
    design_json: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IGridWidgetFilter
 * @description: Json Model for getting GridWidget Filter List
 */
export interface IGridWidgetFilter {
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Widgets of given project
     */
    project_id?: string;
}


/**
 * @name IGridWidgetLight
 * @description: GridWidget Light (only few properties)
 */
export interface IGridWidgetLight {
    /**
     * @name grid_widget_description
     * @type string
     * @readonly
     * @required
     */
    grid_widget_description: string;
    /**
     * @name grid_widget_id
     * @type string
     * @readonly
     * @required
     */
    grid_widget_id: string;
    /**
     * @name grid_widget_name
     * @type string
     * @readonly
     * @required
     */
    grid_widget_name: string;
    /**
     * @name grid_widget_type_of_widget_description
     * @type string
     * @readonly
     * @required
     */
    grid_widget_type_of_widget_description: string;
    /**
     * @name grid_widget_type_of_widget_id
     * @type string
     * @readonly
     * @required
     */
    grid_widget_type_of_widget_id: string;
    /**
     * @name grid_widget_type_of_widget_name
     * @type string
     * @readonly
     * @required
     */
    grid_widget_type_of_widget_name: string;
    /**
     * @name grid_widget_version_description
     * @type string
     * @readonly
     * @required
     */
    grid_widget_version_description: string;
    /**
     * @name grid_widget_version_id
     * @type string
     * @readonly
     * @required
     */
    grid_widget_version_id: string;
    /**
     * @name grid_widget_version_name
     * @type string
     * @readonly
     * @required
     */
    grid_widget_version_name: string;
}


/**
 * @name IGridWidgetList
 * @description: Individual GridWidget List
 */
export interface IGridWidgetList {
    /**
     * @name content
     * @type IGridWidgetLight[]
     * @readonly
     * @required
     */
    content: IGridWidgetLight[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IGridWidgetNew
 * @description: Json Model for crating new GridWidget Model
 */
export interface IGridWidgetNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name type_of_widget_id
     * @type string
     * @description Required valid type_of_widget id
     * @required
     */
    type_of_widget_id: string;
}


/**
 * @name IGridTerminal
 * @description: Interface IGridTerminal definition
 */
export interface IGridTerminal {
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     * @required
     */
    device_name: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     * @required
     */
    device_type: string;
    /**
     * @name m_program_access
     * @type boolean
     * @required
     */
    m_program_access: boolean;
    /**
     * @name terminal_token
     * @type string
     * @example Mobile, WebBrowser
     * @readonly
     * @required
     */
    terminal_token: string;
    /**
     * @name up_to_date
     * @type boolean
     * @required
     */
    up_to_date: boolean;
    /**
     * @name user_agent
     * @type string
     * @readonly
     * @required
     */
    user_agent: string;
    /**
     * @name ws_permission
     * @type boolean
     * @required
     */
    ws_permission: boolean;
}


/**
 * @name IGridTerminalIdentf
 * @description: Json Model for Identificator
 */
export interface IGridTerminalIdentf {
    /**
     * @name device_name
     * @type string
     * @example Iphone 5S, Chrome 4
     * @required
     */
    device_name: string;
    /**
     * @name device_type
     * @type string
     * @example Mobile, WebBrowser
     * @required
     */
    device_type: string;
}


/**
 * @name IHardwareNewHardwareResult
 * @description: Json Model for data for new Embedded Hardware
 */
export interface IHardwareNewHardwareResult {
    /**
     * @name mac_address
     * @type string
     * @readonly
     * @required
     */
    mac_address: string;
    /**
     * @name status
     * @type string
     */
    status?: string;
}


/**
 * @name IHardwareNewSettingsRequest
 * @description: Json Model for data for new Embedded Hardware
 */
export interface IHardwareNewSettingsRequest {
    /**
     * @name compiler_target_name
     * @type string
     * @description must be supported in Tyrion Hardware-Generator management
     * @readonly
     * @required
     */
    compiler_target_name: string;
    /**
     * @name full_id
     * @type string
     * @description Value must be unique! Required 24 chars!
     * @readonly
     * @required
     */
    full_id: string;
}


/**
 * @name IHardwareNewSettingsResult
 * @description: Json Model with settings and firwmare and bootloader for Embedded hardware
 */
export interface IHardwareNewSettingsResult {
    /**
     * @name autobackup
     * @type boolean
     * @readonly
     * @required
     */
    autobackup: boolean;
    /**
     * @name backup_mqtt_hostname
     * @type string
     * @readonly
     * @required
     */
    backup_mqtt_hostname: string;
    /**
     * @name backup_mqtt_password
     * @type string
     * @readonly
     * @required
     */
    backup_mqtt_password: string;
    /**
     * @name backup_mqtt_port
     * @type string
     * @readonly
     * @required
     */
    backup_mqtt_port: string;
    /**
     * @name backup_mqtt_username
     * @type string
     * @readonly
     * @required
     */
    backup_mqtt_username: string;
    /**
     * @name bootloader_base64
     * @type string
     * @readonly
     * @required
     */
    bootloader_base64: string;
    /**
     * @name bootloader_report
     * @type boolean
     * @readonly
     * @required
     */
    bootloader_report: boolean;
    /**
     * @name devlist_counter
     * @type number
     * @format int32
     * @readonly
     * @required
     */
    devlist_counter: number;
    /**
     * @name firmware_base64
     * @type string
     * @readonly
     * @required
     */
    firmware_base64: string;
    /**
     * @name full_id
     * @type string
     * @readonly
     * @required
     */
    full_id: string;
    /**
     * @name mac_address
     * @type string
     * @readonly
     * @required
     */
    mac_address: string;
    /**
     * @name netsource
     * @type ("ethernet"|"wifi"|"nothing")
     * @readonly
     * @required
     */
    netsource: ("ethernet"|"wifi"|"nothing");
    /**
     * @name normal_mqtt_hostname
     * @type string
     * @readonly
     * @required
     */
    normal_mqtt_hostname: string;
    /**
     * @name normal_mqtt_password
     * @type string
     * @readonly
     * @required
     */
    normal_mqtt_password: string;
    /**
     * @name normal_mqtt_port
     * @type string
     * @readonly
     * @required
     */
    normal_mqtt_port: string;
    /**
     * @name normal_mqtt_username
     * @type string
     * @readonly
     * @required
     */
    normal_mqtt_username: string;
    /**
     * @name wifi_password
     * @type string
     * @readonly
     * @required
     */
    wifi_password: string;
    /**
     * @name wifi_ssid
     * @type string
     * @readonly
     * @required
     */
    wifi_ssid: string;
    /**
     * @name wifi_username
     * @type string
     * @readonly
     * @required
     */
    wifi_username: string;
}


/**
 * @name IHardwareGroup
 * @description: Interface IHardwareGroup definition
 */
export interface IHardwareGroup {
    /**
     * @name device_board_pairs
     * @type IBPair[]
     */
    device_board_pairs?: IBPair[];
    /**
     * @name main_board_pair
     * @type IBPair
     */
    main_board_pair?: IBPair;
}


/**
 * @name IHomerInstance
 * @description: Interface IHomerInstance definition
 */
export interface IHomerInstance {
    /**
     * @name actual_summary
     * @type IBProgramInstance
     * @description Only if instance is upload in Homer - can be null
     * @readonly
     * @required
     */
    actual_summary: IBProgramInstance;
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name blocko_instance_name
     * @type string
     */
    blocko_instance_name?: string;
    /**
     * @name instance_history
     * @type IHomerInstanceRecord[]
     */
    instance_history?: IHomerInstanceRecord[];
    /**
     * @name instance_online
     * @type boolean
     * @readonly
     * @required
     */
    instance_online: boolean;
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
}


/**
 * @name IHomerInstanceRecord
 * @description: Interface IHomerInstanceRecord definition
 */
export interface IHomerInstanceRecord {
    /**
     * @name b_program_version_id
     * @type string
     * @readonly
     * @required
     */
    b_program_version_id: string;
    /**
     * @name b_program_version_name
     * @type string
     * @readonly
     * @required
     */
    b_program_version_name: string;
    /**
     * @name date_of_created
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    date_of_created: string;
    /**
     * @name hardware_group
     * @type IHardwareGroup[]
     * @readonly
     * @required
     */
    hardware_group: IHardwareGroup[];
    /**
     * @name instance_record_id
     * @type string
     * @readonly
     * @required
     */
    instance_record_id: string;
    /**
     * @name m_project_snapshop
     * @type IMProjectSnapShotDetail[]
     * @readonly
     * @required
     */
    m_project_snapshop: IMProjectSnapShotDetail[];
    /**
     * @name planed_when
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    planed_when: string;
    /**
     * @name running_from
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    running_from: string;
    /**
     * @name running_to
     * @type string
     * @description can be null
     * @format date-time
     * @readonly
     * @required
     */
    running_to: string;
}


/**
 * @name IInstanceShortDetail
 * @description: Instance Light (only few properties)
 */
export interface IInstanceShortDetail {
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_id
     * @type string
     * @readonly
     * @required
     */
    b_program_id: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name instance_is_online
     * @type boolean
     * @readonly
     * @required
     */
    instance_is_online: boolean;
    /**
     * @name server_id
     * @type string
     * @readonly
     * @required
     */
    server_id: string;
    /**
     * @name server_is_online
     * @type boolean
     * @readonly
     * @required
     */
    server_is_online: boolean;
    /**
     * @name server_name
     * @type string
     * @readonly
     * @required
     */
    server_name: string;
}


/**
 * @name IInvoice
 * @description: Interface IInvoice definition
 */
export interface IInvoice {
    /**
     * @name date_of_create
     * @type string
     * @format date-time
     */
    date_of_create?: string;
    /**
     * @name id
     * @type number
     * @format int64
     */
    id?: number;
    /**
     * @name invoice_number
     * @type string
     */
    invoice_number?: string;
    /**
     * @name payment_method
     * @type string
     * @readonly
     * @required
     */
    payment_method: string;
    /**
     * @name payment_status
     * @type string
     * @readonly
     * @required
     */
    payment_status: string;
    /**
     * @name pdf_link
     * @type string
     * @description Visible only when the invoice is available
     * @readonly
     * @required
     */
    pdf_link: string;
    /**
     * @name require_payment
     * @type boolean
     * @description Visible only when the invoice is not paid
     * @readonly
     * @required
     */
    require_payment: boolean;
}


/**
 * @name IInvoiceFullDetails
 * @description: Json Model for new Producer
 */
export interface IInvoiceFullDetails {
    /**
     * @name invoice
     * @type IInvoice
     */
    invoice?: IInvoice;
    /**
     * @name invoice_items
     * @type IInvoiceItem[]
     */
    invoice_items?: IInvoiceItem[];
}


/**
 * @name IInvoiceItem
 * @description: Interface IInvoiceItem definition
 */
export interface IInvoiceItem {
    /**
     * @name currency
     * @type ("CZK"|"EUR"|"USD")
     * @required
     */
    currency: ("CZK"|"EUR"|"USD");
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name quantity
     * @type number
     * @format int64
     */
    quantity?: number;
    /**
     * @name unit_name
     * @type string
     */
    unit_name?: string;
    /**
     * @name unit_price
     * @type number
     * @format double
     */
    unit_price?: number;
    /**
     * @name unit_price_without_vat
     * @type number
     * @format double
     * @readonly
     * @required
     */
    unit_price_without_vat: number;
    /**
     * @name vat
     * @type number
     * @format double
     */
    vat?: number;
    /**
     * @name vat_rate
     * @type string
     * @readonly
     * @required
     */
    vat_rate: string;
}


/**
 * @name IJsonNode
 * @description: Interface IJsonNode definition
 */
export interface IJsonNode {
    /**
     * @name array
     * @type boolean
     */
    array?: boolean;
    /**
     * @name bigDecimal
     * @type boolean
     */
    bigDecimal?: boolean;
    /**
     * @name bigInteger
     * @type boolean
     */
    bigInteger?: boolean;
    /**
     * @name binary
     * @type boolean
     */
    binary?: boolean;
    /**
     * @name boolean
     * @type boolean
     */
    boolean?: boolean;
    /**
     * @name containerNode
     * @type boolean
     */
    containerNode?: boolean;
    /**
     * @name double
     * @type boolean
     */
    double?: boolean;
    /**
     * @name float
     * @type boolean
     */
    float?: boolean;
    /**
     * @name floatingPointNumber
     * @type boolean
     */
    floatingPointNumber?: boolean;
    /**
     * @name int
     * @type boolean
     */
    int?: boolean;
    /**
     * @name integralNumber
     * @type boolean
     */
    integralNumber?: boolean;
    /**
     * @name long
     * @type boolean
     */
    long?: boolean;
    /**
     * @name missingNode
     * @type boolean
     */
    missingNode?: boolean;
    /**
     * @name nodeType
     * @type ("ARRAY"|"BINARY"|"BOOLEAN"|"MISSING"|"NULL"|"NUMBER"|"OBJECT"|"POJO"|"STRING")
     */
    nodeType?: ("ARRAY"|"BINARY"|"BOOLEAN"|"MISSING"|"NULL"|"NUMBER"|"OBJECT"|"POJO"|"STRING");
    /**
     * @name null
     * @type boolean
     */
    null?: boolean;
    /**
     * @name number
     * @type boolean
     */
    number?: boolean;
    /**
     * @name object
     * @type boolean
     */
    object?: boolean;
    /**
     * @name pojo
     * @type boolean
     */
    pojo?: boolean;
    /**
     * @name short
     * @type boolean
     */
    short?: boolean;
    /**
     * @name textual
     * @type boolean
     */
    textual?: boolean;
    /**
     * @name valueNode
     * @type boolean
     */
    valueNode?: boolean;
}


/**
 * @name IJsonValueMissingResult
 * @description: Some Json value missing - don't show that to users.. SERVER IS LOGGING THIS FRONTEND ISSUE
 */
export interface IJsonValueMissingResult {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name exception
     * @type IJsonNode
     * @readonly
     * @required
     */
    exception: IJsonNode;
    /**
     * @name message
     * @type string
     * @description message
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name ILibraryGroup
 * @description: Interface ILibraryGroup definition
 */
export interface ILibraryGroup {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name group_name
     * @type string
     * @required
     */
    group_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name processors_id
     * @type string[]
     * @readonly
     * @required
     */
    processors_id: string[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions_id
     * @type string[]
     * @readonly
     * @required
     */
    versions_id: string[];
}


/**
 * @name ILibraryGroupFilter
 * @description: Json Model for Filtering LibraryGroups
 */
export interface ILibraryGroupFilter {
    /**
     * @name group_name
     * @type string
     */
    group_name?: string;
    /**
     * @name order
     * @type ("group_name"|"id"|"date_of_create")
     * @description Value of order
     */
    order?: ("group_name"|"id"|"date_of_create");
    /**
     * @name processors_id
     * @type string[]
     * @description List of processor.id
     */
    processors_id?: string[];
    /**
     * @name value
     * @type ("asc"|"desc")
     * @description Set type of Order -> ascending / descending, If you used order - its required!!!
     */
    value?: ("asc"|"desc");
}


/**
 * @name ILibraryGroupList
 * @description: Individual Library Group List
 */
export interface ILibraryGroupList {
    /**
     * @name content
     * @type ILibraryGroup[]
     * @readonly
     * @required
     */
    content: ILibraryGroup[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ILibraryGroupNew
 * @description: Json Model for new LibraryGroup
 */
export interface ILibraryGroupNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name group_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    group_name: string;
}


/**
 * @name ILibraryGroupVersion
 * @description: Json Model for new Version for LibraryGroup
 */
export interface ILibraryGroupVersion {
    /**
     * @name version_description
     * @type string
     * @description version_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 2 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name IListOfBoards
 * @description: Json Model with List of Board ID
 */
export interface IListOfBoards {
    /**
     * @name board_id
     * @type string[]
     * @required
     */
    board_id: string[];
}


/**
 * @name ILogin
 * @description: Json Model for new Basic Login
 */
export interface ILogin {
    /**
     * @name mail
     * @type string
     * @required
     */
    mail: string;
    /**
     * @name password
     * @type string
     * @required
     */
    password: string;
}


/**
 * @name ILoginResult
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginResult {
    /**
     * @name permissions
     * @type string[]
     * @description List of all person permission (private and all collections from Person Roles ("SecurityRole") 
     * @readonly
     * @required
     */
    permissions: string[];
    /**
     * @name person
     * @type IPerson
     * @readonly
     * @required
     */
    person: IPerson;
    /**
     * @name roles
     * @type ISecurityRole[]
     * @description List of roles, that
     * @readonly
     * @required
     */
    roles: ISecurityRole[];
}


/**
 * @name ILoginToken
 * @description: Json Model that you will get, if login was successful
 */
export interface ILoginToken {
    /**
     * @name authToken
     * @type string
     * @description X-AUTH-TOKEN - used this token in HTML head for verifying the identities
     * @readonly
     * @required
     */
    authToken: string;
}


/**
 * @name IMProgram
 * @description: Interface IMProgram definition
 */
export interface IMProgram {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time stamp in millis
     * @example 1458315085338
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name m_project_id
     * @type string
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name program_versions
     * @type IMProgramVersionShortDetail[]
     * @readonly
     * @required
     */
    program_versions: IMProgramVersionShortDetail[];
    /**
     * @name read_qr_token_permission
     * @type boolean
     * @readonly
     * @required
     */
    read_qr_token_permission: boolean;
}


/**
 * @name IMProgramNew
 * @description: Json Model for new M_Program
 */
export interface IMProgramNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IMProgramSnapShot
 * @description: Interface IMProgramSnapShot definition
 */
export interface IMProgramSnapShot {
    /**
     * @name m_program_id
     * @type string
     * @required
     */
    m_program_id: string;
    /**
     * @name version_object_id
     * @type string
     * @required
     */
    version_object_id: string;
}


/**
 * @name IMProgramSnapShotDetail
 * @description: Interface IMProgramSnapShotDetail definition
 */
export interface IMProgramSnapShotDetail {
    /**
     * @name m_program_description
     * @type string
     * @readonly
     * @required
     */
    m_program_description: string;
    /**
     * @name m_program_id
     * @type string
     * @readonly
     * @required
     */
    m_program_id: string;
    /**
     * @name m_program_name
     * @type string
     * @readonly
     * @required
     */
    m_program_name: string;
    /**
     * @name version_object_description
     * @type string
     * @readonly
     * @required
     */
    version_object_description: string;
    /**
     * @name version_object_id
     * @type string
     * @readonly
     * @required
     */
    version_object_id: string;
    /**
     * @name version_object_name
     * @type string
     * @readonly
     * @required
     */
    version_object_name: string;
}


/**
 * @name IMProgramVersion
 * @description: Json Model for Version of M_program
 */
export interface IMProgramVersion {
    /**
     * @name m_code
     * @type string
     * @readonly
     * @required
     */
    m_code: string;
    /**
     * @name public_mode
     * @type boolean
     * @readonly
     * @required
     */
    public_mode: boolean;
    /**
     * @name qr_token
     * @type string
     * @readonly
     * @required
     */
    qr_token: string;
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramVersionInterface
 * @description: Json Model for Version of M_program
 */
export interface IMProgramVersionInterface {
    /**
     * @name version_object
     * @type IVersionObject
     * @readonly
     * @required
     */
    version_object: IVersionObject;
    /**
     * @name virtual_input_output
     * @type string
     * @readonly
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name IMProgramVersionShortDetail
 * @description: Json Model with details of M_Program_Version>
 */
export interface IMProgramVersionShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     */
    delete_permission?: boolean;
    /**
     * @name edit_permission
     * @type boolean
     */
    edit_permission?: boolean;
    /**
     * @name version_description
     * @type string
     * @readonly
     * @required
     */
    version_description: string;
    /**
     * @name version_id
     * @type string
     * @readonly
     * @required
     */
    version_id: string;
    /**
     * @name version_name
     * @type string
     * @readonly
     * @required
     */
    version_name: string;
}


/**
 * @name IMProgramInterface
 * @description: Json Model that contain values with accessible interface of virtual_input_output under M_programs (auto_incrementing == false) or head M_Program.virtual_input_output if auto_incrementing is True
 */
export interface IMProgramInterface {
    /**
     * @name accessible_versions
     * @type IMProgramVersionInterface[]
     * @required
     */
    accessible_versions: IMProgramVersionInterface[];
    /**
     * @name description
     * @type string
     */
    description?: string;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name name
     * @type string
     */
    name?: string;
}


/**
 * @name IMProject
 * @description: Interface IMProject definition
 */
export interface IMProject {
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time stamp in millis
     * @example 14618543121234
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @description can be empty
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name m_programs
     * @type ISwaggerMProgramShortDetail[]
     * @required
     */
    m_programs: ISwaggerMProgramShortDetail[];
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IMProjectNew
 * @description: Json Model for update M_Project
 */
export interface IMProjectNew {
    /**
     * @name description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IMProjectShortDetail
 * @description: Json Model M_Project - only basic information
 */
export interface IMProjectShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IMProjectSnapShot
 * @description: Interface IMProjectSnapShot definition
 */
export interface IMProjectSnapShot {
    /**
     * @name m_program_snapshots
     * @type IMProgramSnapShot[]
     * @description Connected boards (padavans)
     * @required
     */
    m_program_snapshots: IMProgramSnapShot[];
    /**
     * @name m_project_id
     * @type string
     * @required
     */
    m_project_id: string;
}


/**
 * @name IMProjectSnapShotDetail
 * @description: Interface IMProjectSnapShotDetail definition
 */
export interface IMProjectSnapShotDetail {
    /**
     * @name m_program_snapshots
     * @type IMProgramSnapShotDetail[]
     * @readonly
     * @required
     */
    m_program_snapshots: IMProgramSnapShotDetail[];
    /**
     * @name m_project_description
     * @type string
     * @readonly
     * @required
     */
    m_project_description: string;
    /**
     * @name m_project_id
     * @type string
     * @readonly
     * @required
     */
    m_project_id: string;
    /**
     * @name m_project_name
     * @type string
     * @readonly
     * @required
     */
    m_project_name: string;
}


/**
 * @name IMProjectInterface
 * @description: Json Model that contain values with accessible interface of virtual_input_output under M_project (auto_incrementing == false) or head M_project.M_program.virtual_input_output if auto_incrementing is True
 */
export interface IMProjectInterface {
    /**
     * @name accessible_interface
     * @type IMProgramInterface[]
     * @readonly
     * @required
     */
    accessible_interface: IMProgramInterface[];
    /**
     * @name auto_incrementing
     * @type boolean
     * @readonly
     * @required
     */
    auto_incrementing: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name IMobileConnectionRequest
 * @description: Json Model for update M_Project
 */
export interface IMobileConnectionRequest {
    /**
     * @name instance_record_id
     * @type string
     */
    instance_record_id?: string;
    /**
     * @name version_object_id
     * @type string
     */
    version_object_id?: string;
}


/**
 * @name INotification
 * @description: Interface INotification definition
 */
export interface INotification {
    /**
     * @name buttons
     * @type INotificationButton[]
     * @readonly
     * @required
     */
    buttons: INotificationButton[];
    /**
     * @name confirmation_required
     * @type boolean
     * @required
     */
    confirmation_required: boolean;
    /**
     * @name confirmed
     * @type boolean
     * @required
     */
    confirmed: boolean;
    /**
     * @name created
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    created: number;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name notification_body
     * @type INotificationElement[]
     * @readonly
     * @required
     */
    notification_body: INotificationElement[];
    /**
     * @name notification_importance
     * @type ("low"|"normal"|"high")
     * @required
     */
    notification_importance: ("low"|"normal"|"high");
    /**
     * @name notification_level
     * @type ("info"|"success"|"warning"|"error")
     * @required
     */
    notification_level: ("info"|"success"|"warning"|"error");
    /**
     * @name was_read
     * @type boolean
     * @required
     */
    was_read: boolean;
}


/**
 * @name INotificationButton
 * @description: Json Model for notification buttons
 */
export interface INotificationButton {
    /**
     * @name action
     * @type ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification")
     * @required
     */
    action: ("accept_project_invitation"|"reject_project_invitation"|"confirm_notification");
    /**
     * @name bold
     * @type boolean
     * @required
     */
    bold: boolean;
    /**
     * @name color
     * @type string
     * @required
     */
    color: string;
    /**
     * @name italic
     * @type boolean
     * @required
     */
    italic: boolean;
    /**
     * @name payload
     * @type string
     * @required
     */
    payload: string;
    /**
     * @name text
     * @type string
     * @required
     */
    text: string;
    /**
     * @name underline
     * @type boolean
     * @required
     */
    underline: boolean;
}


/**
 * @name INotificationConfirm
 * @description: Json Model for confirming notification
 */
export interface INotificationConfirm {
    /**
     * @name action
     * @type string
     * @description Notification_action
     * @required
     */
    action: string;
    /**
     * @name payload
     * @type string
     * @description Notification payload
     * @required
     */
    payload: string;
}


/**
 * @name INotificationElement
 * @description: Json Model for notification body elements
 */
export interface INotificationElement {
    /**
     * @name bold
     * @type boolean
     * @required
     */
    bold: boolean;
    /**
     * @name button
     * @type boolean
     * @required
     */
    button: boolean;
    /**
     * @name color
     * @type string
     */
    color?: string;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name italic
     * @type boolean
     * @required
     */
    italic: boolean;
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name project_id
     * @type string
     */
    project_id?: string;
    /**
     * @name text
     * @type string
     */
    text?: string;
    /**
     * @name type
     * @type ("link"|"object"|"text")
     * @required
     */
    type: ("link"|"object"|"text");
    /**
     * @name underline
     * @type boolean
     * @required
     */
    underline: boolean;
    /**
     * @name url
     * @type string
     */
    url?: string;
}


/**
 * @name INotificationList
 * @description: Individual Notification List
 */
export interface INotificationList {
    /**
     * @name content
     * @type INotification[]
     * @readonly
     * @required
     */
    content: INotification[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
    /**
     * @name unread_total
     * @type number
     * @description Total unread subjects
     * @format int32
     * @readonly
     * @required
     */
    unread_total: number;
}


/**
 * @name INotificationRead
 * @description: Json Model for List with ids of read notifications
 */
export interface INotificationRead {
    /**
     * @name notification_id
     * @type string[]
     * @description List of notification.id
     * @required
     */
    notification_id: string[];
}


/**
 * @name IObjectNotFound
 * @description: Called object is missing. You can show that to Person
 */
export interface IObjectNotFound {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IPair
 * @description: Interface IPair definition
 */
export interface IPair {
    /**
     * @name json_identificator
     * @type string
     * @readonly
     * @required
     */
    json_identificator: string;
    /**
     * @name user_description
     * @type string
     * @readonly
     * @required
     */
    user_description: string;
}


/**
 * @name IPaymentDetails
 * @description: Interface IPaymentDetails definition
 */
export interface IPaymentDetails {
    /**
     * @name city
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     */
    company_account?: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Only if Product is for business
     */
    company_authorized_phone?: string;
    /**
     * @name company_invoice_email
     * @type string
     * @description Only if Product is for business
     */
    company_invoice_email?: string;
    /**
     * @name company_name
     * @type string
     * @description Only if Product is for business
     */
    company_name?: string;
    /**
     * @name company_registration_no
     * @type string
     * @description Only if Product is for business
     */
    company_registration_no?: string;
    /**
     * @name company_vat_number
     * @type string
     * @description Only if Product is for business
     */
    company_vat_number?: string;
    /**
     * @name company_web
     * @type string
     * @description Only if Product is for business
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    country: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type number
     * @format int64
     */
    id?: number;
    /**
     * @name street
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    street_number: string;
    /**
     * @name zip_code
     * @type string
     * @description Used for billing and invoices
     * @required
     */
    zip_code: string;
}


/**
 * @name IPermissionRequired
 * @description: Some Json value missing - don't show that to users.. SERVER IS LOGGING THIS FRONTEND ISSUE
 */
export interface IPermissionRequired {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IPerson
 * @description: Interface IPerson definition
 */
export interface IPerson {
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name full_name
     * @type string
     * @required
     */
    full_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name mail
     * @type string
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @required
     */
    nick_name: string;
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
}


/**
 * @name IPersonPermission
 * @description: Interface IPersonPermission definition
 */
export interface IPersonPermission {
    /**
     * @name description
     * @type string
     * @description Description for "(static key)"
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name edit_person_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_person_permission: boolean;
    /**
     * @name value
     * @type string
     * @description Permission key - "(static key)"
     * @readonly
     * @required
     */
    value: string;
}


/**
 * @name IPersonChangeProperty
 * @description: Json Model for changing Person property
 */
export interface IPersonChangeProperty {
    /**
     * @name email
     * @type string
     * @description Valid mail 
     */
    email?: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     */
    password?: string;
    /**
     * @name property
     * @type string
     * @description Required property ('password' or 'email')
     * @required
     */
    property: string;
}


/**
 * @name IPersonNew
 * @description: Json Model for creating new Person
 */
export interface IPersonNew {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
}


/**
 * @name IPersonPasswordNew
 * @description: Json Model for recovering person password
 */
export interface IPersonPasswordNew {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
    /**
     * @name password
     * @type string
     * @description The password length must be between 8 and 60 characters
     * @required
     */
    password: string;
    /**
     * @name password_recovery_token
     * @type string
     * @description Required password_recovery_token
     * @required
     */
    password_recovery_token: string;
}


/**
 * @name IPersonPasswordRecoveryEmail
 * @description: Json Model for sending password recovery email
 */
export interface IPersonPasswordRecoveryEmail {
    /**
     * @name mail
     * @type string
     * @description Required valid mail 
     * @required
     */
    mail: string;
}


/**
 * @name IPersonUpdate
 * @description: Json Model for update Person. (For password or email, you have to used separate API)
 */
export interface IPersonUpdate {
    /**
     * @name full_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    full_name: string;
    /**
     * @name nick_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    nick_name: string;
}


/**
 * @name IPrice
 * @description: Interface IPrice definition
 */
export interface IPrice {
    /**
     * @name CZK
     * @type number
     * @description in Double - show CZK
     * @format double
     * @readonly
     * @required
     */
    CZK: number;
    /**
     * @name EUR
     * @type number
     * @description in Double - show €
     * @format double
     * @readonly
     * @required
     */
    EUR: number;
    /**
     * @name USD
     * @type number
     * @description in Double - show $
     * @format double
     * @readonly
     * @required
     */
    USD: number;
}


/**
 * @name IProcessor
 * @description: Interface IProcessor definition
 */
export interface IProcessor {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name library_groups
     * @type string[]
     * @required
     */
    library_groups: string[];
    /**
     * @name processor_code
     * @type string
     * @required
     */
    processor_code: string;
    /**
     * @name processor_name
     * @type string
     * @required
     */
    processor_name: string;
    /**
     * @name single_libraries
     * @type string[]
     * @required
     */
    single_libraries: string[];
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
}


/**
 * @name IProcessorNew
 * @description: Json Model for new Processor
 */
export interface IProcessorNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name processor_code
     * @type string
     * @description The Processor Code must have at least 4 characters
     * @required
     */
    processor_code: string;
    /**
     * @name processor_name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    processor_name: string;
    /**
     * @name speed
     * @type number
     * @format int32
     * @required
     */
    speed: number;
}


/**
 * @name IProducer
 * @description: Interface IProducer definition
 */
export interface IProducer {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
}


/**
 * @name IProduct
 * @description: Interface IProduct definition
 */
export interface IProduct {
    /**
     * @name active
     * @type boolean
     */
    active?: boolean;
    /**
     * @name currency
     * @type ("CZK"|"EUR"|"USD")
     * @required
     */
    currency: ("CZK"|"EUR"|"USD");
    /**
     * @name extensionses
     * @type IGeneralTariffExtensions[]
     */
    extensionses?: IGeneralTariffExtensions[];
    /**
     * @name id
     * @type number
     * @format int64
     */
    id?: number;
    /**
     * @name invoices
     * @type IInvoice[]
     * @required
     */
    invoices: IInvoice[];
    /**
     * @name paid_until_the_day
     * @type string
     * @format date-time
     */
    paid_until_the_day?: string;
    /**
     * @name payment_details
     * @type IPaymentDetails
     */
    payment_details?: IPaymentDetails;
    /**
     * @name payment_method
     * @type string
     * @readonly
     * @required
     */
    payment_method: string;
    /**
     * @name payment_mode
     * @type string
     * @readonly
     * @required
     */
    payment_mode: string;
    /**
     * @name product_individual_name
     * @type string
     */
    product_individual_name?: string;
    /**
     * @name product_type
     * @type string
     * @readonly
     * @required
     */
    product_type: string;
    /**
     * @name remaining_credit
     * @type number
     * @description Only if Payment Mode is CREDIT 
     * @format int32
     */
    remaining_credit?: number;
    /**
     * @name subscription_id
     * @type string
     */
    subscription_id?: string;
}


/**
 * @name IProject
 * @description: Interface IProject definition
 */
export interface IProject {
    /**
     * @name admin_permission
     * @type boolean
     * @readonly
     * @required
     */
    admin_permission: boolean;
    /**
     * @name b_programs
     * @type IBProgramShortDetail[]
     * @required
     */
    b_programs: IBProgramShortDetail[];
    /**
     * @name boards
     * @type IBoardShortDetail[]
     * @required
     */
    boards: IBoardShortDetail[];
    /**
     * @name c_programs
     * @type ICProgramShortDetail[]
     * @required
     */
    c_programs: ICProgramShortDetail[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     */
    description?: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     */
    id?: string;
    /**
     * @name instancies
     * @type IInstanceShortDetail[]
     * @readonly
     * @required
     */
    instancies: IInstanceShortDetail[];
    /**
     * @name m_projects
     * @type IMProjectShortDetail[]
     * @required
     */
    m_projects: IMProjectShortDetail[];
    /**
     * @name name
     * @type string
     */
    name?: string;
    /**
     * @name participants
     * @type IProjectParticipant[]
     * @required
     */
    participants: IProjectParticipant[];
    /**
     * @name product_id
     * @type number
     * @format int64
     * @readonly
     * @required
     */
    product_id: number;
    /**
     * @name product_individual_name
     * @type string
     * @readonly
     * @required
     */
    product_individual_name: string;
    /**
     * @name share_permission
     * @type boolean
     * @readonly
     * @required
     */
    share_permission: boolean;
    /**
     * @name tier_name
     * @type string
     * @readonly
     * @required
     */
    tier_name: string;
    /**
     * @name type_of_blocks
     * @type ITypeOfBlockShortDetail[]
     * @required
     */
    type_of_blocks: ITypeOfBlockShortDetail[];
    /**
     * @name type_of_widgets
     * @type ITypeOfWidgetShortDetail[]
     * @required
     */
    type_of_widgets: ITypeOfWidgetShortDetail[];
    /**
     * @name unshare_permission
     * @type boolean
     * @readonly
     * @required
     */
    unshare_permission: boolean;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name IProjectEdit
 * @description: Json Model for Edit Project
 */
export interface IProjectEdit {
    /**
     * @name project_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    project_description: string;
    /**
     * @name project_name
     * @type string
     * @description Length must be between 8 and 60 characters, must be unique!
     * @required
     */
    project_name: string;
}


/**
 * @name IProjectNew
 * @description: Json Model for new General Project
 */
export interface IProjectNew {
    /**
     * @name product_id
     * @type number
     * @description Id of Product (Tariff) where the project will be registered
     * @format int64
     * @required
     */
    product_id: number;
    /**
     * @name project_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    project_description: string;
    /**
     * @name project_name
     * @type string
     * @description Length must be between 8 and 60 characters, must be unique!
     * @required
     */
    project_name: string;
}


/**
 * @name IProjectParticipantStatus
 * @description: Json Model for changing Project_participant status
 */
export interface IProjectParticipantStatus {
    /**
     * @name person_id
     * @type string
     * @description Participant id
     * @required
     */
    person_id: string;
    /**
     * @name state
     * @type ("admin"|"member")
     * @description Status
     * @required
     */
    state: ("admin"|"member");
}


/**
 * @name IProjectParticipant
 * @description: Interface IProjectParticipant definition
 */
export interface IProjectParticipant {
    /**
     * @name full_name
     * @type string
     * @readonly
     * @required
     */
    full_name: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name state
     * @type ("owner"|"admin"|"member"|"invited")
     * @required
     */
    state: ("owner"|"admin"|"member"|"invited");
    /**
     * @name user_email
     * @type string
     * @required
     */
    user_email: string;
}


/**
 * @name IResult
 * @description: Interface IResult definition
 */
export interface IResult {
}


/**
 * @name IResultOk
 * @description: Some Json value missing - don't show that to users.. 
 */
export interface IResultOk {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Can be null! If not, you can show that to User. Server fills the message only when it is important.
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type string
     * @description state
     * @readonly
     * @required
     */
    state: string;
}


/**
 * @name IResultUnauthorized
 * @description: Interface IResultUnauthorized definition
 */
export interface IResultUnauthorized {
    /**
     * @name code
     * @type number
     * @description code
     * @format int32
     * @readonly
     * @required
     */
    code: number;
    /**
     * @name message
     * @type string
     * @description Unauthorized access - please log in
     * @readonly
     * @required
     */
    message: string;
    /**
     * @name state
     * @type ("Unauthorized")
     * @description state
     * @readonly
     * @required
     */
    state: ("Unauthorized");
}


/**
 * @name ISecurityRole
 * @description: Interface ISecurityRole definition
 */
export interface ISecurityRole {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name person_permissions_id
     * @type string[]
     * @readonly
     * @required
     */
    person_permissions_id: string[];
    /**
     * @name persons_id
     * @type string[]
     * @readonly
     * @required
     */
    persons_id: string[];
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ISecurityRoleNew
 * @description: Json Model for new SecurityRole (Group)
 */
export interface ISecurityRoleNew {
    /**
     * @name description
     * @type string
     * @description Not required, But strongly recommended, Maximum length is 255 characters
     */
    description?: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 4 and 60 characters.
     * @required
     */
    name: string;
}


/**
 * @name IShareProjectPerson
 * @description: Json Model for sharing project with Persons
 */
export interface IShareProjectPerson {
    /**
     * @name persons_mail
     * @type string[]
     * @required
     */
    persons_mail: string[];
}


/**
 * @name ISingleLibrary
 * @description: Interface ISingleLibrary definition
 */
export interface ISingleLibrary {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name library_name
     * @type string
     * @required
     */
    library_name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
    /**
     * @name versions_id
     * @type string[]
     * @readonly
     * @required
     */
    versions_id: string[];
}


/**
 * @name ISingleLibraryFilter
 * @description: Json Model for getting Single Library by Filter
 */
export interface ISingleLibraryFilter {
    /**
     * @name library_name
     * @type string
     */
    library_name?: string;
    /**
     * @name order
     * @type ("group_name"|"id")
     * @description Value of order
     */
    order?: ("group_name"|"id");
    /**
     * @name processors_id
     * @type string[]
     * @description List of processor.id
     */
    processors_id?: string[];
    /**
     * @name value
     * @type ("asc"|"desc")
     * @description Set type of Order -> ascending / descending, If you used order - its required!!!
     */
    value?: ("asc"|"desc");
}


/**
 * @name ISingleLibraryNew
 * @description: Json Model for new Single Library
 */
export interface ISingleLibraryNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name library_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    library_name: string;
}


/**
 * @name ISingleLibraryVersion
 * @description: Json Model for new Version for SingleLibrary
 */
export interface ISingleLibraryVersion {
    /**
     * @name version_description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    version_name: string;
}


/**
 * @name ISingleLibraryList
 * @description: Individual SingleLibrary List
 */
export interface ISingleLibraryList {
    /**
     * @name content
     * @type ISingleLibrary[]
     * @readonly
     * @required
     */
    content: ISingleLibrary[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ISocialLogin
 * @description: Json Model for new Basic Login throw the social networks
 */
export interface ISocialLogin {
    /**
     * @name authToken
     * @type string
     * @description token, that you have to used in HTML head for verifying the identities
     * @readonly
     * @required
     */
    authToken: string;
    /**
     * @name redirect_url
     * @type string
     * @description URL that you have to redirect user
     * @readonly
     * @required
     */
    redirect_url: string;
    /**
     * @name type
     * @type ("Facebook"|"GitHub")
     * @readonly
     * @required
     */
    type: ("Facebook"|"GitHub");
}


/**
 * @name ISwaggerMProgramShortDetail
 * @description: Interface ISwaggerMProgramShortDetail definition
 */
export interface ISwaggerMProgramShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     */
    delete_permission?: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     */
    edit_permission?: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
}


/**
 * @name ISwaggerMProgramVersionNew
 * @description: Interface ISwaggerMProgramVersionNew definition
 */
export interface ISwaggerMProgramVersionNew {
    /**
     * @name m_code
     * @type string
     * @required
     */
    m_code: string;
    /**
     * @name public_mode
     * @type boolean
     * @description if value is true - program can be open throw the QR token (public) by everyone!
     */
    public_mode?: boolean;
    /**
     * @name version_description
     * @type string
     * @description program_description can be null or maximum length of 255 characters.
     */
    version_description?: string;
    /**
     * @name version_name
     * @type string
     * @description Required valid screen_type_id
     * @required
     */
    version_name: string;
    /**
     * @name virtual_input_output
     * @type string
     * @required
     */
    virtual_input_output: string;
}


/**
 * @name ISwaggerTariffGeneralEdit
 * @description: Interface ISwaggerTariffGeneralEdit definition
 */
export interface ISwaggerTariffGeneralEdit {
    /**
     * @name general_tariff_id
     * @type string
     */
    general_tariff_id?: string;
}


/**
 * @name ISystemAccess
 * @description: Json Model for System Access>
 */
export interface ISystemAccess {
    /**
     * @name permissions
     * @type IPersonPermission[]
     * @readonly
     * @required
     */
    permissions: IPersonPermission[];
    /**
     * @name roles
     * @type ISecurityRole[]
     * @readonly
     * @required
     */
    roles: ISecurityRole[];
}


/**
 * @name ITariffDetailsEdit
 * @description: Json Model with List of Board ID
 */
export interface ITariffDetailsEdit {
    /**
     * @name city
     * @type string
     * @description Required: alwaysThe city must have at least 4 characters
     * @required
     */
    city: string;
    /**
     * @name company_account
     * @type boolean
     * @description Required: only if user want have business account
     */
    company_account?: boolean;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if company_account = trueThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_invoice_email
     * @type string
     * @description Required: only if company_account = trueEmail must be valid
     */
    company_invoice_email?: string;
    /**
     * @name company_name
     * @type string
     * @description Required: only if company_account = trueThe company_name must have at least 4 characters
     */
    company_name?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if company_account = trueThe company_web url must be valid 
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Required: alwaysThe country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name registration_no
     * @type string
     * @description Required: only if company_account = trueThe company_registration_no must have at least 4 characters
     */
    registration_no?: string;
    /**
     * @name street
     * @type string
     * @description Required: alwaysThe street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: alwaysBut The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name vat_number
     * @type string
     * @description Required: only if company_account = true And VAT_number is required only for EU Customers.The VAT_number must have at least 4 characters
     * @example CZ28496639
     */
    vat_number?: string;
    /**
     * @name zip_code
     * @type string
     * @description Required: alwaysThe zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name ITariffRegister
 * @description: Json Model if user want create new Tariff for projects
 */
export interface ITariffRegister {
    /**
     * @name city
     * @type string
     * @description Required: alwaysThe city must have at least 4 characters
     * @required
     */
    city: string;
    /**
     * @name company_authorized_email
     * @type string
     * @description Required: only if account is businessThe company_authorized_email must have at least 4 characters
     */
    company_authorized_email?: string;
    /**
     * @name company_authorized_phone
     * @type string
     * @description Required: only if account is businessThe company_authorized_phone must have at least 4 characters
     */
    company_authorized_phone?: string;
    /**
     * @name company_invoice_email
     * @type string
     * @description Required: only if account is businessEmail must be valid
     */
    company_invoice_email?: string;
    /**
     * @name company_name
     * @type string
     * @description Required: only if account is businessThe company_name must have at least 4 characters
     */
    company_name?: string;
    /**
     * @name company_web
     * @type string
     * @description Required: only if account is businessThe company_web must have at least 4 characters
     */
    company_web?: string;
    /**
     * @name country
     * @type string
     * @description Required: alwaysThe country must have at least 4 characters
     * @required
     */
    country: string;
    /**
     * @name currency_type
     * @type string
     */
    currency_type?: string;
    /**
     * @name extensions_ids
     * @type string[]
     * @description List of Ids of Extends packages
     */
    extensions_ids?: string[];
    /**
     * @name payment_method
     * @type string
     * @description Required: only in if required_payment_method is true  values =>[bank_transfer, credit_card]
     */
    payment_method?: string;
    /**
     * @name payment_mode
     * @type string
     * @description Required: only in if required_payment_mode is true
     */
    payment_mode?: string;
    /**
     * @name product_individual_name
     * @type string
     * @description Required: always.The product_individual_name must have at least 4 characters
     * @required
     */
    product_individual_name: string;
    /**
     * @name registration_no
     * @type string
     * @description Required: only if account is businessThe company_registration_no must have at least 4 characters - FOR non-EU countriesfor Business account is required registration_no OR vat_number
     */
    registration_no?: string;
    /**
     * @name street
     * @type string
     * @description Required: alwaysThe street must have at least 4 characters
     * @required
     */
    street: string;
    /**
     * @name street_number
     * @type string
     * @description Required: alwaysBut The street_number can be empty
     * @required
     */
    street_number: string;
    /**
     * @name tariff_id
     * @type string
     */
    tariff_id?: string;
    /**
     * @name vat_number
     * @type string
     * @description Required: only if account is business & from EU!!! CZ28496639 The VAT_number must have at least 4 charactersfor Business account is required registration_no OR vat_number
     */
    vat_number?: string;
    /**
     * @name zip_code
     * @type string
     * @description Required: alwaysThe zip_code must have at least 5 digits
     * @required
     */
    zip_code: string;
}


/**
 * @name ITerminalMProjectSnapshot
 * @description: Interface ITerminalMProjectSnapshot definition
 */
export interface ITerminalMProjectSnapshot {
    /**
     * @name b_program_description
     * @type string
     * @readonly
     * @required
     */
    b_program_description: string;
    /**
     * @name b_program_name
     * @type string
     * @readonly
     * @required
     */
    b_program_name: string;
    /**
     * @name instance_record_id
     * @type string
     * @readonly
     * @required
     */
    instance_record_id: string;
    /**
     * @name snapshots
     * @type IMProjectSnapShotDetail[]
     * @readonly
     * @required
     */
    snapshots: IMProjectSnapShotDetail[];
}


/**
 * @name ITypeOfBlock
 * @description: Interface ITypeOfBlock definition
 */
export interface ITypeOfBlock {
    /**
     * @name blocko_blocks
     * @type IBlockoBlock[]
     * @required
     */
    blocko_blocks: IBlockoBlock[];
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description This value will be in Json only if TypeOfBlock is private!
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBlockNew
 * @description: Json Model for new TypeOfBlock
 */
export interface ITypeOfBlockNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description If you want make private TypeOfBlock group. You have to have "project_id" parameter in Json., Value can be null or contains project_id
     */
    project_id?: string;
}


/**
 * @name ITypeOfBlockShortDetail
 * @description: TypeOfBlock details Json model (only few properties)
 */
export interface ITypeOfBlockShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBoard
 * @description: Interface ITypeOfBoard definition
 */
export interface ITypeOfBoard {
    /**
     * @name connectible_to_internet
     * @type boolean
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name main_boot_loader
     * @type IBootLoader
     */
    main_boot_loader?: IBootLoader;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name picture_link
     * @type string
     * @readonly
     * @required
     */
    picture_link: string;
    /**
     * @name processor_id
     * @type string
     * @readonly
     * @required
     */
    processor_id: string;
    /**
     * @name processor_name
     * @type string
     * @readonly
     * @required
     */
    processor_name: string;
    /**
     * @name producer_id
     * @type string
     * @readonly
     * @required
     */
    producer_id: string;
    /**
     * @name producer_name
     * @type string
     * @readonly
     * @required
     */
    producer_name: string;
    /**
     * @name register_new_device_permission
     * @type boolean
     * @readonly
     * @required
     */
    register_new_device_permission: boolean;
    /**
     * @name revision
     * @type string
     * @required
     */
    revision: string;
    /**
     * @name target_name
     * @type string
     * @readonly
     * @required
     */
    target_name: string;
}


/**
 * @name ITypeOfBoardNew
 * @description: Json Model for new TypeOfBoard
 */
export interface ITypeOfBoardNew {
    /**
     * @name compiler_target_name
     * @type string
     * @description The description must have at least 4 characters
     * @required
     */
    compiler_target_name: string;
    /**
     * @name connectible_to_internet
     * @type boolean
     * @description If device can connect to internet
     * @required
     */
    connectible_to_internet: boolean;
    /**
     * @name description
     * @type string
     * @description The description must have at least 4 characters
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name processor_id
     * @type string
     * @description Required valid processor_id
     * @required
     */
    processor_id: string;
    /**
     * @name producer_id
     * @type string
     * @description Required valid producer_id
     * @required
     */
    producer_id: string;
}


/**
 * @name ITypeOfWidget
 * @description: Interface ITypeOfWidget definition
 */
export interface ITypeOfWidget {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name grid_widgets
     * @type IGridWidget[]
     * @required
     */
    grid_widgets: IGridWidget[];
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description This value will be in Json only if TypeOfWidget is private!
     * @readonly
     * @required
     */
    project_id: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfWidgetNew
 * @description: Json Model for new TypeOfWidget
 */
export interface ITypeOfWidgetNew {
    /**
     * @name description
     * @type string
     * @description Length must be between 24 and 255 characters.
     * @required
     */
    description: string;
    /**
     * @name name
     * @type string
     * @description Length must be between 8 and 60 characters.
     * @required
     */
    name: string;
    /**
     * @name project_id
     * @type string
     * @description If you want make private TypeOfWidget group. You have to have "project_id" parameter in Json., Value can be null or contains project_id
     */
    project_id?: string;
}


/**
 * @name ITypeOfWidgetShortDetail
 * @description: Json Model with details of Type of Widget>
 */
export interface ITypeOfWidgetShortDetail {
    /**
     * @name delete_permission
     * @type boolean
     * @readonly
     * @required
     */
    delete_permission: boolean;
    /**
     * @name description
     * @type string
     * @readonly
     * @required
     */
    description: string;
    /**
     * @name edit_permission
     * @type boolean
     * @readonly
     * @required
     */
    edit_permission: boolean;
    /**
     * @name id
     * @type string
     * @readonly
     * @required
     */
    id: string;
    /**
     * @name name
     * @type string
     * @readonly
     * @required
     */
    name: string;
    /**
     * @name update_permission
     * @type boolean
     * @readonly
     * @required
     */
    update_permission: boolean;
}


/**
 * @name ITypeOfBlockFilter
 * @description: Json Model for getting Type_Of_Block Filter List
 */
export interface ITypeOfBlockFilter {
    /**
     * @name private_type
     * @type boolean
     * @description Use 'true' for private Type_Of_Block or 'false' for non-private
     * @required
     */
    private_type: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Type_Of_Blocks of given project
     */
    project_id?: string;
}


/**
 * @name ITypeOfBlockList
 * @description: Individual Type_Of_Block List
 */
export interface ITypeOfBlockList {
    /**
     * @name content
     * @type ITypeOfBlockShortDetail[]
     * @readonly
     * @required
     */
    content: ITypeOfBlockShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name ITypeOfWidgetFilter
 * @description: Json Model for getting Type_Of_Widget Filter List
 */
export interface ITypeOfWidgetFilter {
    /**
     * @name private_type
     * @type boolean
     * @description Use 'true' for private Type_Of_Widget or 'false' for non-private
     * @required
     */
    private_type: boolean;
    /**
     * @name project_id
     * @type string
     * @description Include only if you want to get Type_Of_Widgets of given project
     */
    project_id?: string;
}


/**
 * @name ITypeOfWidgetList
 * @description: Individual Type_Of_Widget List
 */
export interface ITypeOfWidgetList {
    /**
     * @name content
     * @type ITypeOfWidgetShortDetail[]
     * @readonly
     * @required
     */
    content: ITypeOfWidgetShortDetail[];
    /**
     * @name from
     * @type number
     * @description First value position from all subjects. Minimum is 0.
     * @format int32
     * @readonly
     * @required
     */
    from: number;
    /**
     * @name pages
     * @type number[]
     * @description Numbers of pages, which you can call
     * @readonly
     * @required
     */
    pages: number[];
    /**
     * @name to
     * @type number
     * @description Minimum is "from" Maximum is "total"
     * @format int32
     * @readonly
     * @required
     */
    to: number;
    /**
     * @name total
     * @type number
     * @description Total subjects
     * @format int32
     * @readonly
     * @required
     */
    total: number;
}


/**
 * @name IUserFiles
 * @description: Interface IUserFiles definition
 */
export interface IUserFiles {
    /**
     * @name code
     * @type string
     */
    code?: string;
    /**
     * @name file_name
     * @type string
     */
    file_name?: string;
}


/**
 * @name IVersionObject
 * @description: Interface IVersionObject definition
 */
export interface IVersionObject {
    /**
     * @name author
     * @type IPerson
     * @description can be empty!
     */
    author?: IPerson;
    /**
     * @name date_of_create
     * @type number
     * @description UNIX time in milis - Date: number of miliseconds elapsed since  Thursday, 1 January 1970
     * @example 1466163478925
     * @format int32
     * @readonly
     * @required
     */
    date_of_create: number;
    /**
     * @name id
     * @type string
     * @required
     */
    id: string;
    /**
     * @name version_description
     * @type string
     * @required
     */
    version_description: string;
    /**
     * @name version_name
     * @type string
     * @required
     */
    version_name: string;
}


/**
 * @name IWebSocketString
 * @description: Interface IWebSocketString definition
 */
export interface IWebSocketString {
    /**
     * @name actor
     * @type boolean
     */
    actor?: boolean;
}


/**
 * @name IWebSocketToken
 * @description: Json Model that you will get, if login was successful
 */
export interface IWebSocketToken {
    /**
     * @name websocket_token
     * @type string
     * @description Swagger_Websocket_Token - used this token for WebSocket access. The lifetime of the token is 5 seconds. It is disposable. It can not be used twice. In the event of the expiration of the life of the disabled. 
     * @readonly
     * @required
     */
    websocket_token: string;
}




export abstract class TyrionAPI {

    protected abstract requestRestPath<T>(method:string, path:string, body:Object, success:number[]):Promise<T>;

    /**
     * @name __login
     * @summary login
     * @operationId login
     * @tags Access, Person, APP-Api
     *
     * @description Get access Token
     *
     * @param {ILogin} body - Contains Json with values
     *
     * @returns {ILoginToken} [code 200] Successfully logged
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public __login(body:ILogin):Promise<ILoginToken> {
        return this.requestRestPath("POST", `/coreClient/person/permission/login`, body, [200]);
    }

    /**
     * @name __loginFacebook
     * @summary login with Facebook
     * @operationId Facebook
     * @tags Access, Social-Facebook
     *
     * @description For login via Facebook 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {string} return_link - this is return url address in format  ?return_link=/link/link
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public __loginFacebook(return_link:string):Promise<ISocialLogin> {
        return_link = encodeURIComponent(return_link);
        return this.requestRestPath("GET", `/login/facebook?return_link=${return_link}`, {}, [200]);
    }

    /**
     * @name __loginGitHub
     * @summary login with GitHub
     * @operationId GitHub
     * @tags Access, Social-GitHub
     *
     * @description For login via GitHub 
     *    
     *     If you want login to system with social networks - you can used Facebook, GitHub, Twitter... api just ask via this Api and cloud_blocko_server responds with object where is token and redirection link. After that redirect user to this link and after returning to your success page you have to ask again (api - get Person by token ) for information about logged Person
     *
     * @param {string} return_link - this is return url address in format  /link/link
     *
     * @returns {ISocialLogin} [code 200] Successfully created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public __loginGitHub(return_link:string):Promise<ISocialLogin> {
        return_link = encodeURIComponent(return_link);
        return this.requestRestPath("GET", `/login/github?return_link=${return_link}`, {}, [200]);
    }

    /**
     * @name __logout
     * @summary logout
     * @operationId logout
     * @tags Access, Person, APP-Api
     *
     * @description for logout person - that's deactivate person token 
     *
     *
     * @returns {IResultOk} [code 200] Successfully logged out
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public __logout():Promise<IResultOk> {
        return this.requestRestPath("POST", `/coreClient/person/permission/logout`, {}, [200]);
    }

    /**
     * @name addProjectParticipant
     * @summary add participant to a Project
     * @operationId project_addParticipant
     * @tags Project
     *
     * @description adds Person to a Project, every piece of information is held in Invitation
     *
     * @param {string} invitation_id
     * @param {boolean} decision
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws [code 500] Server side Error
     */
    public addProjectParticipant(invitation_id:string, decision:boolean):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/addParticipant/${invitation_id}/${decision}`, {}, [200]);
    }

    /**
     * @name cloudInstanceShutDown
     * @summary shutDown Instance by Instnace Id
     * @operationId instance_shut_down
     * @tags Instance
     *
     * @param {string} instance_name
     *
     * @returns {IResultOk} [code 200] Successful removed
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public cloudInstanceShutDown(instance_name:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/instance/shut_down/${instance_name}`, {}, [200]);
    }

    /**
     * @name cloudInstanceUpload
     * @summary upload B Program (version) to cloud
     * @operationId upload_b_Program_ToCloud
     * @tags B_Program
     *
     * @description upload version of B Program to cloud. Its possible have only one version from B program in cloud. If you uploud new one - old one will be replaced
     *
     * @param {string} version_id - version_id String path
     * @param {IBProgramUploadInstance} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successful Uploaded
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public cloudInstanceUpload(version_id:string, body:IBProgramUploadInstance):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/instance/uploadToCloud/${version_id}`, body, [200]);
    }

    /**
     * @name compileCProgram
     * @summary compile C_program with Code
     * @operationId compile_C_Program_code
     * @tags C_Program
     *
     * @description Compile code
     *
     * @param {ICProgramVersionUpdate} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Compilation successful
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws {ICompilationBuildError[]} [code 422] Compilation unsuccessful
     * @throws {IBadRequest} [code 477] External server is offline
     * @throws {IPermissionRequired} [code 478] External server side Error
     * @throws [code 500] Server side Error
     */
    public compileCProgram(body:ICProgramVersionUpdate):Promise<IResultOk> {
        return this.requestRestPath("POST", `/compilation/c_program/version/compile`, body, [200]);
    }

    /**
     * @name compileCProgramVersion
     * @summary compile C_program Version
     * @operationId compile_C_Program_version
     * @tags C_Program
     *
     * @description Compile specific version of C_program - before compilation - you have to update (save) version code
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ICompilationOk} [code 200] Compilation successful
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws {ICompilationBuildError[]} [code 422] Compilation unsuccessful
     * @throws {IBadRequest} [code 477] External server is offline
     * @throws {IBadRequest} [code 478] External server side Error
     * @throws [code 500] Server side Error
     */
    public compileCProgramVersion(version_id:string):Promise<ICompilationOk> {
        return this.requestRestPath("PUT", `/compilation/c_program/version/compile/${version_id}`, {}, [200]);
    }

    /**
     * @name confirmNotification
     * @summary confirm notification
     * @operationId notification_confirm
     * @tags Notifications
     *
     * @description Confirms notification
     *
     * @param {string} notification_id - notification_id String path
     * @param {INotificationConfirm} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public confirmNotification(notification_id:string, body:INotificationConfirm):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/notification/confirm/${notification_id}`, body, [200]);
    }

    /**
     * @name connectBoard
     * @summary connect Board with Project
     * @operationId connect_Board_with_Project
     * @tags Board
     *
     * @description This Api is used by Users for connection of Board with their Project
     *
     * @param {string} board_id
     * @param {string} project_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public connectBoard(board_id:string, project_id:string):Promise<IBoard> {
        return this.requestRestPath("PUT", `/board/${board_id}/${project_id}`, {}, [200]);
    }

    /**
     * @name createBProgram
     * @summary create new B_Program
     * @operationId new_b_Program
     * @tags B_Program
     *
     * @description create new B_Program
     *
     * @param {string} project_id
     * @param {IBProgramNew} body - Contains Json with values
     *
     * @returns {IBProgram} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBProgram(project_id:string, body:IBProgramNew):Promise<IBProgram> {
        return this.requestRestPath("POST", `/b_program/${project_id}`, body, [201]);
    }

    /**
     * @name createBProgramVersion
     * @summary create new Version of B Program
     * @operationId update_b_program_new_version
     * @tags B_Program
     *
     * @description edit Blocko proram / new Version in B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     * @param {IBProgramVersionNew} body - Contains Json with values
     *
     * @returns {IBProgramVersion} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBProgramVersion(b_program_id:string, body:IBProgramVersionNew):Promise<IBProgramVersion> {
        return this.requestRestPath("PUT", `/b_program/version/${b_program_id}`, body, [200]);
    }

    /**
     * @name createBlockoBlock
     * @summary create new Block
     * @operationId blockoBlock_create
     * @tags Blocko-Block
     *
     * @description creating new independent Block object for Blocko tools
     *
     * @param {IBlockoBlockNew} body - Contains Json with values
     *
     * @returns {IBlockoBlock} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something went wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBlockoBlock(body:IBlockoBlockNew):Promise<IBlockoBlock> {
        return this.requestRestPath("POST", `/blockoBlock`, body, [201]);
    }

    /**
     * @name createBlockoBlockSchemeVersion
     * @operationId blockoBlockVersion_createScheme
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public createBlockoBlockSchemeVersion():Promise<IResult> {
        return this.requestRestPath("POST", `/blockoBlock/scheme/version`, {}, [200]);
    }

    /**
     * @name createBlockoBlockVersion
     * @summary create BlockoBlock version
     * @operationId blockoBlockVersion_create
     * @tags Blocko-Block
     *
     * @description new BlockoBlock version
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockBlockoVersionNew} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBlockoBlockVersion(blocko_block_id:string, body:IBlockoBlockBlockoVersionNew):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("POST", `/blockoBlock/version/${blocko_block_id}`, body, [201]);
    }

    /**
     * @name createBlockoServer
     * @summary Create new Blocko Server
     * @operationId create_Blocko_Server
     * @tags External Server
     *
     * @description Create new Gate for Blocko Server
     *
     * @param {ICloudHomerServer} body - Contains Json with values
     *
     * @returns {ICloudHomerServer} [code 201] Successfully created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createBlockoServer(body:ICloudHomerServer):Promise<ICloudHomerServer> {
        return this.requestRestPath("POST", `/blocko_server`, body, [201]);
    }

    /**
     * @name createCProgram
     * @summary Create new C_Program
     * @operationId create_C_Program
     * @tags C_Program
     *
     * @description If you want create new C_program in project.id = {project_id}. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {ICProgramNew} body - Contains Json with values
     *
     * @returns {ICProgram} [code 201] Successful created
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createCProgram(body:ICProgramNew):Promise<ICProgram> {
        return this.requestRestPath("POST", `/compilation/c_program/c_program`, body, [201]);
    }

    /**
     * @name createCProgramVersion
     * @summary new Version of C_Program
     * @operationId new_C_Program_Version
     * @tags C_Program
     *
     * @description If you want add new code to C_program by query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id - version_id String query
     * @param {ICProgramVersionNew} body - Contains Json with values
     *
     * @returns {ICProgramVersion} [code 201] Successful created
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createCProgramVersion(c_program_id:string, body:ICProgramVersionNew):Promise<ICProgramVersion> {
        return this.requestRestPath("POST", `/compilation/c_program/version/create/${c_program_id}`, body, [201]);
    }

    /**
     * @name createLibrary
     * @summary create new SingleLibrary
     * @operationId new_SingleLibrary
     * @tags SingleLibrary
     *
     * @description if you want create new SingleLibrary for C_program compilation
     *
     * @param {ISingleLibraryNew} body - Contains Json with values
     *
     * @returns {ISingleLibrary} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createLibrary(body:ISingleLibraryNew):Promise<ISingleLibrary> {
        return this.requestRestPath("POST", `/compilation/library`, body, [201]);
    }

    /**
     * @name createLibraryGroup
     * @summary Create new LibraryGroup
     * @operationId new_LibraryGroup
     * @tags LibraryGroup
     *
     * @description If you want create new LibraryGroup. Send required json values and server respond with new object
     *
     * @param {ILibraryGroupNew} body - Contains Json with values
     *
     * @returns {ILibraryGroup} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createLibraryGroup(body:ILibraryGroupNew):Promise<ILibraryGroup> {
        return this.requestRestPath("POST", `/compilation/libraryGroup`, body, [201]);
    }

    /**
     * @name createLibraryGroupVersion
     * @summary Create new Version in LibraryGroup
     * @operationId new_LibraryGroup_Version
     * @tags LibraryGroup
     *
     * @description If you want create new versinon in LibraryGroup query = libraryGroup_id. Send required json values and server respond with new object
     *
     * @param {string} libraryGroup_id - libraryGroup_id String query
     * @param {ILibraryGroupVersion} body - Contains Json with values
     *
     * @returns {IVersionObject} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createLibraryGroupVersion(libraryGroup_id:string, body:ILibraryGroupVersion):Promise<IVersionObject> {
        return this.requestRestPath("POST", `/compilation/libraryGroup/version/${libraryGroup_id}`, body, [201]);
    }

    /**
     * @name createLibraryVersion
     * @summary create new SingleLibrary
     * @operationId new_SingleLibrary_Version
     * @tags SingleLibrary
     *
     * @description if you want create new SingleLibrary for C_program compilation
     *
     * @param {string} library_id - library_id String query
     * @param {ISingleLibraryVersion} body - Contains Json with values
     *
     * @returns {IVersionObject} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createLibraryVersion(library_id:string, body:ISingleLibraryVersion):Promise<IVersionObject> {
        return this.requestRestPath("POST", `/compilation/library/version/${library_id}`, body, [201]);
    }

    /**
     * @name createMProgram
     * @summary Create new M_Program
     * @operationId new_M_Program
     * @tags M_Program
     *
     * @description creating new M_Program
     *
     * @param {string} m_project_id - m_project_id
     * @param {IMProgramNew} body - Contains Json with values
     *
     * @returns {IMProgram} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createMProgram(m_project_id:string, body:IMProgramNew):Promise<IMProgram> {
        return this.requestRestPath("POST", `/m_program/${m_project_id}`, body, [201]);
    }

    /**
     * @name createMProgramVersion
     * @summary Create new Version of M_Program
     * @operationId new_M_Program_version
     * @tags M_Program
     *
     * @description creating new Version M_Program
     *
     * @param {string} m_program_id - m_program_id
     * @param {ISwaggerMProgramVersionNew} body - Contains Json with values
     *
     * @returns {IMProgramVersion} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createMProgramVersion(m_program_id:string, body:ISwaggerMProgramVersionNew):Promise<IMProgramVersion> {
        return this.requestRestPath("POST", `/m_program/version/${m_program_id}`, body, [201]);
    }

    /**
     * @name createMProject
     * @summary Create new M_Project
     * @operationId new_M_Project
     * @tags M_Program
     *
     * @description M_Project is package for M_Programs -> presupposition is that you need more control terminal for your IoT project. Different screens for family members, for employee etc.. But of course - you can used that for only one M_program
     *
     * @param {string} project_id
     * @param {IMProjectNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 201] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createMProject(project_id:string, body:IMProjectNew):Promise<IMProject> {
        return this.requestRestPath("POST", `/m_project/${project_id}`, body, [201]);
    }

    /**
     * @name createPerson
     * @summary register new Person
     * @operationId registred_Person
     * @tags Person
     *
     * @description create new Person with unique email and nick_name, for standard registration leave invitationToken empty, it's used only if someone is invited via email
     *
     * @param {IPersonNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createPerson(body:IPersonNew):Promise<IResultOk> {
        return this.requestRestPath("POST", `/coreClient/person/person`, body, [200]);
    }

    /**
     * @name createPersonChangeProperty
     * @summary change person login info
     * @operationId changePersonLoginProperty
     * @tags Person
     *
     * @description Request password or email change. API does not change password or email, only sends email for authorization of the change and holds values in different object.JSON value 'property' contains only 'password' or 'email'
     *
     * @param {IPersonChangeProperty} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public createPersonChangeProperty(body:IPersonChangeProperty):Promise<IResultOk> {
        return this.requestRestPath("POST", `/coreClient/person/changeProperty`, body, [200]);
    }

    /**
     * @name createProduct
     * @summary create Product under Tariff
     * @operationId product_create
     * @tags Price & Invoice & Tariffs
     *
     * @description Its basic object. Peak of Pyramid :). This Api is used for its creation. You can get two kind of response: 
     *    
     *    First(201):  System create new Object - Object Product 
     *    
     *    Second(200): The product requires payment - The server creates an object, but returns the payment details - payment go_url for GoPay Terminal!
     *
     * @param {ITariffRegister} body - Contains Json with values
     *
     * @returns {IGoPayUrl|IProduct} [code 200|201] Created successfully - but payment is required|Created successfully - payment not required
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createProduct(body:ITariffRegister):Promise<IGoPayUrl|IProduct> {
        return this.requestRestPath("POST", `/product`, body, [200,201]);
    }

    /**
     * @name createProject
     * @summary create new Project
     * @operationId project_create
     * @tags Project
     *
     * @description create new Project
     *
     * @param {IProjectNew} body - Contains Json with values
     *
     * @returns {IProject} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createProject(body:IProjectNew):Promise<IProject> {
        return this.requestRestPath("POST", `/project`, body, [201]);
    }

    /**
     * @name createSecureRole
     * @summary create new Role
     * @operationId new_Role
     * @tags Role
     *
     * @description If you want create new Role in system. You need permission for that or have right system Roles
     *
     * @param {ISecurityRoleNew} body - Contains Json with values
     *
     * @returns {ISecurityRole} [code 201] Successfully created
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createSecureRole(body:ISecurityRoleNew):Promise<ISecurityRole> {
        return this.requestRestPath("POST", `/secure/role`, body, [201]);
    }

    /**
     * @name createTypeOfBlock
     * @summary create new Type of Block
     * @operationId typeOfBlock_create
     * @tags Type-of-Block
     *
     * @description creating group for BlockoBlocks -> Type of block
     *
     * @param {ITypeOfBlockNew} body - Contains Json with values
     *
     * @returns {ITypeOfBlock} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createTypeOfBlock(body:ITypeOfBlockNew):Promise<ITypeOfBlock> {
        return this.requestRestPath("POST", `/typeOfBlock`, body, [201]);
    }

    /**
     * @name createTypeOfBoard
     * @summary create TypeOfBoard
     * @operationId new_TypeOfBoard
     * @tags Type-Of-Board
     *
     * @description The TypeOfBoard is category for IoT. Like Raspberry2, Arduino-Uno etc. 
     *    
     *    We using that for compilation, sorting libraries, filtres and more..
     *
     * @param {ITypeOfBoardNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoard} [code 201] Successfully created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createTypeOfBoard(body:ITypeOfBoardNew):Promise<ITypeOfBoard> {
        return this.requestRestPath("POST", `/typeOfBoard`, body, [201]);
    }

    /**
     * @name createTypeOfWidget
     * @summary create new Type of Widget
     * @operationId typeOfWidget_create
     * @tags Type-of-Widget
     *
     * @description creating group for GridWidgets -> Type of Widget
     *
     * @param {ITypeOfWidgetNew} body - Contains Json with values
     *
     * @returns {ITypeOfWidget} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createTypeOfWidget(body:ITypeOfWidgetNew):Promise<ITypeOfWidget> {
        return this.requestRestPath("POST", `/type_of_widget`, body, [201]);
    }

    /**
     * @name createWidget
     * @summary create new Widget
     * @operationId gridWidget_create
     * @tags Grid-Widget
     *
     * @description creating new independent Widget object for Grid tools
     *
     * @param {IGridWidgetNew} body - Contains Json with values
     *
     * @returns {IGridWidget} [code 201] Successfully created
     *
     * @throws {IBadRequest} [code 400] Something went wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createWidget(body:IGridWidgetNew):Promise<IGridWidget> {
        return this.requestRestPath("POST", `/grid_widget`, body, [201]);
    }

    /**
     * @name createWidgetSchemeVersion
     * @operationId gridWidgetVersion_createScheme
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public createWidgetSchemeVersion():Promise<IResult> {
        return this.requestRestPath("POST", `/grid_widget/scheme/version`, {}, [200]);
    }

    /**
     * @name createWidgetVersion
     * @summary create GridWidget version
     * @operationId gridWidgetVersion_create
     * @tags Grid-Widget
     *
     * @description new GridWidget version
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     * @param {IGridWidgetVersionNew} body - Contains Json with values
     *
     * @returns {IGridWidgetVersion} [code 201] Successfully created
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public createWidgetVersion(grid_widget_id:string, body:IGridWidgetVersionNew):Promise<IGridWidgetVersion> {
        return this.requestRestPath("POST", `/grid_widget/version/${grid_widget_id}`, body, [201]);
    }

    /**
     * @name deleteBProgram
     * @summary remove B Program
     * @operationId remove_b_Program
     * @tags B_Program
     *
     * @description remove B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBProgram(b_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name deleteBProgramVersion
     * @summary remove B Program version
     * @operationId remove_b_Program_version
     * @tags B_Program
     *
     * @description remove B_Program version object
     *
     * @param {string} version_id - version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBProgramVersion(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name deleteBlockoBlock
     * @summary delete BlockoBlock
     * @operationId blockoBlock_delete
     * @tags Blocko-Block
     *
     * @description delete BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBlockoBlock(blocko_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/blockoBlock/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name deleteBlockoBlockVersion
     * @summary delete BlockoBlock version
     * @operationId blockoBlockVersion_delete
     * @tags Blocko-Block
     *
     * @description delete BlockoBlock version
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBlockoBlockVersion(blocko_block_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/blockoBlock/version/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name deleteBlockoServer
     * @summary remove Compilation Servers
     * @operationId delete_Blocko_Server
     * @tags External Server
     *
     * @description remove Compilation Servers
     *
     * @param {string} server_id - server_id 
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBlockoServer(server_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/blocko_server/${server_id}`, {}, [200]);
    }

    /**
     * @name deleteBoard
     * @summary deactivate Board
     * @operationId deactivate_Board
     * @tags Board
     *
     * @description Permanent exclusion from the system - for some reason it is not allowed to remove the Board from database
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteBoard(board_id:string):Promise<IBoard> {
        return this.requestRestPath("DELETE", `/board/deactivateBoard/${board_id}`, {}, [200]);
    }

    /**
     * @name deleteCProgram
     * @summary delete C_program
     * @operationId delete_C_Program
     * @tags C_Program
     *
     * @description delete C_program by query = c_program_id, query = version_id
     *
     * @param {string} c_program_id - c_program_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteCProgram(c_program_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/c_program/c_program/${c_program_id}`, {}, [200]);
    }

    /**
     * @name deleteCProgramVersion
     * @summary delete Version in C_program
     * @operationId delete_C_Program_Version
     * @tags C_Program
     *
     * @description delete Version.id = version_id in C_program by query = c_program_id, query = version_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteCProgramVersion(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/c_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name deleteConnection
     * @summary terminate logging
     * @operationId remove_Person_Connection
     * @tags Person
     *
     * @description You know where the user is logged in. And you can log out this connection. (Terminate token)
     *
     * @param {string} connection_id
     *
     * @returns {IResultOk} [code 200] Its possible used that
     *
     * @throws {IObjectNotFound} [code 400] Not Found object
     * @throws [code 500] Server side Error
     */
    public deleteConnection(connection_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/coreClient/connection/${connection_id}`, {}, [200]);
    }

    /**
     * @name deleteLibrary
     * @summary delete SingleLibrary
     * @operationId delete_SingleLibrary
     * @tags SingleLibrary
     *
     * @description If you want delete SingleLibrary by query = library_id
     *
     * @param {string} library_id - library_id String query
     *
     * @returns {IResultOk} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteLibrary(library_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/library/${library_id}`, {}, [200]);
    }

    /**
     * @name deleteLibraryGroup
     * @summary delete LibraryGroup
     * @operationId delete_LibraryGroup
     * @tags LibraryGroup
     *
     * @description If you want delete LibraryGroup by query = libraryGroup_id
     *
     * @param {string} libraryGroup_id - libraryGroup_id String query
     *
     * @returns {IResultOk} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteLibraryGroup(libraryGroup_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/compilation/libraryGroup/${libraryGroup_id}`, {}, [200]);
    }

    /**
     * @name deleteMProgram
     * @summary remove M_Program
     * @operationId remove_M_Program
     * @tags M_Program
     *
     * @description remove M_Program by quarry = m_program_id
     *
     * @param {string} m_progrm_id - m_program_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteMProgram(m_progrm_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/m_program/${m_progrm_id}`, {}, [200]);
    }

    /**
     * @name deleteMProgramVersion
     * @summary Remove  Version of M_Program
     * @operationId remove_M_Program_version
     * @tags M_Program
     *
     * @description remove bersion of M_Program
     *
     * @param {string} m_program_version_id - m_program_version_id
     *
     * @returns {IResultOk|IResult} [code 200|201] Successfully created|successful operation
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteMProgramVersion(m_program_version_id:string):Promise<IResultOk|IResult> {
        return this.requestRestPath("DELETE", `/m_program/version/${m_program_version_id}`, {}, [200,201]);
    }

    /**
     * @name deleteMProject
     * @summary remove M_Project
     * @operationId remove_M_Project
     * @tags M_Program
     *
     * @description remove M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteMProject(m_project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/m_project/${m_project_id}`, {}, [200]);
    }

    /**
     * @name deleteNotification
     * @summary delete notification
     * @operationId delete_notification
     * @tags Notifications
     *
     * @description remove notification by id
     *
     * @param {string} notification_id - notification_id String path
     *
     * @returns {IResultOk} [code 200] Delete Successful
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteNotification(notification_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/notification/${notification_id}`, {}, [200]);
    }

    /**
     * @name deleteProject
     * @summary delete Project
     * @operationId project_delete
     * @tags Project
     *
     * @description delete Projects by project_id
     *
     * @param {string} project_id - project_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteProject(project_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/${project_id}`, {}, [200]);
    }

    /**
     * @name deleteProjectDeleteInvitation
     * @summary delete Invitation into Project
     * @operationId project_deleteInvitation
     * @tags Project
     *
     * @description Deletes invitation into the Project, also deletes notification about this invitation.
     *
     * @param {string} invitation_id - invitation_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public deleteProjectDeleteInvitation(invitation_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/project/deleteInvitation/${invitation_id}`, {}, [200]);
    }

    /**
     * @name deleteTypeOfBlock
     * @summary delete Type of Block
     * @operationId typeOfBlock_delete
     * @tags Type-of-Block
     *
     * @description delete group for BlockoBlocks -> Type of block
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteTypeOfBlock(type_of_block_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/typeOfBlock/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name deleteTypeOfBoard
     * @summary delete TypeOfBoard
     * @operationId delete_TypeOfBoard
     * @tags Type-Of-Board
     *
     * @description if you want delete TypeOfBoard object by query = type_of_board_id
     *
     * @param {string} type_of_board_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteTypeOfBoard(type_of_board_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/typeOfBoard/${type_of_board_id}`, {}, [200]);
    }

    /**
     * @name deleteTypeOfWidget
     * @summary delete Type of Widget
     * @operationId typeOfWidget_delete
     * @tags Type-of-Widget
     *
     * @description delete group for GridWidgets -> Type of widget
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteTypeOfWidget(type_of_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/type_of_widget/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name deleteWidget
     * @summary delete GridWidget
     * @operationId gridWidget_delete
     * @tags Grid-Widget
     *
     * @description delete GridWidget
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteWidget(grid_widget_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid_widget/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name deleteWidgetVersion
     * @summary delete GridWidget version
     * @operationId gridWidgetVersion_delete
     * @tags Grid-Widget
     *
     * @description delete GridWidget version
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public deleteWidgetVersion(grid_widget_version_id:string):Promise<IResultOk> {
        return this.requestRestPath("DELETE", `/grid_widget/version/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name disconnectBoard
     * @summary disconnect Board from Project
     * @operationId disconnect_Board_from_Project
     * @tags Board
     *
     * @description This Api is used by Users for disconnection of Board from their Project, its not meaning that Board is removed from system, only disconnect and another user can registred that (connect that with different account/project etc..)
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public disconnectBoard(board_id:string):Promise<IBoard> {
        return this.requestRestPath("DELETE", `/board/${board_id}`, {}, [200]);
    }

    /**
     * @name editBProgram
     * @summary edit B_Program
     * @operationId edit_b_Program
     * @tags B_Program
     *
     * @description edit basic information in B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     * @param {IBProgramNew} body - Contains Json with values
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editBProgram(b_program_id:string, body:IBProgramNew):Promise<IBProgram> {
        return this.requestRestPath("PUT", `/b_program/${b_program_id}`, body, [200]);
    }

    /**
     * @name editBlockoBlock
     * @summary edit basic information of the BlockoBlock
     * @operationId blockoBlock_update
     * @tags Blocko-Block
     *
     * @description update basic information (name, and description) of the independent BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockNew} body - Contains Json with values
     *
     * @returns {IBlockoBlock} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editBlockoBlock(blocko_block_id:string, body:IBlockoBlockNew):Promise<IBlockoBlock> {
        return this.requestRestPath("PUT", `/blockoBlock/${blocko_block_id}`, body, [200]);
    }

    /**
     * @name editBlockoBlockVersion
     * @summary edit BlockoBlock version
     * @operationId blockoBlockVersion_update
     * @tags Blocko-Block
     *
     * @description You can edit only basic information of the version. If you want to update the code, you have to create a new version!
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     * @param {IBlockoBlockBlockoVersionEdit} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editBlockoBlockVersion(blocko_block_version_id:string, body:IBlockoBlockBlockoVersionEdit):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("PUT", `/blockoBlock/version/${blocko_block_version_id}`, body, [200]);
    }

    /**
     * @name editBlockoServer
     * @summary edit Compilation Server
     * @operationId edit_Blocko_Server
     * @tags External Server
     *
     * @description Edit basic information Compilation Server
     *
     * @param {string} server_id - server_id 
     * @param {ICloudHomerServer} body - Contains Json with values
     *
     * @returns {ICloudHomerServer} [code 200] Updated successfully
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editBlockoServer(server_id:string, body:ICloudHomerServer):Promise<ICloudHomerServer> {
        return this.requestRestPath("PUT", `/blocko_server/${server_id}`, body, [200]);
    }

    /**
     * @name editBoardUserDescription
     * @summary edit Board - update personal description
     * @operationId edit_Board_User_Description
     * @tags Board
     *
     * @description Used for add descriptions by owners. "Persons" who registred "Board" to own "Projec" 
     *
     * @param {string} type_of_board_id
     * @param {IBoardPersonalDescription} body - Contains Json with values
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editBoardUserDescription(type_of_board_id:string, body:IBoardPersonalDescription):Promise<IBoard> {
        return this.requestRestPath("PUT", `/board/userDescription/${type_of_board_id}`, body, [200]);
    }

    /**
     * @name editCProgram
     * @summary Edit C_Program
     * @operationId edit_C_Program
     * @tags C_Program
     *
     * @description If you want edit base information about C_program by  query = c_program_id. Send required json values and cloud_compilation_server respond with new object
     *
     * @param {string} c_program_id - c_program_id String query
     * @param {ICProgramNew} body - Contains Json with values
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editCProgram(c_program_id:string, body:ICProgramNew):Promise<ICProgram> {
        return this.requestRestPath("PUT", `/compilation/c_program/c_program/${c_program_id}`, body, [200]);
    }

    /**
     * @name editCProgramVersion
     * @summary update basic information in Version of C_program
     * @operationId edit_C_Program_version
     * @tags C_Program
     *
     * @description For update basic (name and description) information in Version of C_program. If you want update code. You have to create new version. And after that you can delete previous version
     *
     * @param {string} version_id - version_id String query
     * @param {ICProgramVersionEdit} body - Contains Json with values
     *
     * @returns {IVersionObject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editCProgramVersion(version_id:string, body:ICProgramVersionEdit):Promise<IVersionObject> {
        return this.requestRestPath("PUT", `/compilation/c_program/version/edit/${version_id}`, body, [200]);
    }

    /**
     * @name editLibrary
     * @summary edit SingleLibrary
     * @operationId edit_SingleLibrary
     * @tags SingleLibrary
     *
     * @description if you want edit name or description of SingleLibrary by query = library_id
     *
     * @param {string} library_id - library_id String query
     * @param {ISingleLibraryNew} body - Contains Json with values
     *
     * @returns {ISingleLibrary} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editLibrary(library_id:string, body:ISingleLibraryNew):Promise<ISingleLibrary> {
        return this.requestRestPath("PUT", `/compilation/library/${library_id}`, body, [200]);
    }

    /**
     * @name editLibraryGroup
     * @summary edit LibraryGroup
     * @operationId editLibraryGroup
     * @tags LibraryGroup
     *
     * @description If you want edit LibraryGroup by query libraryGroup_id. Send required json values and server respond with new object
     *
     * @param {string} libraryGroup_id - libraryGroup_id String query
     * @param {ILibraryGroupNew} body - Contains Json with values
     *
     * @returns {ILibraryGroup} [code 200] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editLibraryGroup(libraryGroup_id:string, body:ILibraryGroupNew):Promise<ILibraryGroup> {
        return this.requestRestPath("PUT", `/compilation/libraryGroup/${libraryGroup_id}`, body, [200]);
    }

    /**
     * @name editMProgram
     * @summary update M_Program
     * @operationId edit_M_Program
     * @tags M_Program
     *
     * @description update m_project - in this case we are not support versions of m_project
     *
     * @param {string} m_progrm_id - m_program_id String query
     * @param {IMProgramNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editMProgram(m_progrm_id:string, body:IMProgramNew):Promise<IMProject> {
        return this.requestRestPath("PUT", `/m_program/${m_progrm_id}`, body, [200]);
    }

    /**
     * @name editMProject
     * @summary edit M_Project
     * @operationId edit_M_Project
     * @tags M_Program
     *
     * @description edit basic information in M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     * @param {IMProjectNew} body - Contains Json with values
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editMProject(m_project_id:string, body:IMProjectNew):Promise<IMProject> {
        return this.requestRestPath("PUT", `/m_project/${m_project_id}`, body, [200]);
    }

    /**
     * @name editPerson
     * @summary edit Person basic information
     * @operationId edit_Person_Information
     * @tags Person
     *
     * @description Edit person basic information
     *
     * @param {string} person_id
     * @param {IPersonUpdate} body - Contains Json with values
     *
     * @returns {IPerson} [code 200] Successful updated
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editPerson(person_id:string, body:IPersonUpdate):Promise<IPerson> {
        return this.requestRestPath("PUT", `/coreClient/person/person/${person_id}`, body, [200]);
    }

    /**
     * @name editProcessor
     * @summary update Processor
     * @operationId update_Processor
     * @tags Processor
     *
     * @description If you want update Processor.id by query = processor_id . Send required json values and server respond with update object
     *
     * @param {string} processor_id - processor_id String query
     * @param {IProcessorNew} body - Contains Json with values
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editProcessor(processor_id:string, body:IProcessorNew):Promise<IProcessor> {
        return this.requestRestPath("PUT", `/processor/${processor_id}`, body, [200]);
    }

    /**
     * @name editProductDetails
     * @summary edit Tariff payment details
     * @operationId edit_payment_details
     * @tags Price & Invoice & Tariffs
     *
     * @description edit payments details in Tariff
     *
     * @param {number} payment_details_id
     * @param {ITariffDetailsEdit} body - Contains Json with values
     *
     * @returns {IPaymentDetails} [code 200] Successfully updated
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editProductDetails(payment_details_id:number, body:ITariffDetailsEdit):Promise<IPaymentDetails> {
        return this.requestRestPath("PUT", `/product/details/${payment_details_id}`, body, [200]);
    }

    /**
     * @name editProductGeneral
     * @summary edit Tariff general details
     * @operationId edit_general_product_details
     * @tags Price & Invoice & Tariffs
     *
     * @description edit basic details on user Tariff
     *
     * @param {number} product_id
     * @param {ISwaggerTariffGeneralEdit} body - Contains Json with values
     *
     * @returns {IProduct} [code 200] Successfully updated
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editProductGeneral(product_id:number, body:ISwaggerTariffGeneralEdit):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/general/${product_id}`, body, [200]);
    }

    /**
     * @name editProject
     * @summary edit Project
     * @operationId project_update
     * @tags Project
     *
     * @description edit ne Project
     *
     * @param {string} project_id - project_id String path
     * @param {IProjectEdit} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editProject(project_id:string, body:IProjectEdit):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/${project_id}`, body, [200]);
    }

    /**
     * @name editTypeOfBlock
     * @summary edit Type of Block
     * @operationId typeOfBlock_update
     * @tags Type-of-Block
     *
     * @description edit Type of block object
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     * @param {ITypeOfBlockNew} body - Contains Json with values
     *
     * @returns {ITypeOfBlock} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editTypeOfBlock(type_of_block_id:string, body:ITypeOfBlockNew):Promise<ITypeOfBlock> {
        return this.requestRestPath("PUT", `/typeOfBlock/${type_of_block_id}`, body, [200]);
    }

    /**
     * @name editTypeOfBoard
     * @summary edit TypeOfBoard
     * @operationId edit_TypeOfBoard
     * @tags Type-Of-Board
     *
     * @description if you want edit base TypeOfBoard information
     *
     * @param {string} type_of_board_id
     * @param {ITypeOfBoardNew} body - Contains Json with values
     *
     * @returns {ITypeOfBoard} [code 200] Ok Result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editTypeOfBoard(type_of_board_id:string, body:ITypeOfBoardNew):Promise<ITypeOfBoard> {
        return this.requestRestPath("PUT", `/typeOfBoard/${type_of_board_id}`, body, [200]);
    }

    /**
     * @name editTypeOfWidget
     * @summary edit Type of Widget
     * @operationId typeOfWidget_edit
     * @tags Type-of-Widget
     *
     * @description edit Type of widget object
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     * @param {ITypeOfWidgetNew} body - Contains Json with values
     *
     * @returns {ITypeOfWidget} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editTypeOfWidget(type_of_widget_id:string, body:ITypeOfWidgetNew):Promise<ITypeOfWidget> {
        return this.requestRestPath("PUT", `/type_of_widget/${type_of_widget_id}`, body, [200]);
    }

    /**
     * @name editWidget
     * @summary edit basic information of the GridWidget
     * @operationId gridWidget_edit
     * @tags Grid-Widget
     *
     * @description update basic information (name, and description) of the independent GridWidget
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     * @param {IGridWidgetNew} body - Contains Json with values
     *
     * @returns {IGridWidget} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editWidget(grid_widget_id:string, body:IGridWidgetNew):Promise<IGridWidget> {
        return this.requestRestPath("PUT", `/grid_widget/${grid_widget_id}`, body, [200]);
    }

    /**
     * @name editWidgetVersion
     * @summary edit GridWidget version
     * @operationId gridWidgetVersion_edit
     * @tags Grid-Widget
     *
     * @description You can edit only basic information of the version. If you want to update the code, you have to create a new version!
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     * @param {IGridWidgetVersionEdit} body - Contains Json with values
     *
     * @returns {IGridWidgetVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public editWidgetVersion(grid_widget_version_id:string, body:IGridWidgetVersionEdit):Promise<IGridWidgetVersion> {
        return this.requestRestPath("PUT", `/grid_widget/version/${grid_widget_version_id}`, body, [200]);
    }

    /**
     * @name getActualizationProcedure
     * @summary get actualization Procedure
     * @operationId get_Actualization_Procedure
     * @tags Actualization
     *
     * @description get all versions (content) from independent BlockoBlock
     *
     * @param {string} actualization_procedure_id
     *
     * @returns {IActualizationProcedure} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getActualizationProcedure(actualization_procedure_id:string):Promise<IActualizationProcedure> {
        return this.requestRestPath("GET", `/actualization_procedure/${actualization_procedure_id}`, {}, [200]);
    }

    /**
     * @name getAllBlockoBlockSchemeVersions
     * @operationId blockoBlockVersion_getScheme
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public getAllBlockoBlockSchemeVersions():Promise<IResult> {
        return this.requestRestPath("GET", `/blockoBlock/scheme/version`, {}, [200]);
    }

    /**
     * @name getAllBlockoBlockVersions
     * @summary get all BlockoBlock version
     * @operationId blockoBlockVersion_getAll
     * @tags Blocko-Block
     *
     * @description get all versions (content) from independent BlockoBlock
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     * @param {IBlockoBlockBlockoVersionNew} body - Contains Json with values
     *
     * @returns {IBlockoBlockVersion[]} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllBlockoBlockVersions(blocko_block_id:string, body:IBlockoBlockBlockoVersionNew):Promise<IBlockoBlockVersion[]> {
        return this.requestRestPath("GET", `/blockoBlock/version/all/${blocko_block_id}`, body, [200]);
    }

    /**
     * @name getAllBlockoDetails
     * @summary get Boards details for integration to Blocko program
     * @operationId all_details_for_blocko
     * @tags Blocko, B_Program
     *
     * @description get all boards that user can integrate to Blocko program
     *
     * @param {string} project_id
     *
     * @returns {IBoardsForBlocko} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllBlockoDetails(project_id:string):Promise<IBoardsForBlocko> {
        return this.requestRestPath("GET", `/blocko/all_details/${project_id}`, {}, [200]);
    }

    /**
     * @name getAllBlockoServers
     * @summary get all Blocko Servers
     * @operationId get_All_Blocko_Server
     * @tags External Server
     *
     * @description get all Blocko Servers
     *
     *
     * @returns {ICloudHomerServer} [code 200] Ok Result
     *
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllBlockoServers():Promise<ICloudHomerServer> {
        return this.requestRestPath("GET", `/blocko_server`, {}, [200]);
    }

    /**
     * @name getAllConnections
     * @summary get logged connections
     * @operationId get_Person_Connections
     * @tags Person
     *
     * @description get all connections, where user is logged
     *
     *
     * @returns {IFloatingPersonToken[]} [code 200] Its possible used that
     *
     * @throws {IObjectNotFound} [code 400] Not Found object
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllConnections():Promise<IFloatingPersonToken[]> {
        return this.requestRestPath("GET", `/coreClient/connections`, {}, [200]);
    }

    /**
     * @name getAllInstancesForProject
     * @summary get Instance by Project ID
     * @operationId get_b_program_instance_under_project
     * @tags Instance
     *
     * @description get unique instance under Blocko program (now its 1:1) we are not supporting multi-instnace schema yet
     *
     * @param {string} project_id
     *
     * @returns {IHomerInstance[]} [code 200] Successful Uploaded
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllInstancesForProject(project_id:string):Promise<IHomerInstance[]> {
        return this.requestRestPath("GET", `/instance/project/${project_id}`, {}, [200]);
    }

    /**
     * @name getAllMProgramAppPrograms
     * @summary get all M_Project( Programs) by Logged Person
     * @operationId get_M_Project_all_forTerminal
     * @tags APP-Api
     *
     * @description get list of M_Programs by logged Person accasable and connectable to Homer server
     *
     *
     * @returns {ITerminalMProjectSnapshot[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllMProgramAppPrograms():Promise<ITerminalMProjectSnapshot[]> {
        return this.requestRestPath("GET", `/m_program/app/all_m_programs`, {}, [200]);
    }

    /**
     * @name getAllPersons
     * @summary get all Person
     * @operationId get_Person_all
     * @tags Person
     *
     * @description get all Persons
     *
     *
     * @returns {IPerson[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllPersons():Promise<IPerson[]> {
        return this.requestRestPath("GET", `/coreClient/person/person/all`, {}, [200]);
    }

    /**
     * @name getAllProcessors
     * @summary get all Processors
     * @operationId get_Processor_All
     * @tags Processor
     *
     * @description If you want get Processor by query processor_id.
     *
     *
     * @returns {IProcessor[]} [code 200] Ok Result
     *
     * @throws [code 500] Server side Error
     */
    public getAllProcessors():Promise<IProcessor[]> {
        return this.requestRestPath("GET", `/processor`, {}, [200]);
    }

    /**
     * @name getAllProducers
     * @summary get all Producers
     * @operationId get_Producers
     * @tags Producer
     *
     * @description if you want get list of Producers. Its list of companies owned physical boards and we used that for filtering
     *
     *
     * @returns {IProducer[]} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllProducers():Promise<IProducer[]> {
        return this.requestRestPath("GET", `/producer/all`, {}, [200]);
    }

    /**
     * @name getAllProductUserApplicables
     * @summary get all the products that the User can use
     * @operationId get_applicable_products_for_creating_new_project
     * @tags Price & Invoice & Tariffs
     *
     * @description get all the products that the user can use when creating new projects
     *
     *
     * @returns {IApplicableProduct[]} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllProductUserApplicables():Promise<IApplicableProduct[]> {
        return this.requestRestPath("GET", `/product/user_applicable`, {}, [200]);
    }

    /**
     * @name getAllProducts
     * @summary get all Products with all information's
     * @operationId product_get_all
     * @tags Price & Invoice & Tariffs
     *
     *
     * @returns {IProduct[]} [code 200] List of users Products
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllProducts():Promise<IProduct[]> {
        return this.requestRestPath("GET", `/product/all`, {}, [200]);
    }

    /**
     * @name getAllProjects
     * @summary get Project by logged Person
     * @operationId project_getByUser
     * @tags Project
     *
     * @description get all Projects by logged Person
     *
     *
     * @returns {IProject[]} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllProjects():Promise<IProject[]> {
        return this.requestRestPath("GET", `/project`, {}, [200]);
    }

    /**
     * @name getAllSecurePermissions
     * @summary get all system Permissions
     * @operationId get_Permission_All
     * @tags Permission
     *
     * @description Get all user Permission. You need permission for that or have right system Roles
     *
     *
     * @returns {IPersonPermission[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllSecurePermissions():Promise<IPersonPermission[]> {
        return this.requestRestPath("GET", `/secure/permission/all`, {}, [200]);
    }

    /**
     * @name getAllSecureRoles
     * @summary get all Role from system
     * @operationId get_Role_All
     * @tags Role
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     *
     * @returns {ISecurityRole[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllSecureRoles():Promise<ISecurityRole[]> {
        return this.requestRestPath("GET", `/secure/role/all`, {}, [200]);
    }

    /**
     * @name getAllTarifsForRegistrations
     * @summary get all Product Tariffs
     * @operationId get_products_tariffs
     * @tags Price & Invoice & Tariffs
     *
     * @description get all Tariffs - required for every else action in system. For example: Project is created under the Product tariff
     *
     *
     * @returns {IGeneralTariff[]} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllTarifsForRegistrations():Promise<IGeneralTariff[]> {
        return this.requestRestPath("GET", `/tarifs/for_registration`, {}, [200]);
    }

    /**
     * @name getAllTypeOfBlocks
     * @summary get all Type of Block list
     * @operationId typeOfBlock_getAll
     * @tags Type-of-Block
     *
     * @description get all groups for BlockoBlocks -> Type of block
     *
     *
     * @returns {ITypeOfBlock[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllTypeOfBlocks():Promise<ITypeOfBlock[]> {
        return this.requestRestPath("GET", `/typeOfBlock`, {}, [200]);
    }

    /**
     * @name getAllTypeOfBoards
     * @summary get list of all TypeOfBoard
     * @operationId get_TypeOfBoard_all
     * @tags Type-Of-Board
     *
     * @description if you want get all TypeOfBoard objects
     *
     *
     * @returns {ITypeOfBoard[]} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllTypeOfBoards():Promise<ITypeOfBoard[]> {
        return this.requestRestPath("GET", `/typeOfBoard/all`, {}, [200]);
    }

    /**
     * @name getAllTypeOfWidgets
     * @summary get all Type of Widget list
     * @operationId typeOfWidget_getAll
     * @tags Type-of-Widget
     *
     * @description get all groups for GridWidgets -> Type of widget
     *
     *
     * @returns {ITypeOfWidget[]} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllTypeOfWidgets():Promise<ITypeOfWidget[]> {
        return this.requestRestPath("GET", `/type_of_widget`, {}, [200]);
    }

    /**
     * @name getAllUnconfirmedNotifications
     * @summary get unconfirmed notifications
     * @operationId get_unconfirmed_notifications
     * @tags Notifications
     *
     * @description This API should by called right after user logs in. Sends notifications which require confirmation via websocket.
     *
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public getAllUnconfirmedNotifications():Promise<IResultOk> {
        return this.requestRestPath("GET", `/notification/unconfirmed`, {}, [200]);
    }

    /**
     * @name getAllWidgetSchemeVersions
     * @operationId gridWidgetVersion_getScheme
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public getAllWidgetSchemeVersions():Promise<IResult> {
        return this.requestRestPath("GET", `/grid_widget/scheme/version`, {}, [200]);
    }

    /**
     * @name getAllWidgetVersions
     * @summary get all GridWidget version
     * @operationId gridWidgetVersion_getAll
     * @tags Grid-Widget
     *
     * @description get all versions (content) from independent GridWidget
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     * @param {IGridWidgetVersionNew} body - Contains Json with values
     *
     * @returns {IGridWidgetVersion[]} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getAllWidgetVersions(grid_widget_id:string, body:IGridWidgetVersionNew):Promise<IGridWidgetVersion[]> {
        return this.requestRestPath("GET", `/grid_widget/version/all/${grid_widget_id}`, body, [200]);
    }

    /**
     * @name getBProgram
     * @summary get B Program
     * @operationId get_b_Program
     * @tags B_Program
     *
     * @description get B_Program object
     *
     * @param {string} b_program_id - b_program_id String path
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBProgram(b_program_id:string):Promise<IBProgram> {
        return this.requestRestPath("GET", `/b_program/${b_program_id}`, {}, [200]);
    }

    /**
     * @name getBProgramVersion
     * @summary get B Program version
     * @operationId get_b_Program_version
     * @tags B_Program
     *
     * @description get B_Program version object
     *
     * @param {string} version_id - version_id String path
     *
     * @returns {IBProgram} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBProgramVersion(version_id:string):Promise<IBProgram> {
        return this.requestRestPath("GET", `/b_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name getBlockoBlock
     * @summary get BlockoBlock
     * @operationId blockoBlock_get
     * @tags Blocko-Block
     *
     * @description get independent BlockoBlock object
     *
     * @param {string} blocko_block_id - blocko_block_id String path
     *
     * @returns {IBlockoBlock} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBlockoBlock(blocko_block_id:string):Promise<IBlockoBlock> {
        return this.requestRestPath("GET", `/blockoBlock/${blocko_block_id}`, {}, [200]);
    }

    /**
     * @name getBlockoBlockVersion
     * @summary get version of the BlockoBlock
     * @operationId blockoBlockVersion_get
     * @tags Blocko-Block
     *
     * @description get version (content) from independent BlockoBlock
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBlockoBlockVersion(blocko_block_version_id:string):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("GET", `/blockoBlock/version/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name getBoard
     * @summary get Board
     * @operationId get_Board
     * @tags Board
     *
     * @description if you want get Board object by query = board_id. User can get only boards from project, whitch user owning or user need Permission key "Board_rea".
     *
     * @param {string} board_id
     *
     * @returns {IBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getBoard(board_id:string):Promise<IBoard> {
        return this.requestRestPath("GET", `/board/${board_id}`, {}, [200]);
    }

    /**
     * @name getCProgram
     * @summary get C_program
     * @operationId get_C_Program
     * @tags C_Program
     *
     * @description get C_program by query = c_program_id
     *
     * @param {string} c_program_id - c_program_id String query
     *
     * @returns {ICProgram} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getCProgram(c_program_id:string):Promise<ICProgram> {
        return this.requestRestPath("GET", `/compilation/c_program/c_program/${c_program_id}`, {}, [200]);
    }

    /**
     * @name getCProgramVersion
     * @summary get C_program Version
     * @operationId get_C_Program_Version
     * @tags C_Program
     *
     * @description get Version of C_program by query = verison_id
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {ICProgramVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getCProgramVersion(version_id:string):Promise<ICProgramVersion> {
        return this.requestRestPath("GET", `/compilation/c_program/version/${version_id}`, {}, [200]);
    }

    /**
     * @name getInstance
     * @summary get Instance by instance_id
     * @operationId get_b_program_instance
     * @tags Instance
     *
     * @description get unique instance under Blocko program (now its 1:1) we are not supporting multi-instnace schema yet
     *
     * @param {string} instance_id
     *
     * @returns {IHomerInstance} [code 200] Successful Uploaded
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getInstance(instance_id:string):Promise<IHomerInstance> {
        return this.requestRestPath("GET", `/instance/get/${instance_id}`, {}, [200]);
    }

    /**
     * @name getInvoice
     * @summary get Invoice with all details
     * @operationId invoice_get
     * @tags Price & Invoice & Tariffs
     *
     * @description get summary information from invoice
     *
     * @param {number} invoice_id
     *
     * @returns {IInvoiceFullDetails} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getInvoice(invoice_id:number):Promise<IInvoiceFullDetails> {
        return this.requestRestPath("GET", `/invoice/get/${invoice_id}`, {}, [200]);
    }

    /**
     * @name getLibrary
     * @summary get SingleLibrary
     * @operationId get_SingleLibrary
     * @tags SingleLibrary
     *
     * @description if you want get SingleLibrary by query = library_id
     *
     * @param {string} library_id - library_id String query
     *
     * @returns {ISingleLibrary} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getLibrary(library_id:string):Promise<ISingleLibrary> {
        return this.requestRestPath("GET", `/compilation/library/${library_id}`, {}, [200]);
    }

    /**
     * @name getLibraryGroup
     * @summary get LibraryGroup
     * @operationId get_LibraryGroup
     * @tags LibraryGroup
     *
     * @description If you want get LibraryGroup by query = libraryGroup_id
     *
     * @param {string} libraryGroup_id - libraryGroup_id String query
     *
     * @returns {ILibraryGroup} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getLibraryGroup(libraryGroup_id:string):Promise<ILibraryGroup> {
        return this.requestRestPath("GET", `/compilation/libraryGroup/${libraryGroup_id}`, {}, [200]);
    }

    /**
     * @name getLibraryGroupVersion
     * @summary get version from LibraryGroup
     * @operationId get_LibraryGroup_Version
     * @tags LibraryGroup
     *
     * @description get version from LibraryGroup
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IVersionObject} [code 200] Ok result
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws [code 500] Server side Error
     */
    public getLibraryGroupVersion(version_id:string):Promise<IVersionObject> {
        return this.requestRestPath("GET", `/compilation/libraryGroup/version/${version_id}`, {}, [200]);
    }

    /**
     * @name getLibraryGroupVersionLibraries
     * @summary get Libraries from LibraryGroup Version
     * @operationId get_LibraryGroup_Version_Libraries
     * @tags LibraryGroup
     *
     * @description If you want get Libraries from LibraryGroup.Version by query = version_id
     *
     * @param {string} version_id
     *
     * @returns {IVersionObject} [code 200] Ok result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getLibraryGroupVersionLibraries(version_id:string):Promise<IVersionObject> {
        return this.requestRestPath("GET", `/file/listOfFiles/${version_id}`, {}, [200]);
    }

    /**
     * @name getLoggedInPerson
     * @summary get Person by token (after Oauth2 Login -> Facebook, GitHub, Twitter)
     * @operationId getPersonByToken
     * @tags Access, Person, Social-GitHub, Social-Facebook
     *
     * @description If you want login to system with social networks - you can used facebook, github or twitter api just ask for token, server responds with object where is token and redirection link. Redirect user to this link and after returning to success page that you filled in ask for token, ask again to this api and server respond with Person Object and with Roles and Permissions lists
     *
     *
     * @returns {ILoginResult} [code 200] Successfully logged
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Wrong Email or Password
     * @throws [code 500] Server side Error
     */
    public getLoggedInPerson():Promise<ILoginResult> {
        return this.requestRestPath("GET", `/login/person`, {}, [200]);
    }

    /**
     * @name getMProgram
     * @summary get M_Program
     * @operationId get_M_Program
     * @tags M_Program
     *
     * @description get M_Program by quarry m_program_id
     *
     * @param {string} m_progrm_id - m_program_id String query
     *
     * @returns {IMProgram} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProgram(m_progrm_id:string):Promise<IMProgram> {
        return this.requestRestPath("GET", `/m_program/${m_progrm_id}`, {}, [200]);
    }

    /**
     * @name getMProgramAppToken
     * @summary get M_Program by generated token
     * @operationId get_M_Program_byQR_Token_forMobile
     * @tags APP-Api
     *
     * @description get M_Program by token
     *
     * @param {string} qr_token - qr_token String query
     *
     * @returns {IMProgramVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProgramAppToken(qr_token:string):Promise<IMProgramVersion> {
        return this.requestRestPath("GET", `/m_program/app/token/${qr_token}`, {}, [200]);
    }

    /**
     * @name getMProgramVersion
     * @summary get M_Program Version
     * @operationId get_M_Program_version
     * @tags M_Program
     *
     * @description get M_Program Version by quarry m_program_version_id
     *
     * @param {string} m_program_version_id - m_program_version_id String query
     *
     * @returns {IMProgramVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProgramVersion(m_program_version_id:string):Promise<IMProgramVersion> {
        return this.requestRestPath("GET", `/m_program/version/${m_program_version_id}`, {}, [200]);
    }

    /**
     * @name getMProject
     * @summary get M_Project
     * @operationId get_M_Project
     * @tags M_Program
     *
     * @description get M_Project by query = m_project_id
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IMProject} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProject(m_project_id:string):Promise<IMProject> {
        return this.requestRestPath("GET", `/m_project/${m_project_id}`, {}, [200]);
    }

    /**
     * @name getMProjectInterfaceCollection
     * @summary get accessible interface from M_Project
     * @operationId get_M_Project_Interface_collection
     * @tags M_Program
     *
     * @description get accessible interface from M_Project
     *
     * @param {string} m_project_id - m_project_id String query
     *
     * @returns {IMProjectInterface} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getMProjectInterfaceCollection(m_project_id:string):Promise<IMProjectInterface> {
        return this.requestRestPath("GET", `/m_project/interface_collection/${m_project_id}`, {}, [200]);
    }

    /**
     * @name getPerson
     * @summary get Person
     * @operationId get_Person
     * @tags Person
     *
     * @description get Person by id
     *
     * @param {string} person_id - person_id String query
     *
     * @returns {IPerson} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getPerson(person_id:string):Promise<IPerson> {
        return this.requestRestPath("GET", `/coreClient/person/person/${person_id}`, {}, [200]);
    }

    /**
     * @name getProcessor
     * @summary get Processor
     * @operationId get_Processor
     * @tags Processor
     *
     * @description If you get Processor by query processor_id.
     *
     * @param {string} processor_id - processor_id String query
     *
     * @returns {IProcessor} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws [code 500] Server side Error
     */
    public getProcessor(processor_id:string):Promise<IProcessor> {
        return this.requestRestPath("GET", `/processor/${processor_id}`, {}, [200]);
    }

    /**
     * @name getProducer
     * @summary get Producer
     * @operationId get_Producer
     * @tags Producer
     *
     * @description if you want get Producer. Its company owned physical boards and we used that for filtering
     *
     * @param {string} producer_id
     *
     * @returns {IProducer} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getProducer(producer_id:string):Promise<IProducer> {
        return this.requestRestPath("GET", `/producer/${producer_id}`, {}, [200]);
    }

    /**
     * @name getProject
     * @summary get Project
     * @operationId project_get
     * @tags Project
     *
     * @description get Projects by project_id
     *
     * @param {string} project_id - project_id String path
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getProject(project_id:string):Promise<IProject> {
        return this.requestRestPath("GET", `/project/${project_id}`, {}, [200]);
    }

    /**
     * @name getSecurePersonSystemAcces
     * @summary get all system person_permissions & Roles
     * @operationId get_System_Acces
     * @tags Role, Permission, Person
     *
     * @description This api return List of Roles and List of Permission
     *
     * @param {string} person_id
     *
     * @returns {ISystemAccess} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getSecurePersonSystemAcces(person_id:string):Promise<ISystemAccess> {
        return this.requestRestPath("GET", `/secure/person/system_acces/${person_id}`, {}, [200]);
    }

    /**
     * @name getTypeOfBlock
     * @summary get TypeOfBlock 
     * @operationId typeOfBlock_get
     * @tags Type-of-Block
     *
     * @description get BlockoBlock 
     *
     * @param {string} type_of_block_id - type_of_block_id String path
     *
     * @returns {ITypeOfBlock} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getTypeOfBlock(type_of_block_id:string):Promise<ITypeOfBlock> {
        return this.requestRestPath("GET", `/typeOfBlock/${type_of_block_id}`, {}, [200]);
    }

    /**
     * @name getTypeOfBoard
     * @summary get TypeOfBoard
     * @operationId get_TypeOfBoard
     * @tags Type-Of-Board
     *
     * @description if you want get TypeOfBoard object by query = type_of_board_id
     *
     * @param {string} type_of_board_id
     *
     * @returns {ITypeOfBoard} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found - details in message
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getTypeOfBoard(type_of_board_id:string):Promise<ITypeOfBoard> {
        return this.requestRestPath("GET", `/typeOfBoard/${type_of_board_id}`, {}, [200]);
    }

    /**
     * @name getTypeOfWidget
     * @summary get TypeOfWidget 
     * @operationId typeOfWidget_get
     * @tags Type-of-Widget
     *
     * @description get TypeOfWidget
     *
     * @param {string} type_of_widget_id - type_of_widget_id String path
     *
     * @returns {ITypeOfWidget} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getTypeOfWidget(type_of_widget_id:string):Promise<ITypeOfWidget> {
        return this.requestRestPath("GET", `/type_of_widget/${type_of_widget_id}`, {}, [200]);
    }

    /**
     * @name getWebsocketAccessToken
     * @summary get temporary Connection Token
     * @operationId get_Websocket_token
     * @tags Access, WebSocket
     *
     * @description for connection to websocket, you have to connect with temporary unique token. This Api return 
     *
     *
     * @returns {IWebSocketToken} [code 200] Token succesfuly generated
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public getWebsocketAccessToken():Promise<IWebSocketToken> {
        return this.requestRestPath("GET", `/websocket/access_token`, {}, [200]);
    }

    /**
     * @name getWidget
     * @summary get GridWidget
     * @operationId gridWidget_get
     * @tags Grid-Widget
     *
     * @description get independent GridWidget object
     *
     * @param {string} grid_widget_id - grid_widget_id String path
     *
     * @returns {IGridWidget} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getWidget(grid_widget_id:string):Promise<IGridWidget> {
        return this.requestRestPath("GET", `/grid_widget/${grid_widget_id}`, {}, [200]);
    }

    /**
     * @name getWidgetVersion
     * @summary get version of the GridWidget
     * @operationId gridWidgetVersion_get
     * @tags Grid-Widget
     *
     * @description get version (content) from independent GridWidget
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IGridWidgetVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public getWidgetVersion(grid_widget_version_id:string):Promise<IGridWidgetVersion> {
        return this.requestRestPath("GET", `/grid_widget/version/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name listBPrograms
     * @summary get B_Program by Filter
     * @operationId get_b_Program_by_Filter
     * @tags B_Program
     *
     * @description get B_Program List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBProgramFilter} body - Contains Json with values
     *
     * @returns {IBProgramList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listBPrograms(page_number:number, body:IBProgramFilter):Promise<IBProgramList> {
        return this.requestRestPath("PUT", `/b_program/list/${page_number}`, body, [200]);
    }

    /**
     * @name listBlockoBlocks
     * @summary get BlockoBlock by Filter
     * @operationId blockoBlock_getByFilter
     * @tags Blocko-Block
     *
     * @description get BlockoBlock List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IBlockoBlockFilter} body - Contains Json with values
     *
     * @returns {IBlockoBlockList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listBlockoBlocks(page_number:number, body:IBlockoBlockFilter):Promise<IBlockoBlockList> {
        return this.requestRestPath("PUT", `/blockoBlock/list/${page_number}`, body, [200]);
    }

    /**
     * @name listBoards
     * @summary get Boards with filter parameters
     * @operationId get_Board_Filter
     * @tags Board
     *
     * @description Get List of boards. Acording by permission - system return only hardware from project, where is user owner or all boards if user have static Permission key
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...n. For first call, use 1
     * @param {IBoardFilter} body - Contains Json with values
     *
     * @returns {IBoardList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public listBoards(page_number:number, body:IBoardFilter):Promise<IBoardList> {
        return this.requestRestPath("PUT", `/board/filter/${page_number}`, body, [200]);
    }

    /**
     * @name listCProgramVersionPublics
     * @summary get C_program_Version public
     * @operationId get_C_Program_public_list
     * @tags C_Program
     *
     * @description get approved or edited C_program public Versions 
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     *
     * @returns {ICProgramVersionPublicList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listCProgramVersionPublics(page_number:number):Promise<ICProgramVersionPublicList> {
        return this.requestRestPath("GET", `/compilation/c_program/version/public/list/${page_number}`, {}, [200]);
    }

    /**
     * @name listCPrograms
     * @summary get C_program List
     * @operationId get_C_Program_by_Filter
     * @tags C_Program
     *
     * @description get all C_Programs that belong to logged person
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {ICProgramFilter} body - Contains Json with values
     *
     * @returns {ICProgramList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listCPrograms(page_number:number, body:ICProgramFilter):Promise<ICProgramList> {
        return this.requestRestPath("PUT", `/compilation/c_program/list/${page_number}`, body, [200]);
    }

    /**
     * @name listLibraries
     * @summary get Library with Filters parameters
     * @operationId get_SingleLibrary_Filter
     * @tags SingleLibrary
     *
     * @description If you want get all or only some SingleLibraries you can use filter parameters in Json. But EveryTime i will return maximal 25 objects 
     *    
     *    so, you have to used that limit for frontend pagination -> first round (0,25), second round (26, 50) etc... I will give you alsoinformation how many results you can show 
     *     
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n For first call, use 1
     * @param {ISingleLibraryFilter} body - Contains Json with values
     *
     * @returns {ISingleLibraryList} [code 200] Ok result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public listLibraries(page_number:number, body:ISingleLibraryFilter):Promise<ISingleLibraryList> {
        return this.requestRestPath("PUT", `/compilation/library/filter/${page_number}`, body, [200]);
    }

    /**
     * @name listLibraryGroups
     * @summary get LibraryGroup with Filters parameters
     * @operationId get_LibraryGroup_Filter
     * @tags LibraryGroup
     *
     * @description If you want get all or only some LibraryGroups you can use filter parameters in Json. But EveryTime server will return maximal 25 objects 
     *    
     *    so, you have to used that limit for frontend pagination -> first round (0,25), second round (26, 50) etc... in Json we help you with pages list 
     *     
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...n For first call, use 1 (first page of list) 
     * @param {ILibraryGroupFilter} body - Contains Json with values
     *
     * @returns {ILibraryGroupList} [code 200] Ok result
     *
     * @throws [code 500] Server side Error
     */
    public listLibraryGroups(page_number:number, body:ILibraryGroupFilter):Promise<ILibraryGroupList> {
        return this.requestRestPath("PUT", `/compilation/libraryGroup/filter/${page_number}`, body, [200]);
    }

    /**
     * @name listNotifications
     * @summary get latest notification
     * @operationId get_notification_page
     * @tags Notifications
     *
     * @description Get list of latest user notifications. Server return maximum 25 latest objects. 
     *    
     *     For get another page (next 25 notifications) call this api with "page_number" path parameter. 
     *    
     *     May missing or you can insert Integer values from page[1,2...,n] in JsonNotification body cannot by documented through swagger. Visit wiki.byzance.cz
     *
     * @param {number} page_number - page_number is Integer. Contain  1,2...  For first call, use 1
     *
     * @returns {INotificationList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listNotifications(page_number:number):Promise<INotificationList> {
        return this.requestRestPath("GET", `/notification/list/${page_number}`, {}, [200]);
    }

    /**
     * @name listTypeOfBlocks
     * @summary get TypeOfBlock by Filter
     * @operationId typeOfBlock_getByFilter
     * @tags Type-of-Block
     *
     * @description get TypeOfBlock List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {ITypeOfBlockFilter} body - Contains Json with values
     *
     * @returns {ITypeOfBlockList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listTypeOfBlocks(page_number:number, body:ITypeOfBlockFilter):Promise<ITypeOfBlockList> {
        return this.requestRestPath("PUT", `/typeOfBlock/list/${page_number}`, body, [200]);
    }

    /**
     * @name listTypeOfWidgets
     * @summary get TypeOfWidget by Filter
     * @operationId typeOfWidget_getByFilter
     * @tags Type-of-Widget
     *
     * @description get TypeOfWidget List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {ITypeOfWidgetFilter} body - Contains Json with values
     *
     * @returns {ITypeOfWidgetList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listTypeOfWidgets(page_number:number, body:ITypeOfWidgetFilter):Promise<ITypeOfWidgetList> {
        return this.requestRestPath("PUT", `/type_of_widget/list/${page_number}`, body, [200]);
    }

    /**
     * @name listWidgets
     * @summary get GridWidget by Filter
     * @operationId gridWidget_getByFilter
     * @tags Grid-Widget
     *
     * @description get GridWidget List
     *
     * @param {number} page_number - page_number is Integer. 1,2,3...nFor first call, use 1 (first page of list)
     * @param {IGridWidgetFilter} body - Contains Json with values
     *
     * @returns {IGridWidgetList} [code 200] Ok Result
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public listWidgets(page_number:number, body:IGridWidgetFilter):Promise<IGridWidgetList> {
        return this.requestRestPath("PUT", `/grid_widget/list/${page_number}`, body, [200]);
    }

    /**
     * @name markNotificationRead
     * @summary mark notifications as read
     * @operationId mark_as_read_notification
     * @tags Notifications
     *
     * @description Mark notifications as read. Send list with ids
     *
     * @param {INotificationRead} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Successfully marked as read
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public markNotificationRead(body:INotificationRead):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/notification/read`, body, [200]);
    }

    /**
     * @name productActivate
     * @summary activate Product Tariff
     * @operationId product_activate
     * @tags Price & Invoice & Tariffs
     *
     * @description activate product and deactivate all staff around that
     *
     * @param {number} product_id
     *
     * @returns {IProduct} [code 200] Activateing was successful
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public productActivate(product_id:number):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/activate/${product_id}`, {}, [200]);
    }

    /**
     * @name productDeactivate
     * @summary deactivate Product Tariff
     * @operationId product_deactivate
     * @tags Price & Invoice & Tariffs
     *
     * @description deactivate product and deactivate all staff around that
     *
     * @param {number} product_id
     *
     * @returns {IProduct} [code 200] Deactivating was successful
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public productDeactivate(product_id:number):Promise<IProduct> {
        return this.requestRestPath("PUT", `/product/deactivate/${product_id}`, {}, [200]);
    }

    /**
     * @name putAdminEmbeddedHardwareRequest
     * @summary Request for Details for new Board
     * @operationId new_hardware_request
     * @tags Board_Registration
     *
     * @description Required data for new Embedded Hardware for first hardware settings. Required Permission key from Tyrion Backend Web Page!
     *
     * @param {IHardwareNewSettingsRequest} body - Contains Json with values
     *
     * @returns {IHardwareNewSettingsResult} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putAdminEmbeddedHardwareRequest(body:IHardwareNewSettingsRequest):Promise<IHardwareNewSettingsResult> {
        return this.requestRestPath("PUT", `/admin/embedded_hardware/request`, body, [200]);
    }

    /**
     * @name putAdminEmbeddedHardwareResult
     * @summary Result for Details for new Board
     * @operationId new_hardware_result
     * @tags Board_Registration
     *
     * @description Result data for new Embedded Hardware for first hardware settings. Required Permission key from Tyrion Backend Web Page!
     *
     * @param {IHardwareNewHardwareResult} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putAdminEmbeddedHardwareResult(body:IHardwareNewHardwareResult):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/admin/embedded_hardware/result`, body, [200]);
    }

    /**
     * @name putApproval
     * @operationId gridApproval
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public putApproval():Promise<IResult> {
        return this.requestRestPath("PUT", `/grid/approval`, {}, [200]);
    }

    /**
     * @name putBlockoApproval
     * @operationId blockoApproval
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public putBlockoApproval():Promise<IResult> {
        return this.requestRestPath("PUT", `/blocko/approval`, {}, [200]);
    }

    /**
     * @name putBlockoBlockSchemeVersion
     * @operationId blockoBlockVersion_editScheme
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public putBlockoBlockSchemeVersion():Promise<IResult> {
        return this.requestRestPath("PUT", `/blockoBlock/scheme/version`, {}, [200]);
    }

    /**
     * @name putBlockoBlockVersionMakePublic
     * @summary make BlockoBlock version public
     * @operationId blockoBlockVersion_makePublic
     * @tags Blocko-Block
     *
     * @description sets Approval_state to pending
     *
     * @param {string} blocko_block_version_id - blocko_block_version_id String path
     *
     * @returns {IBlockoBlockVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putBlockoBlockVersionMakePublic(blocko_block_version_id:string):Promise<IBlockoBlockVersion> {
        return this.requestRestPath("PUT", `/blockoBlock/version/make_public/${blocko_block_version_id}`, {}, [200]);
    }

    /**
     * @name putBlockoDisapprove
     * @operationId blockoDisapprove
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public putBlockoDisapprove():Promise<IResult> {
        return this.requestRestPath("PUT", `/blocko/disapprove`, {}, [200]);
    }

    /**
     * @name putCProgramVersionMakePublic
     * @summary make C_program_Version public
     * @operationId make_C_Program_Version_public
     * @tags C_Program
     *
     * @description make C_program public, so other users can see it and use it
     *
     * @param {string} version_id - version_id String query
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putCProgramVersionMakePublic(version_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/compilation/c_program/version/make_public/${version_id}`, {}, [200]);
    }

    /**
     * @name putDisapprove
     * @operationId gridDisapprove
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public putDisapprove():Promise<IResult> {
        return this.requestRestPath("PUT", `/grid/disapprove`, {}, [200]);
    }

    /**
     * @name putMProgramAppUrl
     * @summary get url + m_program code for Terminal
     * @operationId get_conection_url
     * @tags APP-Api
     *
     * @param {IMobileConnectionRequest} body - Contains Json with values
     *
     * @returns {IMProgramVersion} [code 200] Successful created
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws {IBadRequest} [code 477] Instance is offline
     * @throws {IBadRequest} [code 478] External Server Error
     * @throws [code 500] Server side Error
     */
    public putMProgramAppUrl(body:IMobileConnectionRequest):Promise<IMProgramVersion> {
        return this.requestRestPath("PUT", `/m_program/app/url`, body, [200]);
    }

    /**
     * @name putPersonRemovePicture
     * @summary remove Person picture
     * @operationId removePersonPicture
     * @tags Person
     *
     * @description Removes picture of logged person
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public putPersonRemovePicture():Promise<IResultOk> {
        return this.requestRestPath("PUT", `/coreClient/person/removePicture`, {}, [200]);
    }

    /**
     * @name putPersonUploadPicture
     * @summary upload Person picture
     * @operationId uploadPersonPicture
     * @tags Person
     *
     * @description Uploads personal photo. Picture must be smaller than 500 KB and its dimensions must be between 50 and 400 pixels. If user already has a picture, it will be replaced by the new one. API requires 'multipart/form-data' Content-Type, name of the property is 'file'.
     *
     *
     * @returns {IResultOk} [code 200] OK Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws [code 500] Server side Error
     */
    public putPersonUploadPicture():Promise<IResultOk> {
        return this.requestRestPath("PUT", `/coreClient/person/uploadPicture`, {}, [200]);
    }

    /**
     * @name putProjectChangeParticipantState
     * @summary change participant status
     * @operationId project_changeParticipantStatus
     * @tags Project
     *
     * @description Changes participant status 
     *
     * @param {string} project_id - project_id String path
     * @param {IProjectParticipantStatus} body - Contains Json with values
     *
     * @returns {IProjectParticipant} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Objects not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putProjectChangeParticipantState(project_id:string, body:IProjectParticipantStatus):Promise<IProjectParticipant> {
        return this.requestRestPath("PUT", `/project/change_participant_state/${project_id}`, body, [200]);
    }

    /**
     * @name putSecureRolePerson
     * @summary add Person to Role (Group) 
     * @operationId add_Role_Person
     * @tags Role, Person
     *
     * @description If you set Role to Person. You need permission for that or have right system Roles
     *
     * @param {string} mail
     * @param {string} role_id
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putSecureRolePerson(mail:string, role_id:string):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/secure/role/person/${mail}/${role_id}`, {}, [200]);
    }

    /**
     * @name putWidgetSchemeVersion
     * @operationId gridWidgetVersion_editScheme
     * @tags Not Documented API - InProgress or Stuck
     *
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public putWidgetSchemeVersion():Promise<IResult> {
        return this.requestRestPath("PUT", `/grid_widget/scheme/version`, {}, [200]);
    }

    /**
     * @name putWidgetVersionMakePublic
     * @summary make GridWidget version public
     * @operationId gridWidgetVersion_makePublic
     * @tags Grid-Widget
     *
     * @description sets Approval_state to pending
     *
     * @param {string} grid_widget_version_id - grid_widget_version_id String path
     *
     * @returns {IGridWidgetVersion} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public putWidgetVersionMakePublic(grid_widget_version_id:string):Promise<IGridWidgetVersion> {
        return this.requestRestPath("PUT", `/grid_widget/version/make_public/${grid_widget_version_id}`, {}, [200]);
    }

    /**
     * @name recoveryMailPersonPassword
     * @summary send password recovery email
     * @operationId sendPasswordRecoveryEmail
     * @tags Access
     *
     * @description sends email with link for changing forgotten password
     *
     * @param {IPersonPasswordRecoveryEmail} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK
     *
     * @throws {IJsonValueMissingResult} [code 400] Some Json value Missing
     * @throws [code 500] Server side Error
     */
    public recoveryMailPersonPassword(body:IPersonPasswordRecoveryEmail):Promise<IResultOk> {
        return this.requestRestPath("POST", `/coreClient/mail_person_password_recovery`, body, [200]);
    }

    /**
     * @name recoveryPersonPassword
     * @summary change person password
     * @operationId personPasswordRecovery
     * @tags Access
     *
     * @description changes password if password_recovery_token is not older than 24 hours, deletes all FloatingPersonTokens
     *
     * @param {IPersonPasswordNew} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] OK
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws [code 500] Server side Error
     */
    public recoveryPersonPassword(body:IPersonPasswordNew):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/coreClient/person_password_recovery`, body, [200]);
    }

    /**
     * @name sendInvoiceRemainder
     * @operationId send_remainder_to_custumer
     * @tags Not Documented API - InProgress or Stuck
     *
     * @param {number} invoice_id
     *
     * @returns {IResult} [code 200] successful operation
     *
     */
    public sendInvoiceRemainder(invoice_id:number):Promise<IResult> {
        return this.requestRestPath("PUT", `/invoice/send_remainder/${invoice_id}`, {}, [200]);
    }

    /**
     * @name shareProject
     * @summary share Project with Users
     * @operationId project_invite
     * @tags Project
     *
     * @description sends Invitation to all users in list: List<persons_mail>
     *
     * @param {string} project_id - project_id String path
     * @param {IShareProjectPerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public shareProject(project_id:string, body:IShareProjectPerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/shareProject/${project_id}`, body, [200]);
    }

    /**
     * @name unshareProject
     * @summary unshare Project with Persons
     * @operationId project_removeParticipant
     * @tags Project
     *
     * @description unshare Project with all users in list: List<person_id>
     *
     * @param {string} project_id - project_id String path
     * @param {IShareProjectPerson} body - Contains Json with values
     *
     * @returns {IProject} [code 200] Ok Result
     *
     * @throws {IBadRequest} [code 400] Something is wrong - details in message 
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public unshareProject(project_id:string, body:IShareProjectPerson):Promise<IProject> {
        return this.requestRestPath("PUT", `/project/unshareProject/${project_id}`, body, [200]);
    }

    /**
     * @name uploadCProgramVersion
     * @summary update Embedded Hardware with C_program compilation
     * @operationId uploadCompilationToBoard
     * @tags C_Program, Actualization
     *
     * @description Upload compilation to list of hardware. Compilation is on Version oc C_program. And before uplouding compilation, you must succesfuly compile required version before! Result (HTML code) will be every time 200. - Its because upload, restart, etc.. operation need more than ++30 second There is also problem / chance that Tyrion didn't find where Embedded hardware is. So you have to listening Server Sent Events (SSE) and show "future" message to the user!
     *
     * @param {string} version_id - version_id 
     * @param {IListOfBoards} body - Contains Json with values
     *
     * @returns {IResultOk} [code 200] Ok Result
     *
     * @throws {IObjectNotFound} [code 400] Object not found
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public uploadCProgramVersion(version_id:string, body:IListOfBoards):Promise<IResultOk> {
        return this.requestRestPath("PUT", `/compilation/c_program/version/upload/${version_id}`, body, [200]);
    }

    /**
     * @name uploadLibrary
     * @summary Upload file to SingleLibrary
     * @operationId upload_SingleLibrary_Version
     * @tags SingleLibrary
     *
     * @description Upload file to SingleLibrary in file format
     *
     * @param {string} version_id
     * @param {string} body - File in file.txt format
     *
     * @returns {IResultOk} [code 200] Successfully uploaded
     *
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public uploadLibrary(version_id:string, body:string):Promise<IResultOk> {
        return this.requestRestPath("POST", `/compilation/library/upload/${version_id}`, body, [200]);
    }

    /**
     * @name uploadLibraryGroup
     * @summary upload files to Version in LibraryGroup
     * @operationId upload_Library_To_LibraryGroup
     * @tags LibraryGroup
     *
     * @description Its not possible now describe uploud file in Swagger. But file name must be longer than 5 chars.in body of html content is "files"
     *
     * @param {string} version_id
     *
     * @returns {any} [code 200] Ok result
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws {IResultUnauthorized} [code 401] Unauthorized request
     * @throws {IPermissionRequired} [code 403] Need required permission
     * @throws [code 500] Server side Error
     */
    public uploadLibraryGroup(version_id:string):Promise<any> {
        return this.requestRestPath("POST", `/compilation/libraryGroup/upload/${version_id}`, {}, [200]);
    }

    /**
     * @name validatePersonEntity
     * @summary validate some Entity
     * @operationId validate_Entity
     * @tags Person
     *
     * @description for cyclical validation during registration, key contains 'mail' or 'nick_name'. Or can be used for 'vat_number' as a key.
     *
     * @param {IEntityValidationIn} body - Contains Json with values
     *
     * @returns {IEntityValidationOut} [code 200] Result if its possible to used that
     *
     * @throws {IBadRequest} [code 400] Something is wrong
     * @throws [code 500] Server side Error
     */
    public validatePersonEntity(body:IEntityValidationIn):Promise<IEntityValidationOut> {
        return this.requestRestPath("POST", `/coreClient/person/validate_entity`, body, [200]);
    }

}
